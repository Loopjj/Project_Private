//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "TMain.h"
#include "TSettings.h"
#include "TProg.h"
#include "TProg1.h"
#include "TGraph.h"
#include "TStatus.h"
#include "TConvert.h"

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "AdPort"
#pragma link "OoMisc"
#pragma link "sSkinManager"
#pragma link "sPanel"
#pragma link "sLabel"
#pragma link "sButton"
#pragma link "sComboBox"
#pragma resource "*.dfm"
TMainForm *MainForm;
//---------------------------------------------------------------------------
__fastcall TMainForm::TMainForm(TComponent* Owner)
    : TForm(Owner)
{
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::FormShow(TObject *Sender)
{
    sComboBox_ComPort->Clear();
    for(int i = 0; i < 20; i++) {
        if(IsPortAvailable(i))
            sComboBox_ComPort->Items->Add("COM"+IntToStr(i));
    }
    sComboBox_ComPort->ItemIndex = 0;

    RLED[0][0] = PER0; RLED[0][1] = PER1; RLED[0][2] = PER2; RLED[0][3] = PER3;
    RLED[0][4] = PER4; RLED[0][5] = PER5; RLED[0][6] = PER6; RLED[0][7] = PER7;
    RLED[1][0] = PCK0; RLED[1][1] = PCK1; RLED[1][2] = PCK2; RLED[1][3] = PCK3;
    RLED[1][4] = PCK4;
    RLED[2][0] = PSG0; RLED[2][1] = PSG1; RLED[2][2] = PSG2; RLED[2][3] = PSG3;
    RLED[2][4] = PSG4; RLED[2][5] = PSG5; RLED[2][6] = PSG6; RLED[2][7] = PSG7;

    SData[0][0]  = ParmForm->Edit_P00; SData[0][1]  = ParmForm->Edit_P01; SData[0][2]  = ParmForm->Edit_P02; SData[0][3]  = ParmForm->Edit_P03;
    SData[0][4]  = ParmForm->Edit_P04; SData[0][5]  = ParmForm->Edit_P05; SData[0][6]  = ParmForm->Edit_P06; SData[0][7]  = ParmForm->Edit_P07;
    SData[0][8]  = ParmForm->Edit_P08; SData[0][9]  = ParmForm->Edit_P09; SData[0][10] = ParmForm->Edit_P0A; SData[0][11] = ParmForm->Edit_P0B;
    SData[0][12] = ParmForm->Edit_P0C; SData[0][13] = ParmForm->Edit_P0D; SData[0][14] = ParmForm->Edit_P0E; SData[0][15] = ParmForm->Edit_P0F;

    SData[1][0]  = ParmForm->Edit_P10; SData[1][1]  = ParmForm->Edit_P11; SData[1][2]  = ParmForm->Edit_P12; SData[1][3]  = ParmForm->Edit_P13;
    SData[1][4]  = ParmForm->Edit_P14; SData[1][5]  = ParmForm->Edit_P15; SData[1][6]  = ParmForm->Edit_P16; SData[1][7]  = ParmForm->Edit_P17;
    SData[1][8]  = ParmForm->Edit_P18; SData[1][9]  = ParmForm->Edit_P19; SData[1][10] = ParmForm->Edit_P1A; SData[1][11] = ParmForm->Edit_P1B;
    SData[1][12] = ParmForm->Edit_P1C; SData[1][13] = ParmForm->Edit_P1D; SData[1][14] = ParmForm->Edit_P1E; SData[1][15] = ParmForm->Edit_P1F;

    SData[2][0]  = ParmForm->Edit_P20; SData[2][1]  = ParmForm->Edit_P21; SData[2][2]  = ParmForm->Edit_P22; SData[2][3]  = ParmForm->Edit_P23;
    SData[2][4]  = ParmForm->Edit_P24; SData[2][5]  = ParmForm->Edit_P25; SData[2][6]  = ParmForm->Edit_P26; SData[2][7]  = ParmForm->Edit_P27;
    SData[2][8]  = ParmForm->Edit_P28; SData[2][9]  = ParmForm->Edit_P29; SData[2][10] = ParmForm->Edit_P2A; SData[2][11] = ParmForm->Edit_P2B;
    SData[2][12] = ParmForm->Edit_P2C; SData[2][13] = ParmForm->Edit_P2D; SData[2][14] = ParmForm->Edit_P2E; SData[2][15] = ParmForm->Edit_P2F;

    SData[3][0]  = ParmForm->Edit_P30; SData[3][1]  = ParmForm->Edit_P31; SData[3][2]  = ParmForm->Edit_P32; SData[3][3]  = ParmForm->Edit_P33;
    SData[3][4]  = ParmForm->Edit_P34; SData[3][5]  = ParmForm->Edit_P35; SData[3][6]  = ParmForm->Edit_P36; SData[3][7]  = ParmForm->Edit_P37;
    SData[3][8]  = ParmForm->Edit_P38; SData[3][9]  = ParmForm->Edit_P39; SData[3][10] = ParmForm->Edit_P3A; SData[3][11] = ParmForm->Edit_P3B;
    SData[3][12] = ParmForm->Edit_P3C; SData[3][13] = ParmForm->Edit_P3D; SData[3][14] = ParmForm->Edit_P3E; SData[3][15] = ParmForm->Edit_P3F;

    SData[4][0]  = ParmForm->Edit_P40; SData[4][1]  = ParmForm->Edit_P41; SData[4][2]  = ParmForm->Edit_P42; SData[4][3]  = ParmForm->Edit_P43;
    SData[4][4]  = ParmForm->Edit_P44; SData[4][5]  = ParmForm->Edit_P45; SData[4][6]  = ParmForm->Edit_P46; SData[4][7]  = ParmForm->Edit_P47;
    SData[4][8]  = ParmForm->Edit_P48; SData[4][9]  = ParmForm->Edit_P49; SData[4][10] = ParmForm->Edit_P4A; SData[4][11] = ParmForm->Edit_P4B;
    SData[4][12] = ParmForm->Edit_P4C; SData[4][13] = ParmForm->Edit_P4D; SData[4][14] = ParmForm->Edit_P4E; SData[4][15] = ParmForm->Edit_P4F;

    SLabel[0][0]  = ParmForm->Label_P00; SLabel[0][1]  = ParmForm->Label_P01; SLabel[0][2]  = ParmForm->Label_P02; SLabel[0][3]  = ParmForm->Label_P03;
    SLabel[0][4]  = ParmForm->Label_P04; SLabel[0][5]  = ParmForm->Label_P05; SLabel[0][6]  = ParmForm->Label_P06; SLabel[0][7]  = ParmForm->Label_P07;
    SLabel[0][8]  = ParmForm->Label_P08; SLabel[0][9]  = ParmForm->Label_P09; SLabel[0][10] = ParmForm->Label_P0A; SLabel[0][11] = ParmForm->Label_P0B;
    SLabel[0][12] = ParmForm->Label_P0C; SLabel[0][13] = ParmForm->Label_P0D; SLabel[0][14] = ParmForm->Label_P0E; SLabel[0][15] = ParmForm->Label_P0F;

    SLabel[1][0]  = ParmForm->Label_P10; SLabel[1][1]  = ParmForm->Label_P11; SLabel[1][2]  = ParmForm->Label_P12; SLabel[1][3]  = ParmForm->Label_P13;
    SLabel[1][4]  = ParmForm->Label_P14; SLabel[1][5]  = ParmForm->Label_P15; SLabel[1][6]  = ParmForm->Label_P16; SLabel[1][7]  = ParmForm->Label_P17;
    SLabel[1][8]  = ParmForm->Label_P18; SLabel[1][9]  = ParmForm->Label_P19; SLabel[1][10] = ParmForm->Label_P1A; SLabel[1][11] = ParmForm->Label_P1B;
    SLabel[1][12] = ParmForm->Label_P1C; SLabel[1][13] = ParmForm->Label_P1D; SLabel[1][14] = ParmForm->Label_P1E; SLabel[1][15] = ParmForm->Label_P1F;

    SLabel[2][0]  = ParmForm->Label_P20; SLabel[2][1]  = ParmForm->Label_P21; SLabel[2][2]  = ParmForm->Label_P22; SLabel[2][3]  = ParmForm->Label_P23;
    SLabel[2][4]  = ParmForm->Label_P24; SLabel[2][5]  = ParmForm->Label_P25; SLabel[2][6]  = ParmForm->Label_P26; SLabel[2][7]  = ParmForm->Label_P27;
    SLabel[2][8]  = ParmForm->Label_P28; SLabel[2][9]  = ParmForm->Label_P29; SLabel[2][10] = ParmForm->Label_P2A; SLabel[2][11] = ParmForm->Label_P2B;
    SLabel[2][12] = ParmForm->Label_P2C; SLabel[2][13] = ParmForm->Label_P2D; SLabel[2][14] = ParmForm->Label_P2E; SLabel[2][15] = ParmForm->Label_P2F;

    SLabel[3][0]  = ParmForm->Label_P30; SLabel[3][1]  = ParmForm->Label_P31; SLabel[3][2]  = ParmForm->Label_P32; SLabel[3][3]  = ParmForm->Label_P33;
    SLabel[3][4]  = ParmForm->Label_P34; SLabel[3][5]  = ParmForm->Label_P35; SLabel[3][6]  = ParmForm->Label_P36; SLabel[3][7]  = ParmForm->Label_P37;
    SLabel[3][8]  = ParmForm->Label_P38; SLabel[3][9]  = ParmForm->Label_P39; SLabel[3][10] = ParmForm->Label_P3A; SLabel[3][11] = ParmForm->Label_P3B;
    SLabel[3][12] = ParmForm->Label_P3C; SLabel[3][13] = ParmForm->Label_P3D; SLabel[3][14] = ParmForm->Label_P3E; SLabel[3][15] = ParmForm->Label_P3F;

    SLabel[4][0]  = ParmForm->Label_P40; SLabel[4][1]  = ParmForm->Label_P41; SLabel[4][2]  = ParmForm->Label_P42; SLabel[4][3]  = ParmForm->Label_P43;
    SLabel[4][4]  = ParmForm->Label_P44; SLabel[4][5]  = ParmForm->Label_P45; SLabel[4][6]  = ParmForm->Label_P46; SLabel[4][7]  = ParmForm->Label_P47;
    SLabel[4][8]  = ParmForm->Label_P48; SLabel[4][9]  = ParmForm->Label_P49; SLabel[4][10] = ParmForm->Label_P4A; SLabel[4][11] = ParmForm->Label_P4B;
    SLabel[4][12] = ParmForm->Label_P4C; SLabel[4][13] = ParmForm->Label_P4D; SLabel[4][14] = ParmForm->Label_P4E; SLabel[4][15] = ParmForm->Label_P4F;

    m_flag = 0;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::ApdComPort1TriggerAvail(TObject *CP, WORD Count)
{
    AnsiString str = "->";
    unsigned char rdata;

    for(int i = 0; i < Count; i++) {
        rdata = ApdComPort1->GetChar();
        switch(m_bProgFlag) {
            case 0:
                RxData(rdata);
                break;
            case 1:
                ProgRxData(rdata);
                break;
            case 2:
                Prog1RxData(rdata);
                break;
            default:
                RxData(rdata);
                break;
        }
        str = str+"0x"+IntToHex(rdata,2)+" ";
    }
    Memo_Log->Lines->Add(str);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::ProgRxData(unsigned char rdata)
{
    if(ProgForm->m_nProgStep == 0 && rdata == 0xAA) {
        ProgForm->m_nProgStep = 1;
        ProgForm->Memo->Lines->Add("Bootloader Active");
        ProgForm->ProgTimer->Enabled = true;
    }
    else if(ProgForm->m_nProgStep > 0) {
        if(rdata != 0xE0) {
            ProgForm->ProgTimer->Enabled = false;
            ProgForm->m_nProgStep = 0;

            if(rdata == 0xE1)
              ProgForm->Memo->Lines->Add("S-Record Out Of Range");
            else if(rdata == 0xE2)
              ProgForm->Memo->Lines->Add("S-Record Size Must Be Even");
            else if(rdata == 0xE3)
              ProgForm->Memo->Lines->Add("Flash Programming Error");
            else if(rdata == 0xE4)
              ProgForm->Memo->Lines->Add("Flash Erase Error");
            else if(rdata == 0xE5)
              ProgForm->Memo->Lines->Add("Bad Hex Data");
            else if(rdata == 0xE6)
              ProgForm->Memo->Lines->Add("S-Record Too Long");
            else if(rdata == 0xE7)
              ProgForm->Memo->Lines->Add("CheckSumErr");
            else if(rdata == 0xE8)
              ProgForm->Memo->Lines->Add("Application Reset Vector Not Present");
            else if(rdata == 0xE9)
              ProgForm->Memo->Lines->Add("EEPROM Erase Error");
            else if(rdata == 0xEF)
              ProgForm->Memo->Lines->Add("Invalid Error Number");
            else
              ProgForm->Memo->Lines->Add("Unknown Error");

            ProgForm->sGauge->Progress = 0;
            m_bProgFlag = 0;
            ProgForm->sButton_Program->Down = false;
            ProgForm->sButton_BWrite->Down = false;
            ProgForm->Update();
        }
        ProgForm->m_ucProgResp = rdata;
    }
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Prog1RxData(unsigned char rdata)
{
   if (rdata == '-') {
        Prog1Form->m_nProgStep = 0;
        Prog1Form->Memo->Lines->Add("Program Error!");
        return;
    }

    switch(Prog1Form->m_nProgStep){
        case 0:
                if(rdata == '>') {
                    Prog1Form->ProgTimer->Enabled = false;
                    Prog1Form->Memo->Lines->Add("Bootloader Active");
                    MainForm->ApdComPort1->PutChar('p');
                    MainForm->ApdComPort1->PutChar('f');
                    MainForm->ApdComPort1->PutChar('\n');
                    Prog1Form->m_nProgStep = 1;
                }
                break;
        case 1:
                if(rdata == '+') {
                    Prog1Form->Memo->Lines->Add("Program Flash");
                    Prog1Form->m_nProgStep = 2;
                    Prog1Form->Memo->Lines->Add("Please wait..");
                    Prog1Form->ProgTimer->Enabled = true;
                }
                break;
        case 2:
                if(rdata == '.'){
                    Prog1Form->m_bFLength++;
                }
                else if(rdata == '*') {
                    Prog1Form->Memo->Text = "Save Size = " + IntToStr(Prog1Form->m_bFLength) + "bytes";
                }
                break;
        case 3:
                if(rdata == '+') {
                    MainForm->ApdComPort1->PutChar('g');
                    MainForm->ApdComPort1->PutChar('\n');
                    Prog1Form->Memo->Lines->Add("Program Ok!");
                    Prog1Form->m_nProgStep = 4;
                }
                break;
        case 4:
                MainForm->ApdComPort1->SWFlowOptions = swfNone;
                Prog1Form->sGauge->Progress = 0;
                Prog1Form->Memo->Lines->Add("Download Complete!");
                Prog1Form->m_nProgStep = 0;
                Prog1Form->m_bFLength = 0;
                MainForm->m_bProgFlag = 0;
                Prog1Form->sButton_Program->Down = false;
                break;
    }
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::RxData(unsigned char rdata)
{
    switch(m_ucRxStep) {
        case 0:
                if(rdata == 0xc6)
                    m_ucSyncCnt++;
                else
                    m_ucSyncCnt = 0;
                if(m_ucSyncCnt == 2) {
                    m_ucRxStep = 1;
                    m_ucSyncCnt = 0;
                }
                break;
        case 1:
                if(rdata == 0x7e)
                    m_ucRxStep = 2;
                else
                    m_ucRxStep = 0;
                break;
        case 2:
                m_ucRxLength = rdata-2;
                m_ucRxStep = 3;
                break;
        case 3:
                m_ucRxCommand = rdata;
                m_ucRxStep = 4;
                break;
        case 4:
                m_ucRxID = rdata;
                m_ucRxDataCnt = 0;
                m_ucRxStep = 5;
                break;
        case 5:
                m_ucRxData[m_ucRxDataCnt] = rdata;
                m_ucRxDataCnt++;
                if(m_ucRxDataCnt == m_ucRxLength)
                    m_ucRxStep = 6;
                break;
        case 6:
                unsigned char checksum;
                checksum = (m_ucRxLength+2)^m_ucRxCommand^m_ucRxID;
                for(int i = 0; i < m_ucRxLength; i++)
                    checksum ^= m_ucRxData[i];
                checksum++;
                if(checksum == rdata)
                    m_ucRxStep = 7;
                else
                    m_ucRxStep = 0;
                break;
        case 7:
                m_ucRxStep = 0;
                m_ucSyncCnt = 0;
                if(rdata == 0x7d)
                    DecodeData();
                break;
    }
}

//---------------------------------------------------------------------------

void __fastcall TMainForm::DecodeData(void)
{
    AnsiString str;
    unsigned int data;
    double tmp;

    switch(m_ucRxCommand) {
        case 0x40:
                break;
        case 0x41:
                break;
        case 0x42:
                break;
        case 0x43:
                break;
        case 0x44:
                break;
        case 0x45:
                break;
        case 0x46:
                break;
        case 0x47:
                break;
        case 0x48:
                for(int i = 0; i < 4; i++)
                    TVal[i] = (m_ucRxData[2*i]<<8)+m_ucRxData[2*i+1];
                for(int i = 0; i < 2; i++)
                    PVal[i] = (m_ucRxData[2*i+8]<<8)+m_ucRxData[2*i+9];

                APart   = (m_ucRxData[12]<<8)+m_ucRxData[13];
                BVal = (double)((m_ucRxData[14]<<8)+m_ucRxData[15])/100.0;
                IVal = (m_ucRxData[16]<<8)+m_ucRxData[17];
                SVal    = (m_ucRxData[18]<<8)+m_ucRxData[19];
                IPWMVal = (double)(m_ucRxData[20]*255)/100.0;
                FPWMVal = m_ucRxData[21];
                ErrFlag = m_ucRxData[22];
                ChkFlag = m_ucRxData[23];
                RTime   = (m_ucRxData[24]<<8)+m_ucRxData[25];
                RCount  = (m_ucRxData[26]<<8)+m_ucRxData[27];
                SigFlag = m_ucRxData[28];
                StsFlag = m_ucRxData[29];
                MainForm->StatusBar1->Panels->Items[0]->Text = "ECU Ver : " + IntToStr(m_ucRxData[30]/0x10) + IntToStr(m_ucRxData[30]%0x10) + "." + IntToStr(m_ucRxData[31]/0x10) + IntToStr(m_ucRxData[31]%0x10);
                RPM     = (m_ucRxData[32]<<8)+m_ucRxData[33];
                LTime   = IntToStr((m_ucRxData[34]<<8)+m_ucRxData[35])
                        + ":"+IntToStr(m_ucRxData[36]/10)+IntToStr(m_ucRxData[36]%10)
                        + ":"+IntToStr(m_ucRxData[37]/10)+IntToStr(m_ucRxData[37]%10);
                Peak1   = (m_ucRxData[38]<<8)+m_ucRxData[39];
                Peak2   = (m_ucRxData[40]<<8)+m_ucRxData[41];
                m_uLat = m_ucRxData[42]*0x100+m_ucRxData[43];
                m_uLat1 = m_ucRxData[44]*0x100+m_ucRxData[45];
                m_uLon = m_ucRxData[46]*0x100+m_ucRxData[47];
                m_uLon1 = m_ucRxData[48]*0x100+m_ucRxData[49];
                m_uAlt = m_ucRxData[50]*0x100+m_ucRxData[51];
                m_uAlt1 = m_ucRxData[52]*0x100+m_ucRxData[53];
                m_uSpd = m_ucRxData[54]*0x100+m_ucRxData[55];

                UpdateVal();
                break;
        case 0x49:
                for(int i = 0; i < 5; i++) {
                    for(int j = 0; j < 16; j++) {
                       SData[i][j]->Text = IntToStr((m_ucRxData[i*32+j*2]<<8)+m_ucRxData[i*32+j*2+1]);
  //                   SLabel[i][j]->Color = clSilver;
                    }
                }
                AlarmWindow("Receive OK");
                break;
        case 0x4A:
                for(int i = m_ucRxID+1; i < 5; i++) {
                    if(ParmForm->m_bPWriteEnable[i]) {
                        TxParm(i);
                        break;
                    }
                }
                break;
        case 0x50:
                m_ulCarNum = (m_ucRxData[0]<<24)+(m_ucRxData[1]<<16)+(m_ucRxData[2]<<8)+m_ucRxData[3];
                Edit_CarNum->Text = str.sprintf("%06d",m_ulCarNum); 
                break;
        case 0x60:
                if(m_ucRxID < 4)
                    ParmForm->Panel_TADC->Caption = IntToStr((m_ucRxData[0]<<8)+m_ucRxData[1]);
                else
                    ParmForm->Panel_PADC->Caption = IntToStr((m_ucRxData[0]<<8)+m_ucRxData[1]);
                break;
        case 0x61:
                break;
        case 0x62:
                if(m_ucRxID < 4) {
                    m_uiTADCValLow = (m_ucRxData[0]<<8)+m_ucRxData[1];
                    m_uiTADCValHigh = (m_ucRxData[2]<<8)+m_ucRxData[3];
                    m_uiTRangeL = (short)((m_ucRxData[4]<<8)+m_ucRxData[5]);
                    m_uiTRangeH = (m_ucRxData[6]<<8)+m_ucRxData[7];
                    m_ufTQFact = (m_ucRxData[8]<<8)+m_ucRxData[9];
                    ParmForm->Edit_TRangeL->Text = IntToStr(m_uiTRangeL);
                    ParmForm->Edit_TRangeH->Text = IntToStr(m_uiTRangeH);
                    ParmForm->Edit_TCalLow->Text = IntToStr(m_uiTADCValLow);
                    ParmForm->Edit_TCalHigh->Text = IntToStr(m_uiTADCValHigh);
                    ParmForm->Edit_TQ->Text = IntToStr(m_ufTQFact);
                    if(m_ucRxData[10]) {
                        ParmForm->CB_Temp->Checked = true;
                        ParmForm->Edit_TRangeL->Enabled = true;
                        ParmForm->Edit_TQ->Enabled = true;
                    }
                    else {
                        ParmForm->CB_Temp->Checked = false;
                        ParmForm->Edit_TRangeL->Enabled = false;
                        ParmForm->Edit_TQ->Enabled = false;
                    }
                    AlarmWindow("Receive OK!");
                }
                else {
                    m_uiPADCValLow = (m_ucRxData[0]<<8)+m_ucRxData[1];
                    m_uiPADCValHigh = (m_ucRxData[2]<<8)+m_ucRxData[3];
                    m_uiPRangeL = (m_ucRxData[4]<<8)+m_ucRxData[5];
                    m_uiPRangeH = (m_ucRxData[6]<<8)+m_ucRxData[7];
                    m_ufPQFact = (m_ucRxData[8]<<8)+m_ucRxData[9];
                    ParmForm->Edit_PRangeL->Text = IntToStr(m_uiPRangeL);
                    ParmForm->Edit_PRangeH->Text = IntToStr(m_uiPRangeH);
                    ParmForm->Edit_PCalLow->Text = IntToStr(m_uiPADCValLow);
                    ParmForm->Edit_PCalHigh->Text = IntToStr(m_uiPADCValHigh);
                    ParmForm->Edit_PQ->Text = IntToStr(m_ufPQFact);
                    if(m_ucRxData[10]) {
                        ParmForm->CB_Press->Checked = true;
                        ParmForm->Edit_PRangeL->Enabled = true;
                        ParmForm->Edit_PRangeH->Enabled = true;
                        ParmForm->Edit_PCalLow->Enabled = true;
                        ParmForm->Edit_PCalHigh->Enabled = true;
                        ParmForm->Edit_PQ->Enabled = true;
                        ParmForm->CheckBox_Press->Enabled = true;
                        ParmForm->BitBtn_PCalLow->Enabled = true;
                        ParmForm->BitBtn_PCalHigh->Enabled = true;
                    }
                    else {
                        ParmForm->CB_Press->Checked = false;
                        ParmForm->CB_Press->Checked = false;
                        ParmForm->Edit_PRangeL->Enabled = false;
                        ParmForm->Edit_PRangeH->Enabled = false;
                        ParmForm->Edit_PCalLow->Enabled = false;
                        ParmForm->Edit_PCalHigh->Enabled = false;
                        ParmForm->Edit_PQ->Enabled = false;
                        ParmForm->CheckBox_Press->Enabled = false;
                        ParmForm->BitBtn_PCalLow->Enabled = false;
                        ParmForm->BitBtn_PCalHigh->Enabled = false;
                    }
                    AlarmWindow("Receive OK!");
                }
                break;
        case 0x63:
                str = "20";
                str = str+IntToStr(m_ucRxData[5]/10)+IntToStr(m_ucRxData[5]%10)+"/";
                str = str+IntToStr(m_ucRxData[4]/10)+IntToStr(m_ucRxData[4]%10)+"/";
                str = str+IntToStr(m_ucRxData[3]/10)+IntToStr(m_ucRxData[3]%10)+"    ";
                str = str+IntToStr(m_ucRxData[2]/10)+IntToStr(m_ucRxData[2]%10)+":";
                str = str+IntToStr(m_ucRxData[1]/10)+IntToStr(m_ucRxData[1]%10)+":";
                str = str+IntToStr(m_ucRxData[0]/10)+IntToStr(m_ucRxData[0]%10);
                ParmForm->Panel_RTC->Caption = str;
                break;
        case 0x64:
                break;
        case 0x70:
                m_bProgFlag = 1;
                ApdComPort1->SWFlowOptions = swfBoth;
                break;
    }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::UpdateVal(void)
{
    AnsiString str;

    Edit_T0->Text = IntToStr(TVal[0]);
    Edit_T1->Text = IntToStr(TVal[1]);
    Edit_T2->Text = IntToStr(TVal[2]);
    Edit_T3->Text = IntToStr(TVal[3]);    
    Edit_P0->Text = IntToStr(PVal[0]);
    Edit_P1->Text = IntToStr(Peak1);
    Edit_P2->Text = IntToStr(PVal[1]);
    Edit_P3->Text = IntToStr(Peak2);
    Edit_FPWM->Text= IntToStr(FPWMVal);
    Edit_RPM->Text = IntToStr(RPM);
    Edit_Lat->Text = IntToStr(m_uLat)+"."+IntToStr(m_uLat1);
    Edit_Lon->Text = IntToStr(m_uLon)+"."+IntToStr(m_uLon1);
    Edit_Alt->Text = IntToStr(m_uAlt)+"."+IntToStr(m_uAlt1);
    Edit_Spd->Text = IntToStr(m_uSpd);
    Edit_Step->Text = IntToStr(SVal);
    Edit_Time0->Text = IntToStr(RTime);
    Edit_Time1->Text = IntToStr(RCount);
    Edit_Time2->Text = LTime;
    Edit_B0->Text = str.FormatFloat("0.00", BVal);
    Edit_I0->Text = IntToStr(IVal);

    for(int i = 0; i < 8; i++) {
        if((ErrFlag>>i)&0x01) RLED[0][i]->Color = clRed;
        else RLED[0][i]->Color = clBtnFace;
        if((SigFlag>>i)&0x01) RLED[2][i]->Color = clRed;
        else RLED[2][i]->Color = clBtnFace;
    }
    for(int i = 0; i < 5; i++) {
        if((ChkFlag>>i)&0x01) RLED[1][i]->Color = clRed;
        else RLED[1][i]->Color = clBtnFace;
    }
    if((StsFlag&0x08)==0x08) {
        sButton_MANUAL->Down         = true;
        sButton_AUTO->Down           = false;
        sButton_ACOn->Enabled        = true;
        sButton_ACOff->Enabled       = true;
        sButton_ASOn->Enabled        = true;
        sButton_ASOff->Enabled       = true;
        sButton_IGNOn->Enabled       = true;
        sButton_IGNOff->Enabled      = true;
        UD_IGN->Enabled              = true;
        sButton_IGNSet->Enabled      = true;
        sButton_FPROn->Enabled       = true;
        sButton_FPROff->Enabled      = true;
        sButton_FPSOn->Enabled       = true;
        sButton_FPSOff->Enabled      = true;
        UD_FP->Enabled               = true;
        sButton_FPSet->Enabled       = true;
        sButton_InitDrvTime->Enabled = true;
        sButton_InitGegenCnt->Enabled= true;
        sButton_AlarmClear->Enabled  = true;
    }
    else {
        sButton_MANUAL->Down         = false;
        sButton_AUTO->Down           = true;
        sButton_ACOn->Enabled        = false;
        sButton_ACOff->Enabled       = false;
        sButton_ASOn->Enabled        = false;
        sButton_ASOff->Enabled       = false;
        sButton_IGNOn->Enabled       = false;
        sButton_IGNOff->Enabled      = false;
        UD_IGN->Enabled              = false;
        sButton_IGNSet->Enabled      = false;
        sButton_FPROn->Enabled       = false;
        sButton_FPROff->Enabled      = false;
        sButton_FPSOn->Enabled       = false;
        sButton_FPSOff->Enabled      = false;
        UD_FP->Enabled               = false;
        sButton_FPSet->Enabled       = false;
        sButton_InitDrvTime->Enabled = false;
        sButton_InitGegenCnt->Enabled= false;
        sButton_AlarmClear->Enabled  = false;        
    }
    if(sButton_MANUAL->Down) {
        if(RLED[2][1]->Color == clRed) {
          sButton_ACOn->Down = true;
          sButton_ACOff->Down = false;
        }
        else {
          sButton_ACOn->Down = false;
          sButton_ACOff->Down = true;
        }
        if(RLED[2][2]->Color == clRed) {
          sButton_IGNOn->Down = true;
          sButton_IGNOff->Down = false;
        }
        else {
          sButton_IGNOn->Down = false;
          sButton_IGNOff->Down = true;
        }
        if(RLED[2][3]->Color == clRed) {
          sButton_FPROn->Down = true;
          sButton_FPROff->Down = false;
        }
        else {
          sButton_FPROn->Down = false;
          sButton_FPROff->Down = true;
        }
        if(RLED[2][4]->Color == clRed) {
          sButton_ASOn->Down = true;
          sButton_ASOff->Down = false;
        }
        else {
          sButton_ASOn->Down = false;
          sButton_ASOff->Down = true;
        }
        if(RLED[2][5]->Color == clRed) {
          sButton_FPSOn->Down = true;
          sButton_FPSOff->Down = false;
        }
        else {
          sButton_FPSOn->Down = false;
          sButton_FPSOff->Down = true;
        }
    }
    if(CB_Rec->Checked) {
        m_nRecCount++;
        str = IntToStr(m_nRecCount);
        str = str+"\t"+Edit_T0->Text;
        str = str+"\t"+Edit_T1->Text;
        str = str+"\t"+Edit_T2->Text;
        str = str+"\t"+Edit_T3->Text;
        str = str+"\t"+Edit_P0->Text;
        str = str+"\t"+Edit_P1->Text;
        str = str+"\t"+Edit_P2->Text;
        str = str+"\t"+Edit_P3->Text;
        str = str+"\t"+Edit_FPWM->Text;
        str = str+"\t"+Edit_RPM->Text;
        str = str+"\t"+Edit_Lat->Text;
        str = str+"\t"+Edit_Lon->Text;
        str = str+"\t"+Edit_Alt->Text;
        str = str+"\t"+Edit_Spd->Text;
        str = str+"\t"+Edit_Step->Text;
        str = str+"\t"+Edit_Time0->Text;
        str = str+"\t"+Edit_Time1->Text;
        str = str+"\t"+Edit_Time2->Text;
        str = str+"\t"+Edit_B0->Text;
        str = str+"\t"+Edit_I0->Text;
        RecEdit->Lines->Add(str);
    }
}

//---------------------------------------------------------------------------
void __fastcall TMainForm::TxData(unsigned char sync, unsigned char len, unsigned char command, unsigned char id, unsigned char *data)
{
    AnsiString str = "<-";
    unsigned char i, sdata[100], check_sum;

    if(!ApdComPort1->Open) {
        ShowMessage("Please Open the COM Port First.");
        return;
    }

    sdata[0] = sync;
    sdata[1] = sync;
    sdata[2] = 0x7e;
    sdata[3] = len+2;
    sdata[4] = command;
    sdata[5] = id;
    check_sum = (len+2)^command^id;
    for(i = 0; i < len; i++) {
        sdata[i+6] = *data++;
        check_sum = check_sum^sdata[i+6];
    }
    check_sum++;
    sdata[len+6] = check_sum;
    sdata[len+7] = 0x7d;

    for(i = 0; i < len+8; i++) {
      ApdComPort1->PutChar(sdata[i]);
      str = str+"0x"+IntToHex(sdata[i],2)+" ";
    }
    Memo_Log->Lines->Add(str);
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::TxCmd(unsigned char sync, unsigned char command, unsigned char sig)
{
    TxData(sync, 1, command, 0, &sig);
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::TxParm(unsigned char id)
{
    AnsiString str = "<-";
    unsigned char i, sdata[100], check_sum;
    unsigned int data;

    if(!ApdComPort1->Open) {
      ShowMessage("Please Open the COM Port First.");
      return;
    }
    sdata[0] = 0xc6;
    sdata[1] = 0xc6;
    sdata[2] = 0x7e;
    sdata[3] = 34;
    sdata[4] = 0x4A;
    sdata[5] = id;
    check_sum = 34^0x4A^id;
    for(i = 0; i < 16; i++) {
      data = StrToInt(SData[id][i]->Text);
      sdata[2*i+6] = (data>>8)&0xff;
      sdata[2*i+7] = data&0xff;
      check_sum = check_sum^sdata[2*i+6]^sdata[2*i+7];
    }
    check_sum++;
    sdata[38] = check_sum;
    sdata[39] = 0x7d;

    for(i = 0; i < 40; i++) {
      ApdComPort1->PutChar(sdata[i]);
      str = str+"0x"+IntToHex(sdata[i],2)+" ";
    }
    Memo_Log->Lines->Add(str);
    ParmForm->m_bPWriteEnable[id] = false;

    if(id == 0)
        ParmForm->sCheckBox_P0->Checked = false;
    else if(id == 1)
        ParmForm->sCheckBox_P1->Checked = false;
    else if(id == 2)
        ParmForm->sCheckBox_P2->Checked = false;
    else if(id == 3)
        ParmForm->sCheckBox_P3->Checked = false;
    else if(id == 4)
        ParmForm->sCheckBox_P4->Checked = false;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::CB_GraphClick(TObject *Sender)
{
//    GraphForm->GraphTimer->Enabled = CB_Graph->Enabled;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::AlarmWindow(AnsiString str)
{
    StatusForm->SetAlarmMsg(str);
    StatusForm->Show();
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::AppException(TObject *Sender, Exception *E)
{

  if(E->Message == "ie_Open - device already open")
  {
     ApdComPort1->Open = false;
     ShowMessage("Device already open");
   }
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::FormCreate(TObject *Sender)
{
   Application->OnException = AppException;
   SetErrorMode(SEM_FAILCRITICALERRORS);        
}
//---------------------------------------------------------------------------
 

void __fastcall TMainForm::sButton_SettingsClick(TObject *Sender)
{
    ParmForm->Show();
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_ExitClick(TObject *Sender)
{
    ApdComPort1->Open = false;
    Close();        
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_ConvertClick(TObject *Sender)
{
  ConvertForm->ShowModal();
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_ProgramClick(TObject *Sender)
{
    ProgForm->ShowModal();
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_OBDProgramClick(TObject *Sender)
{
    Prog1Form->ShowModal();        
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_GraphClick(TObject *Sender)
{
    GraphForm->Show();
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_ComOpenClick(TObject *Sender)
{
    int index, port, baud;

    index = sComboBox_ComPort->ItemIndex;
    ApdComPort1->Open = false;
    port = StrToInt(sComboBox_ComPort->Items->Strings[index].SubString(4,sComboBox_ComPort->Items->Strings[index].Length()-3));
    baud = StrToInt(sComboBox_Baud->Text);
    ApdComPort1->ComNumber = port;
    ApdComPort1->Baud = baud;
    ApdComPort1->Open = true;
    sButton_ComClose->Down = false;
    sButton_ComOpen->Down = true;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_ComCloseClick(TObject *Sender)
{
    ApdComPort1->Open = false;
    sButton_ComClose->Down = true;
    sButton_ComOpen->Down = false;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_VSaveClick(TObject *Sender)
{
    SaveDialog->FilterIndex = 2;
    if(SaveDialog->Execute()) {
        m_asRecFileName = SaveDialog->FileName;
        RecEdit->Lines->SaveToFile(m_asRecFileName);
        RecEdit->Clear();
        m_nRecCount = 0;
    }        
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_GetInfoClick(TObject *Sender)
{
    TxCmd(0xd7, 0x50, 0);        
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_InitDrvTimeClick(TObject *Sender)
{
    TxCmd(0xc6, 0x4C, 1);        
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_InitGegenCntClick(TObject *Sender)
{
    TxCmd(0xc6, 0x4D, 1);        
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_IGNOnClick(TObject *Sender)
{
    TxCmd(0xc6, 0x43, 1);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_IGNOffClick(TObject *Sender)
{
    TxCmd(0xc6, 0x43, 0);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_ACOnClick(TObject *Sender)
{
    TxCmd(0xc6, 0x41, 1);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_ACOffClick(TObject *Sender)
{
    TxCmd(0xc6, 0x41, 0);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_ASOnClick(TObject *Sender)
{
    TxCmd(0xc6, 0x42, 1);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_ASOffClick(TObject *Sender)
{
    TxCmd(0xc6, 0x42, 0);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_IGNSetClick(TObject *Sender)
{
    unsigned char val;

    val = UD_IGN->Position*255/100;
    TxCmd(0xc6, 0x44, val);        
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_FPROnClick(TObject *Sender)
{
    TxCmd(0xc6, 0x45, 1);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_FPROffClick(TObject *Sender)
{
    TxCmd(0xc6, 0x45, 0);
}

//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_FPSetClick(TObject *Sender)
{
    unsigned char val;

    val = UD_FP->Position;
    TxCmd(0xc6, 0x47, val);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_FPSOnClick(TObject *Sender)
{
    TxCmd(0xc6, 0x46, 1);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_FPSOffClick(TObject *Sender)
{
    TxCmd(0xc6, 0x46, 0);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_ClearClick(TObject *Sender)
{
    Memo_Log->Clear();        
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_LSaveClick(TObject *Sender)
{
    SaveDialog->FilterIndex = 2;
    if(SaveDialog->Execute()) {
        Memo_Log->Lines->SaveToFile(SaveDialog->FileName);
    }        
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_AUTOClick(TObject *Sender)
{
    TxCmd(0xc6, 0x40, 0);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_MANUALClick(TObject *Sender)
{
    TxCmd(0xc6, 0x40, 1);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::sButton_AlarmClearClick(TObject *Sender)
{
    TxCmd(0xc6, 0x4e, 1);
}
//---------------------------------------------------------------------------


void __fastcall TMainForm::sButton_SetInfoClick(TObject *Sender)
{
    unsigned char sdata[6];

    m_ulCarNum = StrToInt(Edit_CarNum->Text);
    sdata[0] = (m_ulCarNum>>24)&0xff;
    sdata[1] = (m_ulCarNum>>16)&0xff;
    sdata[2] = (m_ulCarNum>>8)&0xff;
    sdata[3] = m_ulCarNum&0xff;
    TxData(0xd7, 4, 0x51, 0, sdata);        
}
//---------------------------------------------------------------------------

