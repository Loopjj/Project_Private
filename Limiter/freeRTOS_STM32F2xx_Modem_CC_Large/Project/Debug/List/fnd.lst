###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       18/Dec/2023  17:37:04
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\fnd.c
#    Command line =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\fnd.c -D
#        USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_USB_OTG_FS -lC
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List
#        --diag_suppress Pa050 -o
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\ -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\cpu\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Drv\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\fat\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\bsp\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Dev\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Core\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_OTG_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\portable\IAR\ARM_CM3\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\include\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\usbConf\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\drivers\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List\fnd.lst
#    Object file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj\fnd.o
#
###############################################################################

E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\fnd.c
      1          /*
      2          *************************************** (C) COPYRIGHT 2015 Loop *************************************
      3          *
      4          * File Name          : fnd.c
      5          *
      6          * Author             : Digital Development Team
      7          *
      8          * Version            : V1.0.0
      9          *
     10          * Date               : 04/05/2015
     11          *
     12          * Description        : fnd display
     13          *
     14          *********************************************************************************************************
     15          */
     16          
     17          
     18          /*
     19          *********************************************************************************************************
     20          *                                             INCLUDE FILES
     21          *********************************************************************************************************
     22          */
     23          
     24          #define FND_GLOBALS
     25          #include "includes.h"

   \                                 In section .bss, align 4
   \   __absolute INT8U FND_DATA[5]
   \                     FND_DATA:
   \   00000000                      DS8 8
     26          
     27          
     28          
     29          /*
     30          *********************************************************************************************************
     31          *                                               CONSTANT
     32          *********************************************************************************************************
     33          */
     34          INT16U FND_DispCnt = 0;
   \                     FND_DispCnt:
   \   00000008                      DS8 2
     35          
     36          
     37          /*
     38          *********************************************************************************************************
     39          *                                                FUNCTIONS
     40          *********************************************************************************************************
     41          */

   \                                 In section .text, align 2, keep-with-next
     42          void SetDataFND(INT8U data)
     43          {
   \                     SetDataFND: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
     44          	if(data  & 0x01 )   FND_SET(A, 1);
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable8  ;; 0x40020800
   \   00000008   0x07E0             LSLS     R0,R4,#+31
   \   0000000A   0xD505             BPL.N    ??SetDataFND_0
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0x2102             MOVS     R1,#+2
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0x.... 0x....      BL       GPIO_WriteBit
   \   00000016   0xE004             B.N      ??SetDataFND_1
     45          	else				FND_SET(A, 0);
   \                     ??SetDataFND_0: (+1)
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0x.... 0x....      BL       GPIO_WriteBit
     46          	if(data  & 0x02 )   FND_SET(B, 1);
   \                     ??SetDataFND_1: (+1)
   \   00000022   0x07A0             LSLS     R0,R4,#+30
   \   00000024   0xD505             BPL.N    ??SetDataFND_2
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0x2104             MOVS     R1,#+4
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x.... 0x....      BL       GPIO_WriteBit
   \   00000030   0xE004             B.N      ??SetDataFND_3
     47          	else				FND_SET(B, 0);
   \                     ??SetDataFND_2: (+1)
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x2104             MOVS     R1,#+4
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0x.... 0x....      BL       GPIO_WriteBit
     48          	if(data  & 0x04 )   FND_SET(C, 1);
   \                     ??SetDataFND_3: (+1)
   \   0000003C   0x0760             LSLS     R0,R4,#+29
   \   0000003E   0xD505             BPL.N    ??SetDataFND_4
   \   00000040   0x2201             MOVS     R2,#+1
   \   00000042   0x2108             MOVS     R1,#+8
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0x.... 0x....      BL       GPIO_WriteBit
   \   0000004A   0xE004             B.N      ??SetDataFND_5
     49          	else				FND_SET(C, 0);
   \                     ??SetDataFND_4: (+1)
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x2108             MOVS     R1,#+8
   \   00000050   0x4628             MOV      R0,R5
   \   00000052   0x.... 0x....      BL       GPIO_WriteBit
     50          	if(data  & 0x08 )   FND_SET(D, 1);
   \                     ??SetDataFND_5: (+1)
   \   00000056   0x0720             LSLS     R0,R4,#+28
   \   00000058   0xD505             BPL.N    ??SetDataFND_6
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x2110             MOVS     R1,#+16
   \   0000005E   0x4628             MOV      R0,R5
   \   00000060   0x.... 0x....      BL       GPIO_WriteBit
   \   00000064   0xE004             B.N      ??SetDataFND_7
     51          	else				FND_SET(D, 0);
   \                     ??SetDataFND_6: (+1)
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x2110             MOVS     R1,#+16
   \   0000006A   0x4628             MOV      R0,R5
   \   0000006C   0x.... 0x....      BL       GPIO_WriteBit
     52          	if(data  & 0x10 )   FND_SET(E, 1);
   \                     ??SetDataFND_7: (+1)
   \   00000070   0x06E0             LSLS     R0,R4,#+27
   \   00000072   0xD505             BPL.N    ??SetDataFND_8
   \   00000074   0x2201             MOVS     R2,#+1
   \   00000076   0x2120             MOVS     R1,#+32
   \   00000078   0x4628             MOV      R0,R5
   \   0000007A   0x.... 0x....      BL       GPIO_WriteBit
   \   0000007E   0xE004             B.N      ??SetDataFND_9
     53          	else				FND_SET(E, 0);
   \                     ??SetDataFND_8: (+1)
   \   00000080   0x2200             MOVS     R2,#+0
   \   00000082   0x2120             MOVS     R1,#+32
   \   00000084   0x4628             MOV      R0,R5
   \   00000086   0x.... 0x....      BL       GPIO_WriteBit
     54          	if(data  & 0x20 )   FND_SET(F, 1);
   \                     ??SetDataFND_9: (+1)
   \   0000008A   0x06A0             LSLS     R0,R4,#+26
   \   0000008C   0xD505             BPL.N    ??SetDataFND_10
   \   0000008E   0x2201             MOVS     R2,#+1
   \   00000090   0x2140             MOVS     R1,#+64
   \   00000092   0x4628             MOV      R0,R5
   \   00000094   0x.... 0x....      BL       GPIO_WriteBit
   \   00000098   0xE004             B.N      ??SetDataFND_11
     55          	else				FND_SET(F, 0);
   \                     ??SetDataFND_10: (+1)
   \   0000009A   0x2200             MOVS     R2,#+0
   \   0000009C   0x2140             MOVS     R1,#+64
   \   0000009E   0x4628             MOV      R0,R5
   \   000000A0   0x.... 0x....      BL       GPIO_WriteBit
     56          	if(data  & 0x40 )   FND_SET(G, 1);
   \                     ??SetDataFND_11: (+1)
   \   000000A4   0x0660             LSLS     R0,R4,#+25
   \   000000A6   0xD505             BPL.N    ??SetDataFND_12
   \   000000A8   0x2201             MOVS     R2,#+1
   \   000000AA   0x2180             MOVS     R1,#+128
   \   000000AC   0x4628             MOV      R0,R5
   \   000000AE   0x.... 0x....      BL       GPIO_WriteBit
   \   000000B2   0xE004             B.N      ??SetDataFND_13
     57          	else				FND_SET(G, 0);
   \                     ??SetDataFND_12: (+1)
   \   000000B4   0x2200             MOVS     R2,#+0
   \   000000B6   0x2180             MOVS     R1,#+128
   \   000000B8   0x4628             MOV      R0,R5
   \   000000BA   0x.... 0x....      BL       GPIO_WriteBit
     58          	if(data  & 0x80 )   FND_SET(P, 1);
   \                     ??SetDataFND_13: (+1)
   \   000000BE   0x0620             LSLS     R0,R4,#+24
   \   000000C0   0xD507             BPL.N    ??SetDataFND_14
   \   000000C2   0x2201             MOVS     R2,#+1
   \   000000C4   0xF44F 0x5100      MOV      R1,#+8192
   \   000000C8   0x4628             MOV      R0,R5
   \   000000CA   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   000000CE   0x.... 0x....      B.W      GPIO_WriteBit
     59          	else				FND_SET(P, 0);
   \                     ??SetDataFND_14: (+1)
   \   000000D2   0x2200             MOVS     R2,#+0
   \   000000D4   0xF44F 0x5100      MOV      R1,#+8192
   \   000000D8   0x4628             MOV      R0,R5
   \   000000DA   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   000000DE   0x.... 0x....      B.W      GPIO_WriteBit
     60          }
     61          

   \                                 In section .text, align 4, keep-with-next
     62          void SetFnd(INT8U cs)
     63          {
   \                     SetFnd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     64          	INT8U flag=0;
   \   00000002   0x2100             MOVS     R1,#+0
     65          
     66          	if(FND_DispCnt < 100)			// DispCnt = Twinkling period
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable8_1
   \   00000008   0x8922             LDRH     R2,[R4, #+8]
   \   0000000A   0x2A64             CMP      R2,#+100
   \   0000000C   0xDA03             BGE.N    ??SetFnd_1
     67          		flag = keyflag.twinkflag;
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   00000012   0x79C9             LDRB     R1,[R1, #+7]
   \   00000014   0xE003             B.N      ??SetFnd_2
     68          	else if(FND_DispCnt < 200)
   \                     ??SetFnd_1: (+1)
   \   00000016   0x2AC8             CMP      R2,#+200
   \   00000018   0xDB01             BLT.N    ??SetFnd_2
     69          		flag = 0;
     70          	else FND_DispCnt = 0;
   \   0000001A   0x460A             MOV      R2,R1
   \   0000001C   0x8122             STRH     R2,[R4, #+8]
     71            
     72          	switch(cs)
   \                     ??SetFnd_2: (+1)
   \   0000001E   0x2804             CMP      R0,#+4
   \   00000020   0xF200 0x80DE      BHI.W    ??SetFnd_3
   \   00000024   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??SetFnd_0:
   \   00000028   0x03 0x29          DC8      0x3,0x29,0x4F,0x74
   \              0x4F 0x74    
   \   0000002C   0x99 0x00          DC8      0x99,0x0
     73          	{
     74          	case 0:
     75              if(flag != 5) {
   \                     ??SetFnd_4: (+1)
   \   0000002E   0x2905             CMP      R1,#+5
   \   00000030   0xF000 0x80B8      BEQ.W    ??SetFnd_5
     76                SetDataFND( FND_DATA[0]  );
   \   00000034   0x7820             LDRB     R0,[R4, #+0]
   \   00000036   0x.... 0x....      BL       SetDataFND
     77                FND_CS(1, 1);
   \   0000003A   0x.... 0x....      LDR.W    R5,??DataTable8_3  ;; 0x40020c00
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0xF44F 0x5100      MOV      R1,#+8192
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0x.... 0x....      BL       GPIO_WriteBit
     78                FND_CS(2, 0);
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x2108             MOVS     R1,#+8
   \   0000004E   0x4628             MOV      R0,R5
   \   00000050   0x.... 0x....      BL       GPIO_WriteBit
     79                FND_CS(3, 0);
   \   00000054   0x2200             MOVS     R2,#+0
   \   00000056   0xF44F 0x7180      MOV      R1,#+256
   \   0000005A   0x4628             MOV      R0,R5
   \   0000005C   0x.... 0x....      BL       GPIO_WriteBit
     80                FND_CS(4, 0);
   \   00000060   0x2200             MOVS     R2,#+0
   \   00000062   0xF44F 0x7100      MOV      R1,#+512
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0x.... 0x....      BL       GPIO_WriteBit
     81                FND_CS(5, 0);
   \   0000006C   0x2200             MOVS     R2,#+0
   \   0000006E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000072   0x4628             MOV      R0,R5
   \   00000074   0x.... 0x....      BL       GPIO_WriteBit
   \   00000078   0xE0B2             B.N      ??SetFnd_3
     82              }
     83              else{
     84                FND_CS(1, 0);
     85                FND_CS(2, 0);
     86                FND_CS(3, 0);
     87                FND_CS(4, 0);
     88                FND_CS(5, 0);
     89              }
     90          		break;
     91          	case 1:
     92              if(flag != 4) {
   \                     ??SetFnd_6: (+1)
   \   0000007A   0x2904             CMP      R1,#+4
   \   0000007C   0xF000 0x8092      BEQ.W    ??SetFnd_5
     93                SetDataFND( FND_DATA[1]  );
   \   00000080   0x7860             LDRB     R0,[R4, #+1]
   \   00000082   0x.... 0x....      BL       SetDataFND
     94                FND_CS(1, 0);
   \   00000086   0x.... 0x....      LDR.W    R5,??DataTable8_3  ;; 0x40020c00
   \   0000008A   0x2200             MOVS     R2,#+0
   \   0000008C   0xF44F 0x5100      MOV      R1,#+8192
   \   00000090   0x4628             MOV      R0,R5
   \   00000092   0x.... 0x....      BL       GPIO_WriteBit
     95                FND_CS(2, 1);
   \   00000096   0x2201             MOVS     R2,#+1
   \   00000098   0x2108             MOVS     R1,#+8
   \   0000009A   0x4628             MOV      R0,R5
   \   0000009C   0x.... 0x....      BL       GPIO_WriteBit
     96                FND_CS(3, 0);
   \   000000A0   0x2200             MOVS     R2,#+0
   \   000000A2   0xF44F 0x7180      MOV      R1,#+256
   \   000000A6   0x4628             MOV      R0,R5
   \   000000A8   0x.... 0x....      BL       GPIO_WriteBit
     97                FND_CS(4, 0);
   \   000000AC   0x2200             MOVS     R2,#+0
   \   000000AE   0xF44F 0x7100      MOV      R1,#+512
   \   000000B2   0x4628             MOV      R0,R5
   \   000000B4   0x.... 0x....      BL       GPIO_WriteBit
     98                FND_CS(5, 0);
   \   000000B8   0x2200             MOVS     R2,#+0
   \   000000BA   0xF44F 0x6180      MOV      R1,#+1024
   \   000000BE   0x4628             MOV      R0,R5
   \   000000C0   0x.... 0x....      BL       GPIO_WriteBit
   \   000000C4   0xE08C             B.N      ??SetFnd_3
     99              }
    100              else{
    101                FND_CS(1, 0);
    102                FND_CS(2, 0);
    103                FND_CS(3, 0);
    104                FND_CS(4, 0);
    105                FND_CS(5, 0);
    106              }
    107          		break;
    108          	case 2:
    109              if(flag != 3) {
   \                     ??SetFnd_7: (+1)
   \   000000C6   0x2903             CMP      R1,#+3
   \   000000C8   0xD06C             BEQ.N    ??SetFnd_5
    110                SetDataFND( FND_DATA[2] );
   \   000000CA   0x78A0             LDRB     R0,[R4, #+2]
   \   000000CC   0x.... 0x....      BL       SetDataFND
    111                FND_CS(1, 0);
   \   000000D0   0x.... 0x....      LDR.W    R5,??DataTable8_3  ;; 0x40020c00
   \   000000D4   0x2200             MOVS     R2,#+0
   \   000000D6   0xF44F 0x5100      MOV      R1,#+8192
   \   000000DA   0x4628             MOV      R0,R5
   \   000000DC   0x.... 0x....      BL       GPIO_WriteBit
    112                FND_CS(2, 0);
   \   000000E0   0x2200             MOVS     R2,#+0
   \   000000E2   0x2108             MOVS     R1,#+8
   \   000000E4   0x4628             MOV      R0,R5
   \   000000E6   0x.... 0x....      BL       GPIO_WriteBit
    113                FND_CS(3, 1);
   \   000000EA   0x2201             MOVS     R2,#+1
   \   000000EC   0xF44F 0x7180      MOV      R1,#+256
   \   000000F0   0x4628             MOV      R0,R5
   \   000000F2   0x.... 0x....      BL       GPIO_WriteBit
    114                FND_CS(4, 0);
   \   000000F6   0x2200             MOVS     R2,#+0
   \   000000F8   0xF44F 0x7100      MOV      R1,#+512
   \   000000FC   0x4628             MOV      R0,R5
   \   000000FE   0x.... 0x....      BL       GPIO_WriteBit
    115                FND_CS(5, 0);
   \   00000102   0x2200             MOVS     R2,#+0
   \   00000104   0xF44F 0x6180      MOV      R1,#+1024
   \   00000108   0x4628             MOV      R0,R5
   \   0000010A   0x.... 0x....      BL       GPIO_WriteBit
   \   0000010E   0xE067             B.N      ??SetFnd_3
    116              }
    117              else{
    118                FND_CS(1, 0);
    119                FND_CS(2, 0);
    120                FND_CS(3, 0);
    121                FND_CS(4, 0);
    122                FND_CS(5, 0);
    123              }
    124          		break;
    125          	case 3:
    126              if(flag != 2) {
   \                     ??SetFnd_8: (+1)
   \   00000110   0x2902             CMP      R1,#+2
   \   00000112   0xD047             BEQ.N    ??SetFnd_5
    127                SetDataFND( FND_DATA[3] );
   \   00000114   0x78E0             LDRB     R0,[R4, #+3]
   \   00000116   0x.... 0x....      BL       SetDataFND
    128                FND_CS(1, 0);
   \   0000011A   0x.... 0x....      LDR.W    R5,??DataTable8_3  ;; 0x40020c00
   \   0000011E   0x2200             MOVS     R2,#+0
   \   00000120   0xF44F 0x5100      MOV      R1,#+8192
   \   00000124   0x4628             MOV      R0,R5
   \   00000126   0x.... 0x....      BL       GPIO_WriteBit
    129                FND_CS(2, 0);
   \   0000012A   0x2200             MOVS     R2,#+0
   \   0000012C   0x2108             MOVS     R1,#+8
   \   0000012E   0x4628             MOV      R0,R5
   \   00000130   0x.... 0x....      BL       GPIO_WriteBit
    130                FND_CS(3, 0);
   \   00000134   0x2200             MOVS     R2,#+0
   \   00000136   0xF44F 0x7180      MOV      R1,#+256
   \   0000013A   0x4628             MOV      R0,R5
   \   0000013C   0x.... 0x....      BL       GPIO_WriteBit
    131                FND_CS(4, 1);
   \   00000140   0x2201             MOVS     R2,#+1
   \   00000142   0xF44F 0x7100      MOV      R1,#+512
   \   00000146   0x4628             MOV      R0,R5
   \   00000148   0x.... 0x....      BL       GPIO_WriteBit
    132                FND_CS(5, 0);
   \   0000014C   0x2200             MOVS     R2,#+0
   \   0000014E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000152   0x4628             MOV      R0,R5
   \   00000154   0x.... 0x....      BL       GPIO_WriteBit
   \   00000158   0xE042             B.N      ??SetFnd_3
    133              }
    134              else{
    135                FND_CS(1, 0);
    136                FND_CS(2, 0);
    137                FND_CS(3, 0);
    138                FND_CS(4, 0);
    139                FND_CS(5, 0);
    140              }
    141          		break;
    142          	case 4:
    143              if(flag != 1) {
   \                     ??SetFnd_9: (+1)
   \   0000015A   0x2901             CMP      R1,#+1
   \   0000015C   0xD022             BEQ.N    ??SetFnd_5
    144                SetDataFND( FND_DATA[4]  );
   \   0000015E   0x7920             LDRB     R0,[R4, #+4]
   \   00000160   0x.... 0x....      BL       SetDataFND
    145                FND_CS(1, 0);
   \   00000164   0x.... 0x....      LDR.W    R5,??DataTable8_3  ;; 0x40020c00
   \   00000168   0x2200             MOVS     R2,#+0
   \   0000016A   0xF44F 0x5100      MOV      R1,#+8192
   \   0000016E   0x4628             MOV      R0,R5
   \   00000170   0x.... 0x....      BL       GPIO_WriteBit
    146                FND_CS(2, 0);
   \   00000174   0x2200             MOVS     R2,#+0
   \   00000176   0x2108             MOVS     R1,#+8
   \   00000178   0x4628             MOV      R0,R5
   \   0000017A   0x.... 0x....      BL       GPIO_WriteBit
    147                FND_CS(3, 0);
   \   0000017E   0x2200             MOVS     R2,#+0
   \   00000180   0xF44F 0x7180      MOV      R1,#+256
   \   00000184   0x4628             MOV      R0,R5
   \   00000186   0x.... 0x....      BL       GPIO_WriteBit
    148                FND_CS(4, 0);
   \   0000018A   0x2200             MOVS     R2,#+0
   \   0000018C   0xF44F 0x7100      MOV      R1,#+512
   \   00000190   0x4628             MOV      R0,R5
   \   00000192   0x.... 0x....      BL       GPIO_WriteBit
    149                FND_CS(5, 1);
   \   00000196   0x2201             MOVS     R2,#+1
   \   00000198   0xF44F 0x6180      MOV      R1,#+1024
   \   0000019C   0x4628             MOV      R0,R5
   \   0000019E   0x.... 0x....      BL       GPIO_WriteBit
   \   000001A2   0xE01D             B.N      ??SetFnd_3
    150              }
    151              else{
    152                FND_CS(1, 0);
   \                     ??SetFnd_5: (+1)
   \   000001A4   0x....             LDR.N    R5,??DataTable8_3  ;; 0x40020c00
   \   000001A6   0x2200             MOVS     R2,#+0
   \   000001A8   0xF44F 0x5100      MOV      R1,#+8192
   \   000001AC   0x4628             MOV      R0,R5
   \   000001AE   0x.... 0x....      BL       GPIO_WriteBit
    153                FND_CS(2, 0);
   \   000001B2   0x2200             MOVS     R2,#+0
   \   000001B4   0x2108             MOVS     R1,#+8
   \   000001B6   0x4628             MOV      R0,R5
   \   000001B8   0x.... 0x....      BL       GPIO_WriteBit
    154                FND_CS(3, 0);
   \   000001BC   0x2200             MOVS     R2,#+0
   \   000001BE   0xF44F 0x7180      MOV      R1,#+256
   \   000001C2   0x4628             MOV      R0,R5
   \   000001C4   0x.... 0x....      BL       GPIO_WriteBit
    155                FND_CS(4, 0);
   \   000001C8   0x2200             MOVS     R2,#+0
   \   000001CA   0xF44F 0x7100      MOV      R1,#+512
   \   000001CE   0x4628             MOV      R0,R5
   \   000001D0   0x.... 0x....      BL       GPIO_WriteBit
    156                FND_CS(5, 0);
   \   000001D4   0x2200             MOVS     R2,#+0
   \   000001D6   0xF44F 0x6180      MOV      R1,#+1024
   \   000001DA   0x4628             MOV      R0,R5
   \   000001DC   0x.... 0x....      BL       GPIO_WriteBit
    157              }
    158          		break;
    159          	default:
    160          		break;
    161          	}
    162            FND_DispCnt++;
   \                     ??SetFnd_3: (+1)
   \   000001E0   0x8920             LDRH     R0,[R4, #+8]
   \   000001E2   0x1C40             ADDS     R0,R0,#+1
   \   000001E4   0x8120             STRH     R0,[R4, #+8]
    163          }
   \   000001E6   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    164          /*
    165          *********************************************************************************************************
    166          *                                            fnd_callback_fun()
    167          *
    168          * Description : GPIO Set FND Control.
    169          *
    170          * Argument(s) : none.
    171          *
    172          * Return(s)   : none.
    173          *
    174          * Caller(s)   : Timer Callback function ....Main.c().
    175          *
    176          * Note(s)     : none.
    177          *********************************************************************************************************
    178          */

   \                                 In section .text, align 2, keep-with-next
    179          void fnd_callback_fun(void)
    180          {
   \                     fnd_callback_fun: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    181          	static INT8U nCount=0;
    182          
    183          	SetFnd(nCount++);
   \   00000002   0x....             LDR.N    R4,??DataTable8_4
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x1C41             ADDS     R1,R0,#+1
   \   00000008   0x7021             STRB     R1,[R4, #+0]
   \   0000000A   0x.... 0x....      BL       SetFnd
    184          
    185          	if(nCount >= 5) nCount = 0;
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2805             CMP      R0,#+5
   \   00000012   0xDB01             BLT.N    ??fnd_callback_fun_0
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x7020             STRB     R0,[R4, #+0]
    186          }
   \                     ??fnd_callback_fun_0: (+1)
   \   00000018   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 1
   \                     `fnd_callback_fun::nCount`:
   \   00000000                      DS8 1
    187          
    188          
    189          #define LED_NO	0		// led normal status
    190          #define LED_TE	1		// led temperature status
    191          #define LED_SD	2		// led sd card status
    192          #define LED_PH	3		// led press high alarm
    193          #define LED_PL	4		// led press low alarm
    194          
    195          
    196          /*
    197          *********************************************************************************************************
    198          *                                            led_set_fun()
    199          *
    200          * Description : GPIO Set LED Control.
    201          *
    202          * Argument(s) : none.
    203          *
    204          * Return(s)   : none.
    205          *
    206          * Caller(s)   : none.
    207          *
    208          * Note(s)     : none.
    209          *********************************************************************************************************
    210          */

   \                                 In section .text, align 4, keep-with-next
    211          void led_set_fun(INT8U number, INT8U onoff)
    212          {
    213          	switch(number)
   \                     led_set_fun: (+1)
   \   00000000   0x2804             CMP      R0,#+4
   \   00000002   0xD845             BHI.N    ??led_set_fun_1
   \   00000004   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??led_set_fun_0:
   \   00000008   0x03 0x10          DC8      0x3,0x10,0x1D,0x2A
   \              0x1D 0x2A    
   \   0000000C   0x37 0x00          DC8      0x37,0x0
    214          	{
    215          	case LED_NO:
    216          		if(onoff)	LED_SET(NO, 0);
   \                     ??led_set_fun_2: (+1)
   \   0000000E   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40021000
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD004             BEQ.N    ??led_set_fun_3
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0xF44F 0x5180      MOV      R1,#+4096
   \   0000001A   0x.... 0x....      B.W      GPIO_WriteBit
    217          		else		LED_SET(NO, 1);
   \                     ??led_set_fun_3: (+1)
   \   0000001E   0x2201             MOVS     R2,#+1
   \   00000020   0xF44F 0x5180      MOV      R1,#+4096
   \   00000024   0x.... 0x....      B.W      GPIO_WriteBit
    218          		break;
    219          	case LED_TE:
    220          		if(onoff)	LED_SET(TE, 0);
   \                     ??led_set_fun_4: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40021000
   \   0000002A   0x2900             CMP      R1,#+0
   \   0000002C   0xD004             BEQ.N    ??led_set_fun_5
   \   0000002E   0x2200             MOVS     R2,#+0
   \   00000030   0xF44F 0x5100      MOV      R1,#+8192
   \   00000034   0x.... 0x....      B.W      GPIO_WriteBit
    221          		else		LED_SET(TE, 1);
   \                     ??led_set_fun_5: (+1)
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0xF44F 0x5100      MOV      R1,#+8192
   \   0000003E   0x.... 0x....      B.W      GPIO_WriteBit
    222          		break;
    223          	case LED_SD:
    224          		if(onoff)	LED_SET(SD, 0);
   \                     ??led_set_fun_6: (+1)
   \   00000042   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40021000
   \   00000044   0x2900             CMP      R1,#+0
   \   00000046   0xD004             BEQ.N    ??led_set_fun_7
   \   00000048   0x2200             MOVS     R2,#+0
   \   0000004A   0xF44F 0x6100      MOV      R1,#+2048
   \   0000004E   0x.... 0x....      B.W      GPIO_WriteBit
    225          		else		LED_SET(SD, 1);
   \                     ??led_set_fun_7: (+1)
   \   00000052   0x2201             MOVS     R2,#+1
   \   00000054   0xF44F 0x6100      MOV      R1,#+2048
   \   00000058   0x.... 0x....      B.W      GPIO_WriteBit
    226          		break;
    227          	case LED_PH:
    228          		if(onoff)	LED_SET(PH, 0);
   \                     ??led_set_fun_8: (+1)
   \   0000005C   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40021000
   \   0000005E   0x2900             CMP      R1,#+0
   \   00000060   0xD004             BEQ.N    ??led_set_fun_9
   \   00000062   0x2200             MOVS     R2,#+0
   \   00000064   0xF44F 0x4100      MOV      R1,#+32768
   \   00000068   0x.... 0x....      B.W      GPIO_WriteBit
    229          		else		LED_SET(PH, 1);
   \                     ??led_set_fun_9: (+1)
   \   0000006C   0x2201             MOVS     R2,#+1
   \   0000006E   0xF44F 0x4100      MOV      R1,#+32768
   \   00000072   0x.... 0x....      B.W      GPIO_WriteBit
    230          		break;
    231          	case LED_PL:
    232          		if(onoff)	LED_SET(PL, 0);
   \                     ??led_set_fun_10: (+1)
   \   00000076   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40021000
   \   00000078   0x2900             CMP      R1,#+0
   \   0000007A   0xD004             BEQ.N    ??led_set_fun_11
   \   0000007C   0x2200             MOVS     R2,#+0
   \   0000007E   0xF44F 0x4180      MOV      R1,#+16384
   \   00000082   0x.... 0x....      B.W      GPIO_WriteBit
    233          		else		LED_SET(PL, 1);
   \                     ??led_set_fun_11: (+1)
   \   00000086   0x2201             MOVS     R2,#+1
   \   00000088   0xF44F 0x4180      MOV      R1,#+16384
   \   0000008C   0x.... 0x....      B.W      GPIO_WriteBit
    234          		break;
    235          	default:
    236          		break;
    237          	}
    238          }
   \                     ??led_set_fun_1: (+1)
   \   00000090   0x4770             BX       LR               ;; return
    239          
    240          /*
    241          *********************************************************************************************************
    242          *                                            FirstLedFndCheck()
    243          *
    244          * Description : FND & LED IO Test
    245          *
    246          * Argument(s) : none.
    247          *
    248          * Return(s)   : none.
    249          *
    250          * Caller(s)   : none
    251          *
    252          * Note(s)     : none.
    253          *********************************************************************************************************
    254          */

   \                                 In section .text, align 4, keep-with-next
    255          INT8U InitFirstLedFndCheck(void)
    256          {
   \                     InitFirstLedFndCheck: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    257          	static INT8U nStatus = 1;
    258          	switch(nStatus)
   \   00000002   0x....             LDR.N    R4,??DataTable8_6
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x1E40             SUBS     R0,R0,#+1
   \   00000008   0x280E             CMP      R0,#+14
   \   0000000A   0xF200 0x80EE      BHI.W    ??InitFirstLedFndCheck_1
   \   0000000E   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??InitFirstLedFndCheck_0:
   \   00000012   0x08 0x2E          DC8      0x8,0x2E,0x36,0x3E
   \              0x36 0x3E    
   \   00000016   0x46 0x4E          DC8      0x46,0x4E,0x56,0x5E
   \              0x56 0x5E    
   \   0000001A   0x67 0xB2          DC8      0x67,0xB2,0xB9,0xC0
   \              0xB9 0xC0    
   \   0000001E   0xC7 0xCE          DC8      0xC7,0xCE,0xD5,0x0
   \              0xD5 0x00    
    259          	{
    260          	case 1:
    261          		FND_SET(A, 1), FND_CS(1, 1), FND_CS(2, 1), FND_CS(3, 1), FND_CS(4, 1), FND_CS(5, 1);
   \                     ??InitFirstLedFndCheck_2: (+1)
   \   00000022   0x2201             MOVS     R2,#+1
   \   00000024   0x2102             MOVS     R1,#+2
   \   00000026   0x....             LDR.N    R0,??DataTable8  ;; 0x40020800
   \   00000028   0x.... 0x....      BL       GPIO_WriteBit
   \   0000002C   0x....             LDR.N    R5,??DataTable8_3  ;; 0x40020c00
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0xF44F 0x5100      MOV      R1,#+8192
   \   00000034   0x4628             MOV      R0,R5
   \   00000036   0x.... 0x....      BL       GPIO_WriteBit
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0x2108             MOVS     R1,#+8
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       GPIO_WriteBit
   \   00000044   0x2201             MOVS     R2,#+1
   \   00000046   0xF44F 0x7180      MOV      R1,#+256
   \   0000004A   0x4628             MOV      R0,R5
   \   0000004C   0x.... 0x....      BL       GPIO_WriteBit
   \   00000050   0x2201             MOVS     R2,#+1
   \   00000052   0xF44F 0x7100      MOV      R1,#+512
   \   00000056   0x4628             MOV      R0,R5
   \   00000058   0x.... 0x....      BL       GPIO_WriteBit
   \   0000005C   0x2201             MOVS     R2,#+1
   \   0000005E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000062   0x4628             MOV      R0,R5
   \   00000064   0x.... 0x....      BL       GPIO_WriteBit
    262          		nStatus = 2;
   \   00000068   0x2002             MOVS     R0,#+2
   \   0000006A   0x7020             STRB     R0,[R4, #+0]
    263          		break;
   \   0000006C   0xE0BF             B.N      ??InitFirstLedFndCheck_3
    264          	case 2:
    265          		FND_SET(B, 1);
   \                     ??InitFirstLedFndCheck_4: (+1)
   \   0000006E   0x2201             MOVS     R2,#+1
   \   00000070   0x2104             MOVS     R1,#+4
   \   00000072   0x....             LDR.N    R0,??DataTable8  ;; 0x40020800
   \   00000074   0x.... 0x....      BL       GPIO_WriteBit
    266          		nStatus = 3;
   \   00000078   0x2003             MOVS     R0,#+3
   \   0000007A   0x7020             STRB     R0,[R4, #+0]
    267          		break;
   \   0000007C   0xE0B7             B.N      ??InitFirstLedFndCheck_3
    268          	case 3:
    269          		FND_SET(C, 1);
   \                     ??InitFirstLedFndCheck_5: (+1)
   \   0000007E   0x2201             MOVS     R2,#+1
   \   00000080   0x2108             MOVS     R1,#+8
   \   00000082   0x....             LDR.N    R0,??DataTable8  ;; 0x40020800
   \   00000084   0x.... 0x....      BL       GPIO_WriteBit
    270          		nStatus = 4;
   \   00000088   0x2004             MOVS     R0,#+4
   \   0000008A   0x7020             STRB     R0,[R4, #+0]
    271          		break;
   \   0000008C   0xE0AF             B.N      ??InitFirstLedFndCheck_3
    272          	case 4:
    273          		FND_SET(D, 1);
   \                     ??InitFirstLedFndCheck_6: (+1)
   \   0000008E   0x2201             MOVS     R2,#+1
   \   00000090   0x2110             MOVS     R1,#+16
   \   00000092   0x....             LDR.N    R0,??DataTable8  ;; 0x40020800
   \   00000094   0x.... 0x....      BL       GPIO_WriteBit
    274          		nStatus = 5;
   \   00000098   0x2005             MOVS     R0,#+5
   \   0000009A   0x7020             STRB     R0,[R4, #+0]
    275          		break;
   \   0000009C   0xE0A7             B.N      ??InitFirstLedFndCheck_3
    276          	case 5:
    277          		FND_SET(E, 1);
   \                     ??InitFirstLedFndCheck_7: (+1)
   \   0000009E   0x2201             MOVS     R2,#+1
   \   000000A0   0x2120             MOVS     R1,#+32
   \   000000A2   0x....             LDR.N    R0,??DataTable8  ;; 0x40020800
   \   000000A4   0x.... 0x....      BL       GPIO_WriteBit
    278          		nStatus = 6;
   \   000000A8   0x2006             MOVS     R0,#+6
   \   000000AA   0x7020             STRB     R0,[R4, #+0]
    279          		break;
   \   000000AC   0xE09F             B.N      ??InitFirstLedFndCheck_3
    280          	case 6:
    281          		FND_SET(F, 1);
   \                     ??InitFirstLedFndCheck_8: (+1)
   \   000000AE   0x2201             MOVS     R2,#+1
   \   000000B0   0x2140             MOVS     R1,#+64
   \   000000B2   0x....             LDR.N    R0,??DataTable8  ;; 0x40020800
   \   000000B4   0x.... 0x....      BL       GPIO_WriteBit
    282          		nStatus = 7;
   \   000000B8   0x2007             MOVS     R0,#+7
   \   000000BA   0x7020             STRB     R0,[R4, #+0]
    283          		break;
   \   000000BC   0xE097             B.N      ??InitFirstLedFndCheck_3
    284          	case 7:
    285          		FND_SET(G, 1);
   \                     ??InitFirstLedFndCheck_9: (+1)
   \   000000BE   0x2201             MOVS     R2,#+1
   \   000000C0   0x2180             MOVS     R1,#+128
   \   000000C2   0x....             LDR.N    R0,??DataTable8  ;; 0x40020800
   \   000000C4   0x.... 0x....      BL       GPIO_WriteBit
    286          		nStatus = 8;
   \   000000C8   0x2008             MOVS     R0,#+8
   \   000000CA   0x7020             STRB     R0,[R4, #+0]
    287          		break;
   \   000000CC   0xE08F             B.N      ??InitFirstLedFndCheck_3
    288          	case 8:
    289          		FND_SET(P, 1);
   \                     ??InitFirstLedFndCheck_10: (+1)
   \   000000CE   0x2201             MOVS     R2,#+1
   \   000000D0   0xF44F 0x5100      MOV      R1,#+8192
   \   000000D4   0x....             LDR.N    R0,??DataTable8  ;; 0x40020800
   \   000000D6   0x.... 0x....      BL       GPIO_WriteBit
    290          		nStatus = 9;
   \   000000DA   0x2009             MOVS     R0,#+9
   \   000000DC   0x7020             STRB     R0,[R4, #+0]
    291          		break;
   \   000000DE   0xE086             B.N      ??InitFirstLedFndCheck_3
    292          	case 9:
    293          		FND_SET(A, 0),FND_SET(B, 0),FND_SET(C, 0),FND_SET(D, 0),FND_SET(E, 0),FND_SET(F, 0),FND_SET(G, 0),FND_SET(P, 0);
   \                     ??InitFirstLedFndCheck_11: (+1)
   \   000000E0   0x....             LDR.N    R5,??DataTable8  ;; 0x40020800
   \   000000E2   0x2200             MOVS     R2,#+0
   \   000000E4   0x2102             MOVS     R1,#+2
   \   000000E6   0x4628             MOV      R0,R5
   \   000000E8   0x.... 0x....      BL       GPIO_WriteBit
   \   000000EC   0x2200             MOVS     R2,#+0
   \   000000EE   0x2104             MOVS     R1,#+4
   \   000000F0   0x4628             MOV      R0,R5
   \   000000F2   0x.... 0x....      BL       GPIO_WriteBit
   \   000000F6   0x2200             MOVS     R2,#+0
   \   000000F8   0x2108             MOVS     R1,#+8
   \   000000FA   0x4628             MOV      R0,R5
   \   000000FC   0x.... 0x....      BL       GPIO_WriteBit
   \   00000100   0x2200             MOVS     R2,#+0
   \   00000102   0x2110             MOVS     R1,#+16
   \   00000104   0x4628             MOV      R0,R5
   \   00000106   0x.... 0x....      BL       GPIO_WriteBit
   \   0000010A   0x2200             MOVS     R2,#+0
   \   0000010C   0x2120             MOVS     R1,#+32
   \   0000010E   0x4628             MOV      R0,R5
   \   00000110   0x.... 0x....      BL       GPIO_WriteBit
   \   00000114   0x2200             MOVS     R2,#+0
   \   00000116   0x2140             MOVS     R1,#+64
   \   00000118   0x4628             MOV      R0,R5
   \   0000011A   0x.... 0x....      BL       GPIO_WriteBit
   \   0000011E   0x2200             MOVS     R2,#+0
   \   00000120   0x2180             MOVS     R1,#+128
   \   00000122   0x4628             MOV      R0,R5
   \   00000124   0x.... 0x....      BL       GPIO_WriteBit
   \   00000128   0x2200             MOVS     R2,#+0
   \   0000012A   0xF44F 0x5100      MOV      R1,#+8192
   \   0000012E   0x4628             MOV      R0,R5
   \   00000130   0x.... 0x....      BL       GPIO_WriteBit
    294          		FND_CS(1, 0), FND_CS(2, 0), FND_CS(3, 0), FND_CS(4, 0), FND_CS(5, 0);
   \   00000134   0x....             LDR.N    R5,??DataTable8_3  ;; 0x40020c00
   \   00000136   0x2200             MOVS     R2,#+0
   \   00000138   0xF44F 0x5100      MOV      R1,#+8192
   \   0000013C   0x4628             MOV      R0,R5
   \   0000013E   0x.... 0x....      BL       GPIO_WriteBit
   \   00000142   0x2200             MOVS     R2,#+0
   \   00000144   0x2108             MOVS     R1,#+8
   \   00000146   0x4628             MOV      R0,R5
   \   00000148   0x.... 0x....      BL       GPIO_WriteBit
   \   0000014C   0x2200             MOVS     R2,#+0
   \   0000014E   0xF44F 0x7180      MOV      R1,#+256
   \   00000152   0x4628             MOV      R0,R5
   \   00000154   0x.... 0x....      BL       GPIO_WriteBit
   \   00000158   0x2200             MOVS     R2,#+0
   \   0000015A   0xF44F 0x7100      MOV      R1,#+512
   \   0000015E   0x4628             MOV      R0,R5
   \   00000160   0x.... 0x....      BL       GPIO_WriteBit
   \   00000164   0x2200             MOVS     R2,#+0
   \   00000166   0xF44F 0x6180      MOV      R1,#+1024
   \   0000016A   0x4628             MOV      R0,R5
   \   0000016C   0x.... 0x....      BL       GPIO_WriteBit
    295          		nStatus = 10;
   \   00000170   0x200A             MOVS     R0,#+10
   \   00000172   0x7020             STRB     R0,[R4, #+0]
    296          		break;
   \   00000174   0xE03B             B.N      ??InitFirstLedFndCheck_3
    297          	case 10:
    298          		led_set_fun(0,ON);
   \                     ??InitFirstLedFndCheck_12: (+1)
   \   00000176   0x2101             MOVS     R1,#+1
   \   00000178   0x2000             MOVS     R0,#+0
   \   0000017A   0x.... 0x....      BL       led_set_fun
    299          		nStatus = 11;
   \   0000017E   0x200B             MOVS     R0,#+11
   \   00000180   0x7020             STRB     R0,[R4, #+0]
    300          		break;
   \   00000182   0xE034             B.N      ??InitFirstLedFndCheck_3
    301          	case 11:
    302          		led_set_fun(1,ON);
   \                     ??InitFirstLedFndCheck_13: (+1)
   \   00000184   0x2101             MOVS     R1,#+1
   \   00000186   0x4608             MOV      R0,R1
   \   00000188   0x.... 0x....      BL       led_set_fun
    303          		nStatus = 12;
   \   0000018C   0x200C             MOVS     R0,#+12
   \   0000018E   0x7020             STRB     R0,[R4, #+0]
    304          		break;
   \   00000190   0xE02D             B.N      ??InitFirstLedFndCheck_3
    305          	case 12:
    306          		led_set_fun(2,ON);
   \                     ??InitFirstLedFndCheck_14: (+1)
   \   00000192   0x2101             MOVS     R1,#+1
   \   00000194   0x2002             MOVS     R0,#+2
   \   00000196   0x.... 0x....      BL       led_set_fun
    307          		nStatus = 13;
   \   0000019A   0x200D             MOVS     R0,#+13
   \   0000019C   0x7020             STRB     R0,[R4, #+0]
    308          		break;
   \   0000019E   0xE026             B.N      ??InitFirstLedFndCheck_3
    309          	case 13:
    310          		led_set_fun(3,ON);
   \                     ??InitFirstLedFndCheck_15: (+1)
   \   000001A0   0x2101             MOVS     R1,#+1
   \   000001A2   0x2003             MOVS     R0,#+3
   \   000001A4   0x.... 0x....      BL       led_set_fun
    311          		nStatus = 14;
   \   000001A8   0x200E             MOVS     R0,#+14
   \   000001AA   0x7020             STRB     R0,[R4, #+0]
    312          		break;
   \   000001AC   0xE01F             B.N      ??InitFirstLedFndCheck_3
    313          	case 14:
    314          		led_set_fun(4,ON);
   \                     ??InitFirstLedFndCheck_16: (+1)
   \   000001AE   0x2101             MOVS     R1,#+1
   \   000001B0   0x2004             MOVS     R0,#+4
   \   000001B2   0x.... 0x....      BL       led_set_fun
    315          		nStatus = 15;
   \   000001B6   0x200F             MOVS     R0,#+15
   \   000001B8   0x7020             STRB     R0,[R4, #+0]
    316          		break;
   \   000001BA   0xE018             B.N      ??InitFirstLedFndCheck_3
    317          	case 15:
    318          		led_set_fun(0,OFF),led_set_fun(1,OFF),led_set_fun(2,OFF),led_set_fun(3,OFF),led_set_fun(4,OFF);
   \                     ??InitFirstLedFndCheck_17: (+1)
   \   000001BC   0x2100             MOVS     R1,#+0
   \   000001BE   0x4608             MOV      R0,R1
   \   000001C0   0x.... 0x....      BL       led_set_fun
   \   000001C4   0x2100             MOVS     R1,#+0
   \   000001C6   0x2001             MOVS     R0,#+1
   \   000001C8   0x.... 0x....      BL       led_set_fun
   \   000001CC   0x2100             MOVS     R1,#+0
   \   000001CE   0x2002             MOVS     R0,#+2
   \   000001D0   0x.... 0x....      BL       led_set_fun
   \   000001D4   0x2100             MOVS     R1,#+0
   \   000001D6   0x2003             MOVS     R0,#+3
   \   000001D8   0x.... 0x....      BL       led_set_fun
   \   000001DC   0x2100             MOVS     R1,#+0
   \   000001DE   0x2004             MOVS     R0,#+4
   \   000001E0   0x.... 0x....      BL       led_set_fun
    319          		nStatus = 0;
   \   000001E4   0x2000             MOVS     R0,#+0
   \   000001E6   0x7020             STRB     R0,[R4, #+0]
    320          		break;
   \   000001E8   0xE001             B.N      ??InitFirstLedFndCheck_3
    321          
    322          
    323          	default:
    324          		nStatus = 0;
   \                     ??InitFirstLedFndCheck_1: (+1)
   \   000001EA   0x2000             MOVS     R0,#+0
   \   000001EC   0x7020             STRB     R0,[R4, #+0]
    325          		break;
    326          	}
    327          	return nStatus;
   \                     ??InitFirstLedFndCheck_3: (+1)
   \   000001EE   0x7820             LDRB     R0,[R4, #+0]
   \   000001F0   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    328          }

   \                                 In section .data, align 1
   \                     `InitFirstLedFndCheck::nStatus`:
   \   00000000   0x01               DC8 1
    329          
    330          
    331          /*
    332          ********************************************************************************
    333          * Description : Buzzer Test
    334          * Arguments   : None
    335          * Return      : 
    336          * Note        : 
    337          ******************************************************************************** 
    338          */
    339          

   \                                 In section .text, align 2, keep-with-next
    340          INT16U dbg_buzzer_test(void)
    341          {
   \                     dbg_buzzer_test: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    342          
    343          	INT8U data;
    344          	if(CLI_GetArgCnt() < 1) return INV_PRM;
   \   00000002   0x.... 0x....      BL       CLI_GetArgCnt
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??dbg_buzzer_test_0
   \   0000000A   0x20CA             MOVS     R0,#+202
   \   0000000C   0xBD10             POP      {R4,PC}
    345          	
    346          	data = comparison_num((char *)P_ARG(1));
   \                     ??dbg_buzzer_test_0: (+1)
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       Argument
   \   00000014   0x.... 0x....      BL       comparison_num
   \   00000018   0x4604             MOV      R4,R0
   \   0000001A   0xB2E4             UXTB     R4,R4
    347          
    348          	IO_SET(BU, data);
   \   0000001C   0x4622             MOV      R2,R4
   \   0000001E   0x1E52             SUBS     R2,R2,#+1
   \   00000020   0x4192             SBCS     R2,R2,R2
   \   00000022   0x43D2             MVNS     R2,R2
   \   00000024   0x0FD2             LSRS     R2,R2,#+31
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x....             LDR.N    R0,??DataTable8_7  ;; 0x40020400
   \   0000002A   0x.... 0x....      BL       GPIO_WriteBit
    349          	printk("BUZZER Cotrol  = %d\n",data);
   \   0000002E   0x4621             MOV      R1,R4
   \   00000030   0x.... 0x....      ADR.W    R0,?_0
   \   00000034   0x.... 0x....      BL       printk
    350          
    351          	return NO_DISPLAY;
   \   00000038   0x20C9             MOVS     R0,#+201
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    352          }
    353          

   \                                 In section .text, align 2, keep-with-next
    354          INT16U dbg_doc_test(void)
    355          {
   \                     dbg_doc_test: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    356          
    357          	INT8U data;
    358          	if(CLI_GetArgCnt() < 1) return INV_PRM;
   \   00000002   0x.... 0x....      BL       CLI_GetArgCnt
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??dbg_doc_test_0
   \   0000000A   0x20CA             MOVS     R0,#+202
   \   0000000C   0xBD10             POP      {R4,PC}
    359          	
    360          	data = comparison_num((char *)P_ARG(1));
   \                     ??dbg_doc_test_0: (+1)
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       Argument
   \   00000014   0x.... 0x....      BL       comparison_num
   \   00000018   0x4604             MOV      R4,R0
   \   0000001A   0xB2E4             UXTB     R4,R4
    361          
    362          	IO_SET(DO, data);
   \   0000001C   0x4622             MOV      R2,R4
   \   0000001E   0x1E52             SUBS     R2,R2,#+1
   \   00000020   0x4192             SBCS     R2,R2,R2
   \   00000022   0x43D2             MVNS     R2,R2
   \   00000024   0x0FD2             LSRS     R2,R2,#+31
   \   00000026   0x2102             MOVS     R1,#+2
   \   00000028   0x....             LDR.N    R0,??DataTable8_7  ;; 0x40020400
   \   0000002A   0x.... 0x....      BL       GPIO_WriteBit
    363          	printk("DOC Cotrol  = %d\n",data);
   \   0000002E   0x4621             MOV      R1,R4
   \   00000030   0x.... 0x....      ADR.W    R0,?_1
   \   00000034   0x.... 0x....      BL       printk
    364          	return NO_DISPLAY;
   \   00000038   0x20C9             MOVS     R0,#+201
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    365          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     FND_DATA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     keyflag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     `fnd_callback_fun::nCount`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     `InitFirstLedFndCheck::nStatus`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x42 0x55          DC8 "BUZZER Cotrol  = %d\012"
   \              0x5A 0x5A    
   \              0x45 0x52    
   \              0x20 0x43    
   \              0x6F 0x74    
   \              0x72 0x6F    
   \              0x6C 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x44 0x4F          DC8 "DOC Cotrol  = %d\012"
   \              0x43 0x20    
   \              0x43 0x6F    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0
    366          
    367          
    368          /*
    369          ********************* (C) COPYRIGHT 2014 Loop ***************END OF FILE*****************************
    370          */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   InitFirstLedFndCheck
        16   -> GPIO_WriteBit
        16   -> led_set_fun
      16   SetDataFND
         0   -> GPIO_WriteBit
        16   -> GPIO_WriteBit
      16   SetFnd
        16   -> GPIO_WriteBit
        16   -> SetDataFND
       8   dbg_buzzer_test
         8   -> Argument
         8   -> CLI_GetArgCnt
         8   -> GPIO_WriteBit
         8   -> comparison_num
         8   -> printk
       8   dbg_doc_test
         8   -> Argument
         8   -> CLI_GetArgCnt
         8   -> GPIO_WriteBit
         8   -> comparison_num
         8   -> printk
       8   fnd_callback_fun
         8   -> SetFnd
       0   led_set_fun
         0   -> GPIO_WriteBit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
      24  ?_0
      20  ?_1
      10  FND_DATA
          FND_DispCnt
     498  InitFirstLedFndCheck
     226  SetDataFND
     488  SetFnd
      60  dbg_buzzer_test
      60  dbg_doc_test
      26  fnd_callback_fun
     146  led_set_fun
       1  nCount
       1  nStatus

 
    11 bytes in section .bss
     1 byte  in section .data
 1 580 bytes in section .text
 
 1 580 bytes of CODE memory
    12 bytes of DATA memory

Errors: none
Warnings: none
