###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       09/Jan/2023  17:31:19
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_syscfg.c
#    Command line =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_syscfg.c
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_USB_OTG_FS -lC
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List
#        --diag_suppress Pa050 -o
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\ -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\cpu\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Drv\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\fat\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\bsp\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Dev\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Core\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_OTG_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\portable\IAR\ARM_CM3\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\include\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\usbConf\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\drivers\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List\stm32f2xx_syscfg.lst
#    Object file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj\stm32f2xx_syscfg.o
#
###############################################################################

E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_syscfg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f2xx_syscfg.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    07-October-2011
      7            * @brief   This file provides firmware functions to manage the SYSCFG peripheral.
      8            *
      9            *  @verbatim
     10            *  
     11            *          ===================================================================
     12            *                                 How to use this driver
     13            *          ===================================================================
     14            *                  
     15            *          This driver provides functions for:
     16            *          
     17            *          1. Remapping the memory accessible in the code area using SYSCFG_MemoryRemapConfig()
     18            *              
     19            *          2. Manage the EXTI lines connection to the GPIOs using SYSCFG_EXTILineConfig()
     20            *            
     21            *          3. Select the ETHERNET media interface (RMII/RII) using SYSCFG_ETH_MediaInterfaceConfig()
     22            *
     23            *  @note  SYSCFG APB clock must be enabled to get write access to SYSCFG registers,
     24            *         using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     25            *                 
     26            *  @endverbatim
     27            *      
     28            ******************************************************************************
     29            * @attention
     30            *
     31            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     32            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     33            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     34            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     35            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     36            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     37            *
     38            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     39            ******************************************************************************
     40            */
     41          
     42          /* Includes ------------------------------------------------------------------*/
     43          #include "stm32f2xx_syscfg.h"
     44          #include "stm32f2xx_rcc.h"
     45          
     46          /** @addtogroup STM32F2xx_StdPeriph_Driver
     47            * @{
     48            */
     49          
     50          /** @defgroup SYSCFG 
     51            * @brief SYSCFG driver modules
     52            * @{
     53            */ 
     54          
     55          /* Private typedef -----------------------------------------------------------*/
     56          /* Private define ------------------------------------------------------------*/
     57          /* ------------ RCC registers bit address in the alias region ----------- */
     58          #define SYSCFG_OFFSET             (SYSCFG_BASE - PERIPH_BASE)
     59          /* ---  PMC Register ---*/ 
     60          /* Alias word address of MII_RMII_SEL bit */ 
     61          #define PMC_OFFSET                (SYSCFG_OFFSET + 0x04) 
     62          #define MII_RMII_SEL_BitNumber    ((uint8_t)0x17) 
     63          #define PMC_MII_RMII_SEL_BB       (PERIPH_BB_BASE + (PMC_OFFSET * 32) + (MII_RMII_SEL_BitNumber * 4)) 
     64          
     65          /* ---  CMPCR Register ---*/ 
     66          /* Alias word address of CMP_PD bit */ 
     67          #define CMPCR_OFFSET              (SYSCFG_OFFSET + 0x20) 
     68          #define CMP_PD_BitNumber          ((uint8_t)0x00) 
     69          #define CMPCR_CMP_PD_BB           (PERIPH_BB_BASE + (CMPCR_OFFSET * 32) + (CMP_PD_BitNumber * 4)) 
     70          
     71          /* Private macro -------------------------------------------------------------*/
     72          /* Private variables ---------------------------------------------------------*/
     73          /* Private function prototypes -----------------------------------------------*/
     74          /* Private functions ---------------------------------------------------------*/
     75          
     76          /** @defgroup SYSCFG_Private_Functions
     77            * @{
     78            */ 
     79          
     80          /**
     81            * @brief  Deinitializes the Alternate Functions (remap and EXTI configuration)
     82            *   registers to their default reset values.
     83            * @param  None
     84            * @retval None
     85            */

   \                                 In section .text, align 2, keep-with-next
     86          void SYSCFG_DeInit(void)
     87          {
   \                     SYSCFG_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     88             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF44F 0x4080      MOV      R0,#+16384
   \   00000008   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
     89             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xF44F 0x4080      MOV      R0,#+16384
   \   00000012   0xE8BD 0x4004      POP      {R2,LR}
   \   00000016   0x.... 0x....      B.W      RCC_APB2PeriphResetCmd
     90          }
     91          
     92          /**
     93            * @brief  Changes the mapping of the specified pin.
     94            * @param  SYSCFG_Memory: selects the memory remapping.
     95            *         This parameter can be one of the following values:
     96            *            @arg SYSCFG_MemoryRemap_Flash:       Main Flash memory mapped at 0x00000000  
     97            *            @arg SYSCFG_MemoryRemap_SystemFlash: System Flash memory mapped at 0x00000000
     98            *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000
     99            *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
    100            *  
    101            * @note   In remap mode, the FSMC addressing is fixed to the remap address area only
    102            *        (Bank1 NOR/PSRAM 1 and NOR/PSRAM 2) and FSMC control registers are not
    103            *         accessible. The FSMC remap function must be disabled to allows addressing
    104            *         other memory devices through the FSMC and/or to access FSMC control
    105            *         registers. 
    106            *        
    107            * @retval None
    108            */

   \                                 In section .text, align 2, keep-with-next
    109          void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
    110          {
    111            /* Check the parameters */
    112            assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));
    113          
    114            SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
   \                     SYSCFG_MemoryRemapConfig: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4  ;; 0x40013800
   \   00000002   0x6008             STR      R0,[R1, #+0]
    115          }
   \   00000004   0x4770             BX       LR               ;; return
    116          
    117          /**
    118            * @brief  Selects the GPIO pin used as EXTI Line.
    119            * @param  EXTI_PortSourceGPIOx : selects the GPIO port to be used as source for
    120            *          EXTI lines where x can be (A..I).
    121            * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
    122            *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
    123            *           for EXTI_PortSourceGPIOI x can be (0..11).
    124            * @retval None
    125            */

   \                                 In section .text, align 2, keep-with-next
    126          void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
    127          {
   \                     SYSCFG_EXTILineConfig: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    128            uint32_t tmp = 0x00;
    129          
    130            /* Check the parameters */
    131            assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
    132            assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
    133          
    134            tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
    135            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
   \   00000002   0x008A             LSLS     R2,R1,#+2
   \   00000004   0xF002 0x020C      AND      R2,R2,#0xC
   \   00000008   0xF06F 0x0303      MVN      R3,#+3
   \   0000000C   0x4019             ANDS     R1,R3,R1
   \   0000000E   0x....             LDR.N    R3,??DataTable4_1  ;; 0x40013808
   \   00000010   0x585C             LDR      R4,[R3, R1]
   \   00000012   0x250F             MOVS     R5,#+15
   \   00000014   0x4095             LSLS     R5,R5,R2
   \   00000016   0x43AC             BICS     R4,R4,R5
   \   00000018   0x505C             STR      R4,[R3, R1]
    136            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
   \   0000001A   0x585C             LDR      R4,[R3, R1]
   \   0000001C   0x4090             LSLS     R0,R0,R2
   \   0000001E   0x4320             ORRS     R0,R0,R4
   \   00000020   0x5058             STR      R0,[R3, R1]
    137          }
   \   00000022   0xBC30             POP      {R4,R5}
   \   00000024   0x4770             BX       LR               ;; return
    138          
    139          /**
    140            * @brief  Selects the ETHERNET media interface 
    141            * @param  SYSCFG_ETH_MediaInterface: specifies the Media Interface mode. 
    142            *          This parameter can be one of the following values: 
    143            *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
    144            *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
    145            * @retval None 
    146            */

   \                                 In section .text, align 2, keep-with-next
    147          void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
    148          { 
    149            assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
    150            /* Configure MII_RMII selection bit */ 
    151            *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
   \                     SYSCFG_ETH_MediaInterfaceConfig: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_2  ;; 0x422700dc
   \   00000002   0x6008             STR      R0,[R1, #+0]
    152          }
   \   00000004   0x4770             BX       LR               ;; return
    153          
    154          /**
    155            * @brief  Enables or disables the I/O Compensation Cell.
    156            * @note   The I/O compensation cell can be used only when the device supply
    157            *         voltage ranges from 2.4 to 3.6 V.  
    158            * @param  NewState: new state of the I/O Compensation Cell.
    159            *          This parameter can be one of the following values:
    160            *            @arg ENABLE: I/O compensation cell enabled  
    161            *            @arg DISABLE: I/O compensation cell power-down mode  
    162            * @retval None
    163            */

   \                                 In section .text, align 2, keep-with-next
    164          void SYSCFG_CompensationCellCmd(FunctionalState NewState)
    165          {
    166            /* Check the parameters */
    167            assert_param(IS_FUNCTIONAL_STATE(NewState));
    168          
    169            *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
   \                     SYSCFG_CompensationCellCmd: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_3  ;; 0x42270400
   \   00000002   0x6008             STR      R0,[R1, #+0]
    170          }
   \   00000004   0x4770             BX       LR               ;; return
    171          
    172          /**
    173            * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
    174            * @param  None
    175            * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
    176            */

   \                                 In section .text, align 2, keep-with-next
    177          FlagStatus SYSCFG_GetCompensationCellStatus(void)
    178          {
    179            FlagStatus bitstatus = RESET;
    180              
    181            if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
   \                     SYSCFG_GetCompensationCellStatus: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40013820
   \   00000002   0x6800             LDR      R0,[R0, #+0]
    182            {
    183              bitstatus = SET;
    184            }
    185            else
    186            {
    187              bitstatus = RESET;
   \   00000004   0x0A00             LSRS     R0,R0,#+8
   \   00000006   0xF000 0x0001      AND      R0,R0,#0x1
    188            }
    189            return bitstatus;
   \   0000000A   0x4770             BX       LR               ;; return
    190          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40013808         DC32     0x40013808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x422700DC         DC32     0x422700dc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x42270400         DC32     0x42270400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40013820         DC32     0x40013820
    191          
    192          /**
    193            * @}
    194            */
    195          
    196          /**
    197            * @}
    198            */
    199          
    200          /**
    201            * @}
    202            */
    203          
    204          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SYSCFG_CompensationCellCmd
       8   SYSCFG_DeInit
         0   -> RCC_APB2PeriphResetCmd
         8   -> RCC_APB2PeriphResetCmd
       0   SYSCFG_ETH_MediaInterfaceConfig
       8   SYSCFG_EXTILineConfig
       0   SYSCFG_GetCompensationCellStatus
       0   SYSCFG_MemoryRemapConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       6  SYSCFG_CompensationCellCmd
      26  SYSCFG_DeInit
       6  SYSCFG_ETH_MediaInterfaceConfig
      38  SYSCFG_EXTILineConfig
      12  SYSCFG_GetCompensationCellStatus
       6  SYSCFG_MemoryRemapConfig

 
 114 bytes in section .text
 
 114 bytes of CODE memory

Errors: none
Warnings: none
