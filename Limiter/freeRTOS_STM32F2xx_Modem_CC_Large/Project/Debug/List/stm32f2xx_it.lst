###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       18/Dec/2023  17:37:06
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\OsConfig\stm32f2xx_it.c
#    Command line =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\OsConfig\stm32f2xx_it.c
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_USB_OTG_FS -lC
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List
#        --diag_suppress Pa050 -o
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\ -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\cpu\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Drv\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\fat\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\bsp\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Dev\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Core\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_OTG_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\portable\IAR\ARM_CM3\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\include\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\usbConf\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\drivers\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List\stm32f2xx_it.lst
#    Object file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj\stm32f2xx_it.o
#
###############################################################################

E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\OsConfig\stm32f2xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f2xx_it.c 
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    07-October-2011
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm32f2xx_it.h"
     26          
     27          #include "includes.h"
     28          
     29          
     30          /* Scheduler includes */
     31          #include "FreeRTOS.h"
     32          #include "task.h"
     33          #include "queue.h"
     34          
     35          /* lwip includes */
     36          //#include "lwip/sys.h"
     37          
     38          /* Private typedef -----------------------------------------------------------*/
     39          /* Private define ------------------------------------------------------------*/
     40          /* Private macro -------------------------------------------------------------*/
     41          /* Private variables ---------------------------------------------------------*/
     42          extern xSemaphoreHandle s_xSemaphore;
     43          
     44          /* Private function prototypes -----------------------------------------------*/
     45          extern void xPortSysTickHandler(void); 
     46          /* Private functions ---------------------------------------------------------*/
     47          
     48          /******************************************************************************/
     49          /*            Cortex-M3 Processor Exceptions Handlers                         */
     50          /******************************************************************************/
     51          
     52          /**
     53            * @brief   This function handles NMI exception.
     54            * @param  None
     55            * @retval None
     56            */

   \                                 In section .text, align 2, keep-with-next
     57          void NMI_Handler(void)
     58          {
     59          	printd("..");
   \                     NMI_Handler: (+1)
   \   00000000   0x....             ADR.N    R0,??DataTable16  ;; 0x2E, 0x2E, 0x00, 0x00
   \   00000002   0x.... 0x....      B.W      printd
     60          }
     61          
     62          /**
     63            * @brief  This function handles Hard Fault exception.
     64            * @param  None
     65            * @retval None
     66            */

   \                                 In section .text, align 2, keep-with-next
     67          void HardFault_Handler(void)
     68          {
   \                     HardFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     69            /* Go to infinite loop when Hard Fault exception occurs */
     70            while (1)
     71            {
     72            	printd("h");
   \                     ??HardFault_Handler_0: (+1)
   \   00000002   0x....             ADR.N    R0,??DataTable16_1  ;; "h"
   \   00000004   0x.... 0x....      BL       printd
   \   00000008   0xE7FB             B.N      ??HardFault_Handler_0
     73            }
     74          }
     75          
     76          /**
     77            * @brief  This function handles Memory Manage exception.
     78            * @param  None
     79            * @retval None
     80            */

   \                                 In section .text, align 2, keep-with-next
     81          void MemManage_Handler(void)
     82          {
   \                     MemManage_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     83            /* Go to infinite loop when Memory Manage exception occurs */
     84            while (1)
     85            {
     86            	printd("m");
   \                     ??MemManage_Handler_0: (+1)
   \   00000002   0x....             ADR.N    R0,??DataTable16_2  ;; "m"
   \   00000004   0x.... 0x....      BL       printd
   \   00000008   0xE7FB             B.N      ??MemManage_Handler_0
     87            }
     88          }
     89          
     90          /**
     91            * @brief  This function handles Bus Fault exception.
     92            * @param  None
     93            * @retval None
     94            */

   \                                 In section .text, align 2, keep-with-next
     95          void BusFault_Handler(void)
     96          {
   \                     BusFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     97            /* Go to infinite loop when Bus Fault exception occurs */
     98            while (1)
     99            {
    100            	printd("b");
   \                     ??BusFault_Handler_0: (+1)
   \   00000002   0x....             ADR.N    R0,??DataTable16_3  ;; "b"
   \   00000004   0x.... 0x....      BL       printd
   \   00000008   0xE7FB             B.N      ??BusFault_Handler_0
    101            }
    102          }
    103          
    104          /**
    105            * @brief  This function handles Usage Fault exception.
    106            * @param  None
    107            * @retval None
    108            */

   \                                 In section .text, align 2, keep-with-next
    109          void UsageFault_Handler(void)
    110          {
   \                     UsageFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    111            /* Go to infinite loop when Usage Fault exception occurs */
    112            while (1)
    113            {
    114            	printd("u");
   \                     ??UsageFault_Handler_0: (+1)
   \   00000002   0x....             ADR.N    R0,??DataTable16_4  ;; "u"
   \   00000004   0x.... 0x....      BL       printd
   \   00000008   0xE7FB             B.N      ??UsageFault_Handler_0
    115            }
    116          }
    117          
    118          /**
    119            * @brief  This function handles SVCall exception.
    120            * @param  None
    121            * @retval None
    122            */

   \                                 In section .text, align 2, keep-with-next
    123          void SVC_Handler(void)
    124          {
    125          	printd("S");
   \                     SVC_Handler: (+1)
   \   00000000   0x....             ADR.N    R0,??DataTable16_5  ;; "S"
   \   00000002   0x.... 0x....      B.W      printd
    126          }
    127          
    128          /**
    129            * @brief  This function handles Debug Monitor exception.
    130            * @param  None
    131            * @retval None
    132            */

   \                                 In section .text, align 2, keep-with-next
    133          void DebugMon_Handler(void)
    134          {
    135          	printd("D");
   \                     DebugMon_Handler: (+1)
   \   00000000   0x....             ADR.N    R0,??DataTable16_6  ;; "D"
   \   00000002   0x.... 0x....      B.W      printd
    136          }
    137          
    138          /**
    139            * @brief  This function handles PendSVC exception.
    140            * @param  None
    141            * @retval None
    142            */

   \                                 In section .text, align 2, keep-with-next
    143          void PendSV_Handler(void)
    144          {
    145          	printd("P");
   \                     PendSV_Handler: (+1)
   \   00000000   0x....             ADR.N    R0,??DataTable16_7  ;; "P"
   \   00000002   0x.... 0x....      B.W      printd
    146          }
    147          
    148          /**
    149            * @brief  This function handles SysTick Handler.
    150            * @param  None
    151            * @retval None
    152            */

   \                                 In section .text, align 2, keep-with-next
    153          void SysTick_Handler(void)
    154          {
   \                     SysTick_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    155            xPortSysTickHandler(); 
   \   00000002   0x.... 0x....      BL       xPortSysTickHandler
    156            systick_uptime_millis++;  
   \   00000006   0x....             LDR.N    R0,??DataTable16_8
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x1C49             ADDS     R1,R1,#+1
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    157            _millisCounter++;
   \   0000000E   0x....             LDR.N    R0,??DataTable16_9
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0x6001             STR      R1,[R0, #+0]
    158          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    159          
    160          /**
    161            * @brief  This function handles External line 10 interrupt request.
    162            * @param  None
    163            * @retval None
    164            */
    165          
    166          /**
    167            * @brief  This function handles ethernet DMA interrupt request.
    168            * @param  None
    169            * @retval None
    170            */
    171          

   \                                 In section .text, align 2, keep-with-next
    172          void ETH_IRQHandler(void)
    173          {
    174          #if 0
    175            portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    176          
    177            /* Frame received */
    178            if ( ETH_GetDMAFlagStatus(ETH_DMA_FLAG_R) == SET) 
    179            {
    180              /* Give the semaphore to wakeup LwIP task */
    181              xSemaphoreGiveFromISR( s_xSemaphore, &xHigherPriorityTaskWoken );   
    182            }
    183          	
    184            /* Clear the interrupt flags. */
    185            /* Clear the Eth DMA Rx IT pending bits */
    186            ETH_DMAClearITPendingBit(ETH_DMA_IT_R);
    187            ETH_DMAClearITPendingBit(ETH_DMA_IT_NIS);
    188          	
    189            /* Switch tasks if necessary. */	
    190            if( xHigherPriorityTaskWoken != pdFALSE )
    191            {
    192              portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
    193            }
    194          #endif
    195          }
   \                     ETH_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x2E 0x2E          DC8      0x2E, 0x2E, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x68 0x00          DC8      "h",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x6D 0x00          DC8      "m",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x62 0x00          DC8      "b",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x75 0x00          DC8      "u",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0x53 0x00          DC8      "S",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   0x44 0x00          DC8      "D",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   0x50 0x00          DC8      "P",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   0x........         DC32     systick_uptime_millis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   0x........         DC32     _millisCounter

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x2E 0x2E          DC8 ".."
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_1:
   \   00000000   0x68 0x00          DC8 "h"

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_2:
   \   00000000   0x6D 0x00          DC8 "m"

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_3:
   \   00000000   0x62 0x00          DC8 "b"

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_4:
   \   00000000   0x75 0x00          DC8 "u"

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_5:
   \   00000000   0x53 0x00          DC8 "S"

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_6:
   \   00000000   0x44 0x00          DC8 "D"

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_7:
   \   00000000   0x50 0x00          DC8 "P"
    196          
    197          
    198          
    199          
    200          /******************************************************************************/
    201          /*                 STM32F2xx Peripherals Interrupt Handlers                   */
    202          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    203          /*  available peripheral interrupt handler's name please refer to the startup */
    204          /*  file (startup_stm32f2xx.s).                                               */
    205          /******************************************************************************/
    206          
    207          /**
    208            * @brief  This function handles PPP interrupt request.
    209            * @param  None
    210            * @retval None
    211            */
    212          /*void PPP_IRQHandler(void)
    213          {
    214          }*/
    215          
    216          
    217          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BusFault_Handler
         8   -> printd
       0   DebugMon_Handler
         0   -> printd
       0   ETH_IRQHandler
       8   HardFault_Handler
         8   -> printd
       8   MemManage_Handler
         8   -> printd
       0   NMI_Handler
         0   -> printd
       0   PendSV_Handler
         0   -> printd
       0   SVC_Handler
         0   -> printd
       8   SysTick_Handler
         8   -> xPortSysTickHandler
       8   UsageFault_Handler
         8   -> printd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
       4  ?_0
       2  ?_1
       2  ?_2
       2  ?_3
       2  ?_4
       2  ?_5
       2  ?_6
       2  ?_7
      10  BusFault_Handler
       6  DebugMon_Handler
       2  ETH_IRQHandler
      10  HardFault_Handler
      10  MemManage_Handler
       6  NMI_Handler
       6  PendSV_Handler
       6  SVC_Handler
      24  SysTick_Handler
      10  UsageFault_Handler

 
  18 bytes in section .rodata
 130 bytes in section .text
 
 130 bytes of CODE  memory
  18 bytes of CONST memory

Errors: none
Warnings: none
