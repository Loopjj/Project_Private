###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       18/Dec/2023  17:37:05
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Dev\spi_MAX6675.c
#    Command line =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Dev\spi_MAX6675.c
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_USB_OTG_FS -lC
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List
#        --diag_suppress Pa050 -o
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\ -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\cpu\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Drv\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\fat\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\bsp\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Dev\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Core\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_OTG_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\portable\IAR\ARM_CM3\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\include\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\usbConf\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\drivers\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List\spi_MAX6675.lst
#    Object file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj\spi_MAX6675.o
#
###############################################################################

E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Dev\spi_MAX6675.c
      1          /*
      2          *************************************** (C) COPYRIGHT 2015 LOOP *************************************
      3          *
      4          * File Name          : avg.c
      5          *
      6          * Author             : Reserch & Developing 1 Team
      7          *
      8          * Version            : V1.0.0
      9          *
     10          * Date               : 07/29/2015
     11          *
     12          * Description        : ADC average
     13          *
     14          *********************************************************************************************************
     15          */
     16          
     17          /*
     18          *********************************************************************************************************
     19          *                                             INCLUDE FILES
     20          *********************************************************************************************************
     21          */
     22          
     23          #define SPI_MAX6675_GLOBALS
     24          #include "includes.h"
     25          
     26          #define BIT_RESOLUTION  0.25
     27          #define BIT_CONNECTION  0x04
     28          
     29          /*
     30          ********************************************************************************
     31          * Description : Read_max6675
     32          * Arguments   : none
     33          * Return      : 
     34          * Note        : read max6675 
     35          ******************************************************************************** 
     36          */
     37          

   \                                 In section .text, align 4, keep-with-next
     38          INT16U Read_max6675(void) 
     39          { 
   \                     Read_max6675: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
     40            INT16U activeValue = 0;
     41            double realValue = 0;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x4625             MOV      R5,R4
   \   00000008   0x4626             MOV      R6,R4
   \   0000000A   0x462F             MOV      R7,R5
     42            INT8U highData = 0, lowData = 0;
     43            
     44            GPIO_ResetBits(GPIOB, GPIO_Pin_12);         // CS low
   \   0000000C   0xF8DF 0x80D0      LDR.W    R8,??Read_max6675_0  ;; 0x40020400
   \   00000010   0xF44F 0x5180      MOV      R1,#+4096
   \   00000014   0x4640             MOV      R0,R8
   \   00000016   0x.... 0x....      BL       GPIO_ResetBits
     45            asm("NOP");
   \   0000001A   0xBF00             NOP
   \   0000001C   0xF8DF 0xA0C4      LDR.W    R10,??Read_max6675_0+0x4  ;; 0x40003800
     46            /* Wait for SPI2 Tx buffer empty */
     47            while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);   //wait finish sending
   \                     ??Read_max6675_1: (+1)
   \   00000020   0x2102             MOVS     R1,#+2
   \   00000022   0x4650             MOV      R0,R10
   \   00000024   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD0F9             BEQ.N    ??Read_max6675_1
     48            SPI_I2S_SendData(SPI2, 0);
   \   0000002C   0x4621             MOV      R1,R4
   \   0000002E   0x4650             MOV      R0,R10
   \   00000030   0x.... 0x....      BL       SPI_I2S_SendData
     49            /* Wait for SPI2 data reception */
     50            while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) ;   // wait data received
   \                     ??Read_max6675_2: (+1)
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x4650             MOV      R0,R10
   \   00000038   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD0F9             BEQ.N    ??Read_max6675_2
     51            highData = SPI_I2S_ReceiveData(SPI2);
   \   00000040   0x4650             MOV      R0,R10
   \   00000042   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000046   0x4681             MOV      R9,R0
     52            
     53            /* Wait for SPI2 Tx buffer empty */
     54            while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);   //wait finish sending
   \                     ??Read_max6675_3: (+1)
   \   00000048   0x2102             MOVS     R1,#+2
   \   0000004A   0x4650             MOV      R0,R10
   \   0000004C   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD0F9             BEQ.N    ??Read_max6675_3
     55            SPI_I2S_SendData(SPI2, 0);
   \   00000054   0x4621             MOV      R1,R4
   \   00000056   0x4650             MOV      R0,R10
   \   00000058   0x.... 0x....      BL       SPI_I2S_SendData
     56            /* Wait for SPI2 data reception */
     57            while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) ;   // wait data received
   \                     ??Read_max6675_4: (+1)
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x4650             MOV      R0,R10
   \   00000060   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD0F9             BEQ.N    ??Read_max6675_4
     58            lowData = SPI_I2S_ReceiveData(SPI2);
   \   00000068   0x4650             MOV      R0,R10
   \   0000006A   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000006E   0x4682             MOV      R10,R0
   \   00000070   0xFA5F 0xFA8A      UXTB     R10,R10
     59            asm("NOP");
   \   00000074   0xBF00             NOP
     60            GPIO_SetBits(GPIOB, GPIO_Pin_12);           // CS high
   \   00000076   0xF44F 0x5180      MOV      R1,#+4096
   \   0000007A   0x4640             MOV      R0,R8
   \   0000007C   0x.... 0x....      BL       GPIO_SetBits
     61          
     62            if((lowData & BIT_CONNECTION) != BIT_CONNECTION) {
   \   00000080   0xF8DF 0x8064      LDR.W    R8,??Read_max6675_0+0x8
   \   00000084   0x4650             MOV      R0,R10
   \   00000086   0x0740             LSLS     R0,R0,#+29
   \   00000088   0xD410             BMI.N    ??Read_max6675_5
     63              activeValue = (highData << 8); 
     64              activeValue |= lowData;
     65              realValue = ((double)(activeValue >> 3) * BIT_RESOLUTION);
   \   0000008A   0xFA5F 0xF989      UXTB     R9,R9
   \   0000008E   0xEA4A 0x2009      ORR      R0,R10,R9, LSL #+8
   \   00000092   0x08C0             LSRS     R0,R0,#+3
   \   00000094   0x.... 0x....      BL       __aeabi_ui2d
   \   00000098   0x4622             MOV      R2,R4
   \   0000009A   0x4B14             LDR.N    R3,??Read_max6675_0+0xC  ;; 0x3fd00000
   \   0000009C   0x.... 0x....      BL       __aeabi_dmul
   \   000000A0   0x4606             MOV      R6,R0
   \   000000A2   0x460F             MOV      R7,R1
     66              TerrorFlag = 1;
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   000000AA   0xE002             B.N      ??Read_max6675_6
     67            } 
     68            else {
     69              realValue = 0;
     70              TerrorFlag = 0;
   \                     ??Read_max6675_5: (+1)
   \   000000AC   0x4620             MOV      R0,R4
   \   000000AE   0xF888 0x0000      STRB     R0,[R8, #+0]
     71            }
     72            realValue -= Setting.T1Offset;
   \                     ??Read_max6675_6: (+1)
   \   000000B2   0x480F             LDR.N    R0,??Read_max6675_0+0x10
   \   000000B4   0xF8B0 0x00A7      LDRH     R0,[R0, #+167]
   \   000000B8   0x.... 0x....      BL       __aeabi_ui2d
   \   000000BC   0x4602             MOV      R2,R0
   \   000000BE   0x460B             MOV      R3,R1
   \   000000C0   0x4630             MOV      R0,R6
   \   000000C2   0x4639             MOV      R1,R7
   \   000000C4   0x.... 0x....      BL       __aeabi_dsub
     73            if(realValue < 0) realValue = 0;
   \   000000C8   0x4622             MOV      R2,R4
   \   000000CA   0x4613             MOV      R3,R2
   \   000000CC   0x.... 0x....      BL       __aeabi_cdcmple
   \   000000D0   0xD201             BCS.N    ??Read_max6675_7
   \   000000D2   0x4620             MOV      R0,R4
   \   000000D4   0x4629             MOV      R1,R5
     74            return (INT16U)realValue;
   \                     ??Read_max6675_7: (+1)
   \   000000D6   0x.... 0x....      BL       __aeabi_d2iz
   \   000000DA   0xB280             UXTH     R0,R0
   \   000000DC   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??Read_max6675_0:
   \   000000E0   0x40020400         DC32     0x40020400
   \   000000E4   0x40003800         DC32     0x40003800
   \   000000E8   0x........         DC32     TerrorFlag
   \   000000EC   0x3FD00000         DC32     0x3fd00000
   \   000000F0   0x........         DC32     Setting
     75          } 
     76          
     77          
     78          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   Read_max6675
        32   -> GPIO_ResetBits
        32   -> GPIO_SetBits
        32   -> SPI_I2S_GetFlagStatus
        32   -> SPI_I2S_ReceiveData
        32   -> SPI_I2S_SendData
        32   -> __aeabi_d2iz
        32   -> __aeabi_dmul
        32   -> __aeabi_dsub
        32   -> __aeabi_ui2d
        32 __aeabi_cdcmple


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     244  Read_max6675

 
 244 bytes in section .text
 
 244 bytes of CODE memory

Errors: none
Warnings: none
