###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       18/Dec/2023  17:37:03
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Drv\cli.c
#    Command line =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Drv\cli.c -D
#        USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_USB_OTG_FS -lC
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List
#        --diag_suppress Pa050 -o
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\ -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\cpu\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Drv\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\fat\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\bsp\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Dev\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Core\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_OTG_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\portable\IAR\ARM_CM3\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\include\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\usbConf\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\drivers\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List\cli.lst
#    Object file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj\cli.o
#
###############################################################################

E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Drv\cli.c
      1          /*
      2          *************************************** (C) COPYRIGHT 2014 Loop *************************************
      3          *
      4          * File Name          : cli.c
      5          *
      6          * Author             : Digital Development Team
      7          *
      8          * Version            : V1.0.0
      9          *
     10          * Date               : 07/05/2014
     11          *
     12          * Description        : command line interface configuration
     13          *
     14          *********************************************************************************************************
     15          */
     16          
     17          /*
     18          *********************************************************************************************************
     19          *                                             INCLUDE FILES
     20          *********************************************************************************************************
     21          */
     22          
     23          #define CLI_GLOBALS
     24          #include "includes.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void Term_Send(unsigned char)
   \                     Term_Send: (+1)
   \   00000000   0x.... 0x....      B.W      put_ch_console

   \                                 In section .text, align 2
   \   __interwork __softfp void Term_Set_Display_Attribute_Mode(unsigned char)
   \                     Term_Set_Display_Attribute_Mode: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x201B             MOVS     R0,#+27
   \   00000006   0x.... 0x....      BL       Term_Send
   \   0000000A   0x205B             MOVS     R0,#+91
   \   0000000C   0x.... 0x....      BL       Term_Send
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       Term_Send
   \   00000016   0x206D             MOVS     R0,#+109
   \   00000018   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001C   0x.... 0x....      B.W      Term_Send
     25          
     26          
     27          
     28          /*
     29          *********************************************************************************************************
     30          *                                             LOCAL DEFINES
     31          *********************************************************************************************************
     32          */
     33          #define PRINTK_BUFF_SIZE		512
     34          #define COMMAND_MAX				0x20				// 한줄에 쓸수있는 글자수.
     35          #define COMMAND_STACK_MAX		0x04				// command history buffer
     36          #define COMMAND_STACK_MAXMASK	(COMMAND_STACK_MAX-1)    
     37          #define ARGUMENT_MAX			0x08				// argument limit
     38          
     39          
     40          /*
     41          *********************************************************************************************************
     42          *                                              LOCAL MACRO
     43          *********************************************************************************************************
     44          */
     45          
     46          #define NB_OF(x)		(sizeof(x)/sizeof(x[0]))
     47          #define COMMAND_CNT		NB_OF(commands)
     48          
     49          

   \                                 In section .text, align 4, keep-with-next
     50          static const char eLine[]={27,'[','2','K',0};
   \                     eLine:
   \   00000000   0x1B 0x5B          DC8 27, 91, 50, 75, 0, 0, 0, 0
   \              0x32 0x4B    
   \              0x00 0x00    
   \              0x00 0x00    
     51          
     52          #if 0
     53          static const char eNone[]={27,'[',MODE_NONE,'m',0};
     54          static const char eBold[]={27,'[',MODE_BOLD,'m',0};
     55          static const char eRevers[]={27,'[',MODE_REVERSED,'m',0};
     56          
     57          static const char eYELLOW[]={27,'[',MODE_BOLD,'m',27,'[','3',COL_YELLOW,'m',0};
     58          static const char eGREEN[]={27,'[',MODE_BOLD,'m',27,'[','3',COL_GREEN,'m',0};
     59          static const char eRED[]={27,'[',MODE_BOLD,'m',27,'[','3',COL_RED,'m',0};
     60          static const char eMAGENTA[]={27,'[',MODE_BOLD,'m',27,'[','3',COL_MAGENTA,'m',0};
     61          #endif
     62          
     63          

   \                                 In section .text, align 4, keep-with-next
     64          const command_t commands[]={
   \                     commands:
   \   00000000   0x........         DC32 ?_0, current_fuction_list
   \              0x........   
   \   00000008   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x........         DC32 ?_1, ?_2, current_fuction_list
   \              0x........   
   \              0x........   
   \   00000018   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x........         DC32 ?_3, ?_4, dbg_system_reset
   \              0x........   
   \              0x........   
   \   00000028   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000002C   0x........         DC32 ?_4, ?_5, dbg_ver_rollback
   \              0x........   
   \              0x........   
   \   00000038   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000003C   0x........         DC32 ?_5, ?_6, dbg_ver_rollup
   \              0x........   
   \              0x........   
   \   00000048   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000004C   0x........         DC32 ?_7, ?_8, dbg_tasklist
   \              0x........   
   \              0x........   
   \   00000058   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000005C   0x........         DC32 ?_8, ?_9, dbg_sflash_dispMap
   \              0x........   
   \              0x........   
   \   00000068   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000006C   0x........         DC32 ?_10, ?_11, dbg_sflash_smd
   \              0x........   
   \              0x........   
   \   00000078   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000007C   0x........         DC32 ?_12, ?_13, dbg_sflash_modify
   \              0x........   
   \              0x........   
   \   00000088   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000008C   0x........         DC32 ?_14, ?_15, dbg_sflash_flush
   \              0x........   
   \              0x........   
   \   00000098   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000009C   0x........         DC32 ?_16, ?_17, dbg_sflash_flush_all
   \              0x........   
   \              0x........   
   \   000000A8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000000AC   0x........         DC32 ?_18, ?_19, dbg_sflash_flash_chip
   \              0x........   
   \              0x........   
   \   000000B8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000000BC   0x........         DC32 ?_20, ?_21, dbg_sflash_read_id
   \              0x........   
   \              0x........   
   \   000000C8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000000CC   0x........         DC32 ?_22, ?_23, dbg_sflash_write
   \              0x........   
   \              0x........   
   \   000000D8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000000DC   0x........         DC32 ?_24, ?_25, dbg_sflash_read
   \              0x........   
   \              0x........   
   \   000000E8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000000EC   0x........         DC32 ?_26, ?_27, dbg_sflash_crc
   \              0x........   
   \              0x........   
   \   000000F8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000000FC   0x........         DC32 ?_28, ?_29, dbg_sflash_select
   \              0x........   
   \              0x........   
   \   00000108   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000010C   0x........         DC32 ?_30, ?_31, dbg_inittest_select
   \              0x........   
   \              0x........   
   \   00000118   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000011C   0x........         DC32 ?_32, ?_33, dbg_buzzer_test
   \              0x........   
   \              0x........   
   \   00000128   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000012C   0x........         DC32 ?_34, ?_35, dbg_doc_test
   \              0x........   
   \              0x........   
   \   00000138   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000013C   0x........         DC32 ?_36, ?_37, dbg_rtc_set
   \              0x........   
   \              0x........   
   \   00000148   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000014C   0x........         DC32 ?_38, ?_39, dbg_rtc_gettime
   \              0x........   
   \              0x........   
   \   00000158   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000015C   0x........         DC32 ?_40, ?_41, dbg_backupsramwr_test
   \              0x........   
   \              0x........   
   \   00000168   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000016C   0x........         DC32 ?_42, ?_43, dbg_backupsramrd_test
   \              0x........   
   \              0x........   
   \   00000178   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000017C   0x........         DC32 ?_44, ?_45, dbg_ddd_test
   \              0x........   
   \              0x........   
   \   00000188   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000018C   0x........         DC32 ?_46, ?_47, dbg_fsmount_test
   \              0x........   
   \              0x........   
   \   00000198   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000019C   0x........         DC32 ?_48, ?_49, dbg_nandread_test
   \              0x........   
   \              0x........   
   \   000001A8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000001AC   0x........         DC32 ?_50, ?_51, CMD_NAND_checkbb
   \              0x........   
   \              0x........   
   \   000001B8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000001BC   0x........         DC32 ?_52, ?_53, CMD_NAND_id
   \              0x........   
   \              0x........   
   \   000001C8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000001CC   0x........         DC32 ?_54, ?_55, dbg_nandErase_test
   \              0x........   
   \              0x........   
   \   000001D8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000001DC   0x........         DC32 ?_56, ?_57, dbg_fram_read
   \              0x........   
   \              0x........   
   \   000001E8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000001EC   0x........         DC32 ?_58, ?_59, dbg_fram_write
   \              0x........   
   \              0x........   
   \   000001F8   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   000001FC   0x........         DC32 ?_60, ?_61, dbg_factory_init
   \              0x........   
   \              0x........   
   \   00000208   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000020C   0x........         DC32 ?_62, ?_63, dbg_scrclib_init
   \              0x........   
   \              0x........   
   \   00000218   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   0000021C   0x........         DC32 ?_64, 0H, 0H
   \              0x00000000   
   \              0x00000000   
   \   00000228   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   0000022C   0x00000000         DC32 0H
     65          	{"ls", current_fuction_list, ALL_DIR, ""},
     66          	{"help", current_fuction_list, ALL_DIR, "HELP list"},
     67          	BSP_COMMANDS 
     68          	SPIFLASH_DRV_COMMANDS
     69          	BSP_IOCCOMMAND
     70          	RTC_COMMANDS
     71          	BSPU_COMMANDS
     72          	DEBUG_COMMANDS
     73          	NAND_COMMANDS
     74            I2C_COMMANDS
     75          	//CAN_COMMANDS
     76            INIT_COMMANDS  
     77          	{0,0,0,0}
     78          };
     79          
     80          
     81          /*
     82          *********************************************************************************************************
     83          *                                             LOCAL VARIABLE
     84          *********************************************************************************************************
     85          */
     86          

   \                                 In section .text, align 4, keep-with-next
     87          static const INT8U fls[] = "\n=============================================start\n";
   \                     fls:
   \   00000000   0x0A 0x3D          DC8 0AH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000008   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000010   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000018   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000020   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000028   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 73H, 74H
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x73 0x74    
   \   00000030   0x61 0x72          DC8 61H, 72H, 74H, 0AH, 0
   \              0x74 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
     88          static const INT8U fle[] = "\n=============================================end\n";
   \                     fle:
   \   00000000   0x0A 0x3D          DC8 0AH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000008   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000010   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000018   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000020   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000028   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 65H, 6EH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x65 0x6E    
   \   00000030   0x64 0x0A          DC8 64H, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0
     89          static char prompt_buffer[30]={0};

   \                                 In section .bss, align 4
     90          static INT8U command_stack[COMMAND_STACK_MAX][COMMAND_MAX]={0};
   \                     command_stack:
   \   00000000                      DS8 128
     91          static INT32U cmd_cnt=0;
     92          static INT8U current_mode=1;		
     93          static INT32U Console_Port;
     94          
     95          

   \                                 In section .bss, align 4
     96          static char dprint_buf[PRINTK_BUFF_SIZE]={0};
   \                     dprint_buf:
   \   00000000                      DS8 512
     97          
     98          

   \                                 In section .bss, align 4
     99          static char kprint_buf[PRINTK_BUFF_SIZE]={0};
   \                     kprint_buf:
   \   00000000                      DS8 512
    100          
    101          
    102          

   \                                 In section .bss, align 4
    103          xSemaphoreHandle PromptSem = NULL;
   \                     PromptSem:
   \   00000000                      DS8 4
    104          xSemaphoreHandle PrintkSem = NULL;
   \                     PrintkSem:
   \   00000004                      DS8 4
    105          
    106          extern USART_TypeDef *pUART_BASE[2];
    107          
    108          /*
    109          *********************************************************************************************************
    110          *                                             LOCAL FUNCTION
    111          *********************************************************************************************************
    112          */
    113          
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void CLI_SetConsolPort(INT32U Port)
    116          {
    117          	Console_Port = Port;
   \                     CLI_SetConsolPort: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable104_4
   \   00000004   0x6288             STR      R0,[R1, #+40]
    118          	memset(dprint_buf, 0x0, PRINTK_BUFF_SIZE);
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0xF44F 0x7100      MOV      R1,#+512
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable104_5
   \   00000010   0x.... 0x....      B.W      __aeabi_memset4
    119          }
    120          

   \                                 In section .text, align 2, keep-with-next
    121          void dput_ch_console(INT8U data)
    122          {
   \                     dput_ch_console: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable104_4
   \   00000008   0x.... 0x....      LDR.W    R6,??DataTable104_6
    123          	while(USART_GetFlagStatus(pUART_BASE[Console_Port],USART_FLAG_TXE) == RESET);// OS_Sched();
   \                     ??dput_ch_console_0: (+1)
   \   0000000C   0x2180             MOVS     R1,#+128
   \   0000000E   0x6AA8             LDR      R0,[R5, #+40]
   \   00000010   0xF856 0x0020      LDR      R0,[R6, R0, LSL #+2]
   \   00000014   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD0F7             BEQ.N    ??dput_ch_console_0
    124          	USART_SendData(pUART_BASE[Console_Port],data);
   \   0000001C   0x4621             MOV      R1,R4
   \   0000001E   0x6AA8             LDR      R0,[R5, #+40]
   \   00000020   0xF856 0x0020      LDR      R0,[R6, R0, LSL #+2]
   \   00000024   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000028   0x.... 0x....      B.W      USART_SendData
    125          }
    126          

   \                                 In section .text, align 2, keep-with-next
    127          void put_ch_console(INT8U data)
    128          {
    129          
    130              dput_ch_console(data);
   \                     put_ch_console: (+1)
   \   00000000   0x....             B.N      dput_ch_console
    131          }
    132          
    133          

   \                                 In section .text, align 2, keep-with-next
    134          void printd(char *fmt, ...) 
    135          {
   \                     printd: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB578             PUSH     {R3-R6,LR}
   \   00000004   0x4601             MOV      R1,R0
    136          	INT32S	len,i=0;
   \   00000006   0x2400             MOVS     R4,#+0
    137          	va_list ap;
    138           
    139           	va_start(ap, fmt);
   \   00000008   0xAA05             ADD      R2,SP,#+20
    140           	len = vsprintf(dprint_buf, fmt, ap);
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable104_5
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0x.... 0x....      BL       vsprintf
   \   00000014   0x4606             MOV      R6,R0
    141          	va_end(ap);
    142          
    143          	if ( len > 0 ){
   \   00000016   0x2E01             CMP      R6,#+1
   \   00000018   0xDA05             BGE.N    ??printd_0
    144          		while(len--){
    145          			if ( dprint_buf[i] == '\n' ){
    146          				dput_ch_console('\n');
    147          				dput_ch_console('\r');
    148          			}
    149          			else {																   
    150          				dput_ch_console(dprint_buf[i]);
    151          			}
    152          			i++;
    153          		}
    154          	}
    155          }
   \                     ??printd_1: (+1)
   \   0000001A   0xBC71             POP      {R0,R4-R6}
   \   0000001C   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
   \                     ??printd_2: (+1)
   \   00000020   0x.... 0x....      BL       dput_ch_console
   \                     ??printd_3: (+1)
   \   00000024   0x1C64             ADDS     R4,R4,#+1
   \                     ??printd_0: (+1)
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x1E46             SUBS     R6,R0,#+1
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD0F5             BEQ.N    ??printd_1
   \   0000002E   0x5D28             LDRB     R0,[R5, R4]
   \   00000030   0x280A             CMP      R0,#+10
   \   00000032   0xD1F5             BNE.N    ??printd_2
   \   00000034   0x200A             MOVS     R0,#+10
   \   00000036   0x.... 0x....      BL       dput_ch_console
   \   0000003A   0x200D             MOVS     R0,#+13
   \   0000003C   0x.... 0x....      BL       dput_ch_console
   \   00000040   0xE7F0             B.N      ??printd_3
    156          
    157          
    158          

   \                                 In section .text, align 2, keep-with-next
    159          void printk(const char *fmt, ...) 
    160          {
   \                     printk: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB5F0             PUSH     {R4-R7,LR}
   \   00000004   0x4604             MOV      R4,R0
    161          
    162              INT32S	len,i=0;
   \   00000006   0x2500             MOVS     R5,#+0
    163          	va_list ap;
    164              
    165          	if( PrintkSem != NULL)
   \   00000008   0x.... 0x....      LDR.W    R6,??DataTable104_7
   \   0000000C   0x6870             LDR      R0,[R6, #+4]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD016             BEQ.N    ??printk_0
    166          	{
    167          		if(xSemaphoreTake(PrintkSem, ( portTickType ) 10 ) == pdTRUE )
   \   00000012   0x462B             MOV      R3,R5
   \   00000014   0x220A             MOVS     R2,#+10
   \   00000016   0x4619             MOV      R1,R3
   \   00000018   0x.... 0x....      BL       xQueueGenericReceive
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD10F             BNE.N    ??printk_0
    168          		{
    169           			va_start(ap, fmt);
   \   00000020   0xAA05             ADD      R2,SP,#+20
    170           			len = vsprintf(kprint_buf, fmt, ap);
   \   00000022   0x.... 0x....      LDR.W    R7,??DataTable104_8
   \   00000026   0x4621             MOV      R1,R4
   \   00000028   0x4638             MOV      R0,R7
   \   0000002A   0x.... 0x....      BL       vsprintf
   \   0000002E   0x4604             MOV      R4,R0
    171          			va_end(ap);
    172          
    173          			if ( len > 0 )
   \   00000030   0x2C01             CMP      R4,#+1
   \   00000032   0xDA0B             BGE.N    ??printk_1
    174          			{
    175          				while(len--){
    176          					if ( kprint_buf[i] == '\n' ){
    177          						put_ch_console('\n');
    178          						put_ch_console('\r');
    179          					}
    180          					else {																   
    181          						put_ch_console(kprint_buf[i]);
    182          					}
    183          					i++;
    184          				}
    185          			}
    186          			xSemaphoreGive(PrintkSem);
   \                     ??printk_2: (+1)
   \   00000034   0x2300             MOVS     R3,#+0
   \   00000036   0x461A             MOV      R2,R3
   \   00000038   0x4611             MOV      R1,R2
   \   0000003A   0x6870             LDR      R0,[R6, #+4]
   \   0000003C   0x.... 0x....      BL       xQueueGenericSend
    187          		}
    188          	}
    189          }
   \                     ??printk_0: (+1)
   \   00000040   0xBCF0             POP      {R4-R7}
   \   00000042   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
   \                     ??printk_3: (+1)
   \   00000046   0x.... 0x....      BL       put_ch_console
   \                     ??printk_4: (+1)
   \   0000004A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??printk_1: (+1)
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x1E44             SUBS     R4,R0,#+1
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD0EF             BEQ.N    ??printk_2
   \   00000054   0x5D78             LDRB     R0,[R7, R5]
   \   00000056   0x280A             CMP      R0,#+10
   \   00000058   0xD1F5             BNE.N    ??printk_3
   \   0000005A   0x200A             MOVS     R0,#+10
   \   0000005C   0x.... 0x....      BL       put_ch_console
   \   00000060   0x200D             MOVS     R0,#+13
   \   00000062   0x.... 0x....      BL       put_ch_console
   \   00000066   0xE7F0             B.N      ??printk_4
    190          

   \                                 In section .text, align 2, keep-with-next
    191          void UART2_SendData(INT8U data)
    192          {
   \                     UART2_SendData: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable104_9  ;; 0x40004400
    193          	while(USART_GetFlagStatus(USART2,USART_FLAG_TXE) == RESET);// OS_Sched();
   \                     ??UART2_SendData_0: (+1)
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD0F9             BEQ.N    ??UART2_SendData_0
    194          	USART_SendData(USART2,data);
   \   00000014   0x4621             MOV      R1,R4
   \   00000016   0x4628             MOV      R0,R5
   \   00000018   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000001C   0x.... 0x....      B.W      USART_SendData
    195          }
    196          

   \                                 In section .text, align 2, keep-with-next
    197          void UART2_SendDataStr(INT8U *data,int len)
    198          {
   \                     UART2_SendDataStr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    199          	int i=0;
   \   00000006   0x2600             MOVS     R6,#+0
    200          	for(i=0;i< len; i++)
   \   00000008   0xE003             B.N      ??UART2_SendDataStr_0
    201          		UART2_SendData(data[i]);
   \                     ??UART2_SendDataStr_1: (+1)
   \   0000000A   0x5DA0             LDRB     R0,[R4, R6]
   \   0000000C   0x.... 0x....      BL       UART2_SendData
   \   00000010   0x1C76             ADDS     R6,R6,#+1
   \                     ??UART2_SendDataStr_0: (+1)
   \   00000012   0x42AE             CMP      R6,R5
   \   00000014   0xDBF9             BLT.N    ??UART2_SendDataStr_1
    202          }
   \   00000016   0xBD70             POP      {R4-R6,PC}       ;; return
    203          

   \                                 In section .text, align 2, keep-with-next
    204          void UART2_print(char *fmt, ...) 
    205          {
   \                     UART2_print: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB578             PUSH     {R3-R6,LR}
   \   00000004   0x4601             MOV      R1,R0
    206          	INT32S	len,i=0;
   \   00000006   0x2400             MOVS     R4,#+0
    207          	va_list ap;
    208           
    209           	va_start(ap, fmt);
   \   00000008   0xAA05             ADD      R2,SP,#+20
    210           	len = vsprintf(dprint_buf, fmt, ap);
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable104_5
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0x.... 0x....      BL       vsprintf
   \   00000014   0x4606             MOV      R6,R0
    211          	va_end(ap);
    212          
    213          	if ( len > 0 ){
   \   00000016   0x2E01             CMP      R6,#+1
   \   00000018   0xDA05             BGE.N    ??UART2_print_0
    214          		while(len--){
    215          			if ( dprint_buf[i] == '\n' ){
    216          				UART2_SendData('\n');
    217          				UART2_SendData('\r');
    218          			}
    219          			else {																   
    220          				UART2_SendData(dprint_buf[i]);
    221          			}
    222          			i++;
    223          		}
    224          	}
    225          }
   \                     ??UART2_print_1: (+1)
   \   0000001A   0xBC71             POP      {R0,R4-R6}
   \   0000001C   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
   \                     ??UART2_print_2: (+1)
   \   00000020   0x.... 0x....      BL       UART2_SendData
   \                     ??UART2_print_3: (+1)
   \   00000024   0x1C64             ADDS     R4,R4,#+1
   \                     ??UART2_print_0: (+1)
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x1E46             SUBS     R6,R0,#+1
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD0F5             BEQ.N    ??UART2_print_1
   \   0000002E   0x5D28             LDRB     R0,[R5, R4]
   \   00000030   0x280A             CMP      R0,#+10
   \   00000032   0xD1F5             BNE.N    ??UART2_print_2
   \   00000034   0x200A             MOVS     R0,#+10
   \   00000036   0x.... 0x....      BL       UART2_SendData
   \   0000003A   0x200D             MOVS     R0,#+13
   \   0000003C   0x.... 0x....      BL       UART2_SendData
   \   00000040   0xE7F0             B.N      ??UART2_print_3
    226          
    227          // 현재입력된 커멘드의 argument의 주소를 리턴한다. 
    228          static char *argument[ARGUMENT_MAX] = {0};

   \                                 In section .text, align 2, keep-with-next
    229          char *Argument(INT32U num)		
    230          {
    231          	return argument[num];
   \                     Argument: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable104_4
   \   00000004   0xEB01 0x0080      ADD      R0,R1,R0, LSL #+2
   \   00000008   0x6AC0             LDR      R0,[R0, #+44]
   \   0000000A   0x4770             BX       LR               ;; return
    232          }
    233          
    234          
    235          static INT32U ulArgumentCount=0;

   \                                 In section .text, align 2, keep-with-next
    236          INT32U	CLI_GetArgCnt(void)
    237          {
    238          	return ulArgumentCount;
   \                     CLI_GetArgCnt: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable104_4
   \   00000004   0x6CC0             LDR      R0,[R0, #+76]
   \   00000006   0x4770             BX       LR               ;; return
    239          }
    240          
    241          
    242          // 0x를 구별해낸다. 10진수와 16진수 감별..

   \                                 In section .text, align 2, keep-with-next
    243          INT32U comparison_num( char *str )
    244          {
   \                     comparison_num: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    245          	INT32U temp=0;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x9100             STR      R1,[SP, #+0]
    246          	if ( str[0] == '0' && (str[1] == 'x' || str[1] == 'X')) sscanf((const char *)str,"0x%x", &temp);
   \   00000006   0x7801             LDRB     R1,[R0, #+0]
   \   00000008   0x2930             CMP      R1,#+48
   \   0000000A   0xD10A             BNE.N    ??comparison_num_0
   \   0000000C   0x7841             LDRB     R1,[R0, #+1]
   \   0000000E   0x2978             CMP      R1,#+120
   \   00000010   0xD001             BEQ.N    ??comparison_num_1
   \   00000012   0x2958             CMP      R1,#+88
   \   00000014   0xD105             BNE.N    ??comparison_num_0
   \                     ??comparison_num_1: (+1)
   \   00000016   0x466A             MOV      R2,SP
   \   00000018   0x.... 0x....      ADR.W    R1,?_65
   \   0000001C   0x.... 0x....      BL       sscanf
   \   00000020   0xE003             B.N      ??comparison_num_2
    247          	else sscanf((const char *)str,"%d", &temp);
   \                     ??comparison_num_0: (+1)
   \   00000022   0x466A             MOV      R2,SP
   \   00000024   0x....             ADR.N    R1,??DataTable102  ;; 0x25, 0x64, 0x00, 0x00
   \   00000026   0x.... 0x....      BL       sscanf
    248          	return temp;
   \                     ??comparison_num_2: (+1)
   \   0000002A   0x9800             LDR      R0,[SP, #+0]
   \   0000002C   0xBD02             POP      {R1,PC}          ;; return
    249          }
    250          // 0x를 구별해낸다. 10진수와 16진수 감별..

   \                                 In section .text, align 2, keep-with-next
    251          float comparison_float( char *str )
    252          {
   \                     comparison_float: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08E             SUB      SP,SP,#+56
   \   00000004   0x4604             MOV      R4,R0
    253          	char buf[50];
    254          	float temp=0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
    255          
    256          	memset(buf,0,sizeof(buf));
   \   0000000A   0x4602             MOV      R2,R0
   \   0000000C   0x2132             MOVS     R1,#+50
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0x.... 0x....      BL       __aeabi_memset4
    257          	memcpy(buf, str, strlen(str));
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       strlen
   \   0000001A   0x4602             MOV      R2,R0
   \   0000001C   0x4621             MOV      R1,R4
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       __aeabi_memcpy
    258          	sscanf(   buf, "%f", &temp);
   \   00000024   0x466A             MOV      R2,SP
   \   00000026   0x....             ADR.N    R1,??DataTable102_1  ;; 0x25, 0x66, 0x00, 0x00
   \   00000028   0xA801             ADD      R0,SP,#+4
   \   0000002A   0x.... 0x....      BL       sscanf
    259          
    260          	printk("in cli = %s[%.8f]\n",str,temp);
   \   0000002E   0x9800             LDR      R0,[SP, #+0]
   \   00000030   0x.... 0x....      BL       __aeabi_f2d
   \   00000034   0x4602             MOV      R2,R0
   \   00000036   0x460B             MOV      R3,R1
   \   00000038   0x4621             MOV      R1,R4
   \   0000003A   0x.... 0x....      ADR.W    R0,?_68
   \   0000003E   0x.... 0x....      BL       printk
    261          	return temp;
   \   00000042   0x9800             LDR      R0,[SP, #+0]
   \   00000044   0xB00E             ADD      SP,SP,#+56
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    262          }
    263          
    264          
    265          

   \                                 In section .text, align 2, keep-with-next
    266          void prompt(char *name)
    267          {
   \                     prompt: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    268          	if(PromptSem != NULL)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable104_7
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD015             BEQ.N    ??prompt_0
    269          	{
    270          		if(xSemaphoreTake(PromptSem, ( portTickType ) 10 )  == pdTRUE)
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x220A             MOVS     R2,#+10
   \   00000010   0x4619             MOV      R1,R3
   \   00000012   0x.... 0x....      BL       xQueueGenericReceive
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD10E             BNE.N    ??prompt_0
    271          		{
    272          			printk("OBDPro]");
   \   0000001A   0x.... 0x....      ADR.W    R0,?_69
   \   0000001E   0x.... 0x....      BL       printk
    273          			Term_Set_Display_Attribute_Mode( MODE_NONE );
   \   00000022   0x2030             MOVS     R0,#+48
   \   00000024   0x.... 0x....      BL       Term_Set_Display_Attribute_Mode
    274          			xSemaphoreGive(PromptSem);
   \   00000028   0x2300             MOVS     R3,#+0
   \   0000002A   0x461A             MOV      R2,R3
   \   0000002C   0x4611             MOV      R1,R2
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0xE8BD 0x4010      POP      {R4,LR}
   \   00000034   0x.... 0x....      B.W      xQueueGenericSend
    275          		}
    276          	}
    277          }
   \                     ??prompt_0: (+1)
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
    278          
    279          

   \                                 In section .text, align 2, keep-with-next
    280          void DisplayLogo(void)
    281          {
   \                     DisplayLogo: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    282          	memcpy((char *)prompt_buffer,(char *)PROMPT_NAME,sizeof(strlen(PROMPT_NAME)));
   \   00000002   0x2204             MOVS     R2,#+4
   \   00000004   0x.... 0x....      ADR.W    R1,?_70
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable104_10
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy
    283          	printd("\nloop %s V%d.%d %s\nBuild: %s %s\n\n",PRODUCT_TYPE,VERSION_NUM/10,VERSION_NUM%10,HW_NAME ,__DATE__, __TIME__);
   \   00000010   0x.... 0x....      ADR.W    R0,?_75
   \   00000014   0x9002             STR      R0,[SP, #+8]
   \   00000016   0x.... 0x....      ADR.W    R0,?_74
   \   0000001A   0x9001             STR      R0,[SP, #+4]
   \   0000001C   0x.... 0x....      ADR.W    R0,?_73
   \   00000020   0x9000             STR      R0,[SP, #+0]
   \   00000022   0x2301             MOVS     R3,#+1
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0x....             ADR.N    R1,??DataTable103  ;; "OBD"
   \   00000028   0x.... 0x....      ADR.W    R0,?_71
   \   0000002C   0x.... 0x....      BL       printd
    284          	printd("OBDPro]");
   \   00000030   0x.... 0x....      ADR.W    R0,?_69
   \   00000034   0xE8BD 0x400E      POP      {R1-R3,LR}
   \   00000038   0x....             B.N      printd
    285          }
    286          
    287          

   \                                 In section .text, align 2, keep-with-next
    288          void MsgCommand(int ret)
    289          {
    290          	switch(ret){
   \                     MsgCommand: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD009             BEQ.N    ??MsgCommand_0
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xD004             BEQ.N    ??MsgCommand_1
   \   00000008   0x28C8             CMP      R0,#+200
   \   0000000A   0xD00B             BEQ.N    ??MsgCommand_2
   \   0000000C   0x28CA             CMP      R0,#+202
   \   0000000E   0xD006             BEQ.N    ??MsgCommand_3
   \   00000010   0x4770             BX       LR
    291          	case FATAL:
    292          		printk("\n\n Fatal error check system .. \n\n");
   \                     ??MsgCommand_1: (+1)
   \   00000012   0x.... 0x....      ADR.W    R0,?_76
   \   00000016   0x....             B.N      printk
    293          		break;
    294          	case OK_END:
    295          		printk("\n\n Ok..  \n\n");
   \                     ??MsgCommand_0: (+1)
   \   00000018   0x.... 0x....      ADR.W    R0,?_77
   \   0000001C   0x....             B.N      printk
    296          		break;
    297          	case INV_PRM:
    298          		printk("\n\n Invalid parameter \n\n");
   \                     ??MsgCommand_3: (+1)
   \   0000001E   0x.... 0x....      ADR.W    R0,?_78
   \   00000022   0x....             B.N      printk
    299          		break;
    300          	case INV_CMD:
    301          		printk("\n\n Command not found.. \n\n");
   \                     ??MsgCommand_2: (+1)
   \   00000024   0x.... 0x....      ADR.W    R0,?_79
   \   00000028   0x....             B.N      printk
    302          		break;
    303          	case NO_DISPLAY:
    304          		break;
    305          	
    306          	}
    307          }
    308          
    309          
    310          // 문자열을 받아서 명령리스트에서 찾아내어 함수번호를 반환한다. 없다면 에러문자 반환.

   \                                 In section .text, align 2, keep-with-next
    311          int find_command(char *cmd)
    312          {
   \                     find_command: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    313          	int i,ret=-1;
    314          
    315          	for(i=0;i<COMMAND_CNT-1;i++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE000             B.N      ??find_command_0
   \                     ??find_command_1: (+1)
   \   00000008   0x1C6D             ADDS     R5,R5,#+1
   \                     ??find_command_0: (+1)
   \   0000000A   0x2D22             CMP      R5,#+34
   \   0000000C   0xD20B             BCS.N    ??find_command_2
    316          	{
    317          		ret = (INT16S)strcmp(commands[i].cmd_name, cmd);	 
   \   0000000E   0x4621             MOV      R1,R4
   \   00000010   0x.... 0x....      ADR.W    R0,commands
   \   00000014   0x012A             LSLS     R2,R5,#+4
   \   00000016   0x5880             LDR      R0,[R0, R2]
   \   00000018   0x.... 0x....      BL       strcmp
   \   0000001C   0xB200             SXTH     R0,R0
    318          	
    319          		if (!ret)
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1F2             BNE.N    ??find_command_1
    320          			return i;
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}
    321          	}
    322          	return -1;
   \                     ??find_command_2: (+1)
   \   00000026   0xF04F 0x30FF      MOV      R0,#-1
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    323          }
    324          
    325          
    326          // 명령을 분석한후 해당 함수를 실행시킨다.

   \                                 In section .text, align 2, keep-with-next
    327          void cmd_confirm_run(void)		
    328          {
   \                     cmd_confirm_run: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    329          	int cmd_number = -1,ret = -1;
   \   00000002   0xF04F 0x34FF      MOV      R4,#-1
    330          
    331          		cmd_number = find_command( argument[0] );
   \   00000006   0x....             LDR.N    R5,??DataTable104_4
   \   00000008   0x6AE8             LDR      R0,[R5, #+44]
   \   0000000A   0x.... 0x....      BL       find_command
    332          		
    333          		if ( cmd_number < 0 ) {
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD40D             BMI.N    ??cmd_confirm_run_0
    334          			ret = INV_CMD;
    335          		}
    336          		else if ( commands[cmd_number].mode & current_mode){// 명령이 실행될수있는 모드인가 확인하고 그명령실행. (디랙토리)
   \   00000012   0x.... 0x....      ADR.W    R1,commands
   \   00000016   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   0000001A   0x7A01             LDRB     R1,[R0, #+8]
   \   0000001C   0x782A             LDRB     R2,[R5, #+0]
   \   0000001E   0x4211             TST      R1,R2
   \   00000020   0xD005             BEQ.N    ??cmd_confirm_run_0
    337                      if ( commands[cmd_number].cmd_func != NULL ){
   \   00000022   0x6840             LDR      R0,[R0, #+4]
   \   00000024   0x0001             MOVS     R1,R0
   \   00000026   0xD003             BEQ.N    ??cmd_confirm_run_1
    338                          ret=(*(commands[cmd_number].cmd_func))();
   \   00000028   0x4780             BLX      R0
   \   0000002A   0x4604             MOV      R4,R0
   \   0000002C   0xE000             B.N      ??cmd_confirm_run_1
    339                      }
    340          		}
    341          		else ret = INV_CMD;
   \                     ??cmd_confirm_run_0: (+1)
   \   0000002E   0x24C8             MOVS     R4,#+200
    342          
    343          	MsgCommand(ret);
   \                     ??cmd_confirm_run_1: (+1)
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000036   0x....             B.N      MsgCommand
    344          }
    345          
    346          
    347          // 함수 리스트를 출력한다.

   \                                 In section .text, align 2, keep-with-next
    348          INT16U current_fuction_list(void)
    349          {
   \                     current_fuction_list: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    350          	INT16U i;
    351          
    352          	printk((char *)fls);
   \   00000002   0x.... 0x....      ADR.W    R0,fls
   \   00000006   0x.... 0x....      BL       printk
    353          
    354          	for (i=0;i<COMMAND_CNT;i++){
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0xE01B             B.N      ??current_fuction_list_0
    355          		if ( commands[i].mode & current_mode){
   \                     ??current_fuction_list_1: (+1)
   \   0000000E   0x.... 0x....      ADR.W    R0,commands
   \   00000012   0xEB10 0x1504      ADDS     R5,R0,R4, LSL #+4
   \   00000016   0x7A28             LDRB     R0,[R5, #+8]
   \   00000018   0x....             LDR.N    R1,??DataTable104_4
   \   0000001A   0x7809             LDRB     R1,[R1, #+0]
   \   0000001C   0x4208             TST      R0,R1
   \   0000001E   0xD011             BEQ.N    ??current_fuction_list_2
    356          			printk("\t");
   \   00000020   0x....             ADR.N    R0,??DataTable104  ;; "\t"
   \   00000022   0x.... 0x....      BL       printk
    357          			printk((char *)commands[i].cmd_name);
   \   00000026   0x6828             LDR      R0,[R5, #+0]
   \   00000028   0x.... 0x....      BL       printk
    358          						
    359          			if ( commands[i].cmd_help != 0 ){
   \   0000002C   0x68ED             LDR      R5,[R5, #+12]
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD005             BEQ.N    ??current_fuction_list_3
    360          				printk("\t:\t");
   \   00000032   0x....             ADR.N    R0,??DataTable104_1  ;; "\t:\t"
   \   00000034   0x.... 0x....      BL       printk
    361          				printk((char *)commands[i].cmd_help);
   \   00000038   0x4628             MOV      R0,R5
   \   0000003A   0x.... 0x....      BL       printk
    362          			}
    363          			printk("\n");
   \                     ??current_fuction_list_3: (+1)
   \   0000003E   0x....             ADR.N    R0,??DataTable104_2  ;; "\n"
   \   00000040   0x.... 0x....      BL       printk
    364          		}
    365          	}
   \                     ??current_fuction_list_2: (+1)
   \   00000044   0x1C64             ADDS     R4,R4,#+1
   \                     ??current_fuction_list_0: (+1)
   \   00000046   0x2C23             CMP      R4,#+35
   \   00000048   0xD3E1             BCC.N    ??current_fuction_list_1
    366          	printk((char *)fle);
   \   0000004A   0x.... 0x....      ADR.W    R0,fle
   \   0000004E   0x.... 0x....      BL       printk
    367          	
    368          	return NO_DISPLAY;
   \   00000052   0x20C9             MOVS     R0,#+201
   \   00000054   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    369          }
    370          
    371          
    372          // 입력받은 한 줄을 명령과 argument 1,2,3... 으로 구별함. argument count로 리턴.

   \                                 In section .text, align 2, keep-with-next
    373          INT32U parsing_command( char *command )
    374          {
   \                     parsing_command: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
    375          	INT32U i=0,j=0;
   \   00000006   0xF04F 0x0800      MOV      R8,#+0
    376          	INT32U GetArgCount = 0;
   \   0000000A   0x4646             MOV      R6,R8
    377          
    378          	argument[j++]=&command[0];	// command's address save
   \   0000000C   0x....             LDR.N    R5,??DataTable104_4
   \   0000000E   0x62EC             STR      R4,[R5, #+44]
   \   00000010   0x2701             MOVS     R7,#+1
    379          											
    380          	/* for command stack */
    381          	memcpy(command_stack[cmd_cnt++],command,COMMAND_MAX);
   \   00000012   0xF8D5 0x9024      LDR      R9,[R5, #+36]
   \   00000016   0x2220             MOVS     R2,#+32
   \   00000018   0x4621             MOV      R1,R4
   \   0000001A   0x....             LDR.N    R0,??DataTable104_11
   \   0000001C   0xEB00 0x1049      ADD      R0,R0,R9, LSL #+5
   \   00000020   0x.... 0x....      BL       __aeabi_memcpy
    382          	cmd_cnt &= COMMAND_STACK_MAXMASK;
   \   00000024   0xF109 0x0001      ADD      R0,R9,#+1
   \   00000028   0xF000 0x0003      AND      R0,R0,#0x3
   \   0000002C   0x6268             STR      R0,[R5, #+36]
   \   0000002E   0xE010             B.N      ??parsing_command_0
    383          
    384          	/* argument devide */
    385          	while( command[i++] != '\0' ){
    386          		if ( (command[i]==' ') && (command[i+1]!=' ') && (command[i+1]!=0) ){
   \                     ??parsing_command_1: (+1)
   \   00000030   0xF814 0x0008      LDRB     R0,[R4, R8]
   \   00000034   0x2820             CMP      R0,#+32
   \   00000036   0xD10C             BNE.N    ??parsing_command_0
   \   00000038   0xEB04 0x0008      ADD      R0,R4,R8
   \   0000003C   0x7841             LDRB     R1,[R0, #+1]
   \   0000003E   0x2920             CMP      R1,#+32
   \   00000040   0xD007             BEQ.N    ??parsing_command_0
   \   00000042   0x2900             CMP      R1,#+0
   \   00000044   0xD005             BEQ.N    ??parsing_command_0
    387          			GetArgCount ++;		// arg counting..
   \   00000046   0x1C76             ADDS     R6,R6,#+1
    388          			argument[j++] = &command[i+1];
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0xEB05 0x0187      ADD      R1,R5,R7, LSL #+2
   \   0000004E   0x62C8             STR      R0,[R1, #+44]
   \   00000050   0x1C7F             ADDS     R7,R7,#+1
    389          		}
    390          	}
   \                     ??parsing_command_0: (+1)
   \   00000052   0x4640             MOV      R0,R8
   \   00000054   0xF100 0x0801      ADD      R8,R0,#+1
   \   00000058   0x5C20             LDRB     R0,[R4, R0]
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD1E8             BNE.N    ??parsing_command_1
    391          
    392          
    393          	for(i=1;i<j;i++)
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x2200             MOVS     R2,#+0
   \   00000062   0xE005             B.N      ??parsing_command_2
    394          		*(argument[i]-1) = '\0' ;	//Ending charactor for printk display of each argument.
   \                     ??parsing_command_3: (+1)
   \   00000064   0xEB05 0x0180      ADD      R1,R5,R0, LSL #+2
   \   00000068   0x6AC9             LDR      R1,[R1, #+44]
   \   0000006A   0xF801 0x2C01      STRB     R2,[R1, #-1]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \                     ??parsing_command_2: (+1)
   \   00000070   0x42B8             CMP      R0,R7
   \   00000072   0xD3F7             BCC.N    ??parsing_command_3
    395          	
    396          	return GetArgCount;
   \   00000074   0x4630             MOV      R0,R6
   \   00000076   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    397          
    398          }
    399          
    400          
    401          static char command_line[COMMAND_MAX]={0};

   \                                 In section .text, align 2, keep-with-next
    402          char uart_console(void)	// must be in while loop!
    403          {
   \                     uart_console: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    404          	static INT32U line_ptr=0;
    405          	static INT8U esc_mode=0;
    406          	
    407          	INT8U err;
    408          	char data=0;
    409          
    410          	err = FALSE;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000008   0x....             LDR.N    R4,??DataTable104_4
   \   0000000A   0xE002             B.N      ??uart_console_0
    411          
    412          	while( 1 ){
    413          
    414          		data = CommGetChar(Console_Port,10, &err);
    415          
    416          		if ( err == COMM_NO_ERR ){
    417          
    418          			switch (data){
    419          
    420          			case 0x1b:
    421          				esc_mode++;
   \                     ??uart_console_1: (+1)
   \   0000000C   0x7860             LDRB     R0,[R4, #+1]
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0x7060             STRB     R0,[R4, #+1]
    422          				break;
   \                     ??uart_console_0: (+1)
   \   00000012   0x466A             MOV      R2,SP
   \   00000014   0x210A             MOVS     R1,#+10
   \   00000016   0x6AA0             LDR      R0,[R4, #+40]
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0x.... 0x....      BL       CommGetChar
   \   0000001E   0x4605             MOV      R5,R0
   \   00000020   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xF040 0x80AF      BNE.W    ??uart_console_2
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x4601             MOV      R1,R0
   \   0000002E   0x2908             CMP      R1,#+8
   \   00000030   0xD027             BEQ.N    ??uart_console_3
   \   00000032   0x290A             CMP      R1,#+10
   \   00000034   0xD00B             BEQ.N    ??uart_console_4
   \   00000036   0x290D             CMP      R1,#+13
   \   00000038   0xD009             BEQ.N    ??uart_console_4
   \   0000003A   0x291B             CMP      R1,#+27
   \   0000003C   0xD0E6             BEQ.N    ??uart_console_1
   \   0000003E   0x295B             CMP      R1,#+91
   \   00000040   0xD12F             BNE.N    ??uart_console_5
    423          			case '[':
    424          				if (esc_mode) 
   \   00000042   0x7860             LDRB     R0,[R4, #+1]
   \   00000044   0x0001             MOVS     R1,R0
   \   00000046   0xD0E4             BEQ.N    ??uart_console_0
    425          					esc_mode++;
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x7060             STRB     R0,[R4, #+1]
   \   0000004C   0xE7E1             B.N      ??uart_console_0
    426          				break;
    427          
    428          			case '\r':  // Enter Key
    429          			case '\n':
    430          				if (line_ptr){
   \                     ??uart_console_4: (+1)
   \   0000004E   0x6D21             LDR      R1,[R4, #+80]
   \   00000050   0x2900             CMP      R1,#+0
   \   00000052   0xD009             BEQ.N    ??uart_console_6
    431          					command_line[line_ptr]='\0';
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x4421             ADD      R1,R4,R1
   \   00000058   0x7108             STRB     R0,[R1, #+4]
    432          					line_ptr=0;
   \   0000005A   0x6520             STR      R0,[R4, #+80]
    433          					ulArgumentCount = parsing_command(command_line);
   \   0000005C   0x1D20             ADDS     R0,R4,#+4
   \   0000005E   0x.... 0x....      BL       parsing_command
   \   00000062   0x64E0             STR      R0,[R4, #+76]
    434          					
    435          					cmd_confirm_run();
   \   00000064   0x.... 0x....      BL       cmd_confirm_run
    436          				}
    437          
    438          				//printk("\n");
    439          				put_ch_console('\r');
   \                     ??uart_console_6: (+1)
   \   00000068   0x200D             MOVS     R0,#+13
   \   0000006A   0x.... 0x....      BL       put_ch_console
    440          				put_ch_console('\n');
   \   0000006E   0x200A             MOVS     R0,#+10
   \   00000070   0x.... 0x....      BL       put_ch_console
    441          				
    442          				prompt(prompt_buffer);
   \   00000074   0xF104 0x0054      ADD      R0,R4,#+84
   \   00000078   0x.... 0x....      BL       prompt
    443          
    444          				esc_mode = 0;
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x7060             STRB     R0,[R4, #+1]
    445          				break;
   \   00000080   0xE7C7             B.N      ??uart_console_0
    446          
    447          			case BS: // Back Space
    448          				if (line_ptr){
   \                     ??uart_console_3: (+1)
   \   00000082   0x6D20             LDR      R0,[R4, #+80]
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD07C             BEQ.N    ??uart_console_7
    449          					put_ch_console(BS);
   \   00000088   0x2008             MOVS     R0,#+8
   \   0000008A   0x.... 0x....      BL       put_ch_console
    450          					put_ch_console(' ');
   \   0000008E   0x2020             MOVS     R0,#+32
   \   00000090   0x.... 0x....      BL       put_ch_console
    451          					put_ch_console(BS);
   \   00000094   0x2008             MOVS     R0,#+8
   \   00000096   0x.... 0x....      BL       put_ch_console
    452          					line_ptr--;
   \   0000009A   0x6D20             LDR      R0,[R4, #+80]
   \   0000009C   0x1E40             SUBS     R0,R0,#+1
   \   0000009E   0x6520             STR      R0,[R4, #+80]
   \   000000A0   0xE06F             B.N      ??uart_console_7
    453          				}
    454          				esc_mode = 0;
    455          				break;
    456          
    457          			default:
    458          				if ( line_ptr >= COMMAND_MAX ){	// 한줄이 길어서 버퍼용량까지 진행되면 제자리걸음한다.
   \                     ??uart_console_5: (+1)
   \   000000A2   0x6D21             LDR      R1,[R4, #+80]
   \   000000A4   0x2920             CMP      R1,#+32
   \   000000A6   0xD30D             BCC.N    ??uart_console_8
    459          					line_ptr--;
   \   000000A8   0x1E48             SUBS     R0,R1,#+1
   \   000000AA   0x6520             STR      R0,[R4, #+80]
    460          					put_ch_console(BS);
   \   000000AC   0x2008             MOVS     R0,#+8
   \   000000AE   0x.... 0x....      BL       put_ch_console
    461          					put_ch_console(data);				
   \   000000B2   0x4628             MOV      R0,R5
   \   000000B4   0x.... 0x....      BL       put_ch_console
    462          					command_line[line_ptr++]=data;
   \   000000B8   0x6D20             LDR      R0,[R4, #+80]
   \   000000BA   0x1821             ADDS     R1,R4,R0
   \   000000BC   0x710D             STRB     R5,[R1, #+4]
   \   000000BE   0x1C40             ADDS     R0,R0,#+1
   \   000000C0   0x6520             STR      R0,[R4, #+80]
   \   000000C2   0xE05E             B.N      ??uart_console_7
    463          				}
    464          				else {
    465          					
    466          					if ( esc_mode ) { // 표준 아스키값이아닌 확장아스키코드 즉 키보드의 화살표같은 특수키가들어왔을때 
   \                     ??uart_console_8: (+1)
   \   000000C4   0x7861             LDRB     R1,[R4, #+1]
   \   000000C6   0x2900             CMP      R1,#+0
   \   000000C8   0xD054             BEQ.N    ??uart_console_9
    467          						switch(data){
   \   000000CA   0x2841             CMP      R0,#+65
   \   000000CC   0xD002             BEQ.N    ??uart_console_10
   \   000000CE   0x2842             CMP      R0,#+66
   \   000000D0   0xD028             BEQ.N    ??uart_console_11
   \   000000D2   0xE056             B.N      ??uart_console_7
    468          							
    469          						case 'A':		// Up Key
    470          							if(command_stack[((cmd_cnt-1)&COMMAND_STACK_MAXMASK)][0]!=0){
   \                     ??uart_console_10: (+1)
   \   000000D4   0x....             LDR.N    R5,??DataTable104_11
   \   000000D6   0x6A60             LDR      R0,[R4, #+36]
   \   000000D8   0x1E40             SUBS     R0,R0,#+1
   \   000000DA   0xF000 0x0003      AND      R0,R0,#0x3
   \   000000DE   0x0140             LSLS     R0,R0,#+5
   \   000000E0   0x5C28             LDRB     R0,[R5, R0]
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD04D             BEQ.N    ??uart_console_7
    471          
    472          								// 지금 그 라인 지우고 
    473          								printk("%s\r",eLine);
   \   000000E6   0x.... 0x....      ADR.W    R1,eLine
   \   000000EA   0x....             ADR.N    R0,??DataTable104_3  ;; "%s\r"
   \   000000EC   0x.... 0x....      BL       printk
    474          
    475          								// 프롬프트 뿌리고 
    476          								prompt(prompt_buffer);
   \   000000F0   0xF104 0x0054      ADD      R0,R4,#+84
   \   000000F4   0x.... 0x....      BL       prompt
    477          
    478          								// 그동안 저장해뒀던거 하나 뒤엣것 뿌려준다.
    479          								cmd_cnt--;
    480          								cmd_cnt &= COMMAND_STACK_MAXMASK;
   \   000000F8   0x6A60             LDR      R0,[R4, #+36]
   \   000000FA   0x1E40             SUBS     R0,R0,#+1
   \   000000FC   0xF000 0x0003      AND      R0,R0,#0x3
   \   00000100   0x6260             STR      R0,[R4, #+36]
    481          								printk( (char *)command_stack[ cmd_cnt ]);
   \   00000102   0xEB05 0x1040      ADD      R0,R5,R0, LSL #+5
   \   00000106   0x.... 0x....      BL       printk
   \   0000010A   0x6A60             LDR      R0,[R4, #+36]
   \   0000010C   0xEB05 0x1540      ADD      R5,R5,R0, LSL #+5
   \   00000110   0x2220             MOVS     R2,#+32
   \   00000112   0x4629             MOV      R1,R5
   \   00000114   0x1D20             ADDS     R0,R4,#+4
   \   00000116   0x.... 0x....      BL       __aeabi_memcpy
    482          
    483          								// 뿌려주기만하면안되고 지금까지 사람이 입력했었다고 해야한다. 
    484          								memcpy(command_line ,command_stack[cmd_cnt],COMMAND_MAX);
    485          
    486          								// 라인포인터도 이동시켜놓고 
    487          								line_ptr = strlen((char *)command_stack[cmd_cnt]);
   \   0000011A   0x4628             MOV      R0,R5
   \   0000011C   0x.... 0x....      BL       strlen
   \   00000120   0x6520             STR      R0,[R4, #+80]
   \   00000122   0xE02E             B.N      ??uart_console_7
    488          
    489          								// 이렇게해주면 내가 전에첬었던 명령어를 다시 친 격이 된다. 
    490          							}
    491          							break;
    492          							
    493          						case 'B':		// Down Key
    494          							if(command_stack[((cmd_cnt+1)&COMMAND_STACK_MAXMASK)][0]!=0){
   \                     ??uart_console_11: (+1)
   \   00000124   0x....             LDR.N    R5,??DataTable104_11
   \   00000126   0x6A60             LDR      R0,[R4, #+36]
   \   00000128   0x1C40             ADDS     R0,R0,#+1
   \   0000012A   0xF000 0x0003      AND      R0,R0,#0x3
   \   0000012E   0x0140             LSLS     R0,R0,#+5
   \   00000130   0x5C28             LDRB     R0,[R5, R0]
   \   00000132   0x2800             CMP      R0,#+0
   \   00000134   0xD025             BEQ.N    ??uart_console_7
    495          								printk("%s\r",eLine);
   \   00000136   0x.... 0x....      ADR.W    R1,eLine
   \   0000013A   0x....             ADR.N    R0,??DataTable104_3  ;; "%s\r"
   \   0000013C   0x.... 0x....      BL       printk
    496          								prompt(prompt_buffer);
   \   00000140   0xF104 0x0054      ADD      R0,R4,#+84
   \   00000144   0x.... 0x....      BL       prompt
    497          								cmd_cnt++;
    498          								cmd_cnt&=COMMAND_STACK_MAXMASK;
   \   00000148   0x6A60             LDR      R0,[R4, #+36]
   \   0000014A   0x1C40             ADDS     R0,R0,#+1
   \   0000014C   0xF000 0x0003      AND      R0,R0,#0x3
   \   00000150   0x6260             STR      R0,[R4, #+36]
    499          								printk((char *)command_stack[cmd_cnt]);
   \   00000152   0xEB05 0x1040      ADD      R0,R5,R0, LSL #+5
   \   00000156   0x.... 0x....      BL       printk
   \   0000015A   0x6A60             LDR      R0,[R4, #+36]
   \   0000015C   0xEB05 0x1540      ADD      R5,R5,R0, LSL #+5
   \   00000160   0x2220             MOVS     R2,#+32
   \   00000162   0x4629             MOV      R1,R5
   \   00000164   0x1D20             ADDS     R0,R4,#+4
   \   00000166   0x.... 0x....      BL       __aeabi_memcpy
    500          								memcpy(command_line,command_stack[cmd_cnt],COMMAND_MAX);
    501          								line_ptr = strlen((const char *)command_stack[cmd_cnt]);
   \   0000016A   0x4628             MOV      R0,R5
   \   0000016C   0x.... 0x....      BL       strlen
   \   00000170   0x6520             STR      R0,[R4, #+80]
   \   00000172   0xE006             B.N      ??uart_console_7
    502          							}
    503          
    504          							break;
    505          
    506          						case 'C':		// Left Key
    507          							break;
    508          							
    509          						case 'D':		// Right Key
    510          							break;
    511          						}
    512          					}
    513          					else {
    514          						put_ch_console(data);
   \                     ??uart_console_9: (+1)
   \   00000174   0x.... 0x....      BL       put_ch_console
    515          						command_line[line_ptr++]=data;
   \   00000178   0x6D20             LDR      R0,[R4, #+80]
   \   0000017A   0x1821             ADDS     R1,R4,R0
   \   0000017C   0x710D             STRB     R5,[R1, #+4]
   \   0000017E   0x1C40             ADDS     R0,R0,#+1
   \   00000180   0x6520             STR      R0,[R4, #+80]
    516          					}
    517          				}		
    518          				esc_mode = 0;
   \                     ??uart_console_7: (+1)
   \   00000182   0x2000             MOVS     R0,#+0
   \   00000184   0x7060             STRB     R0,[R4, #+1]
    519          				break;
   \   00000186   0xE744             B.N      ??uart_console_0
    520          			}
    521          		}
    522          		else
    523          			break;
    524          	}
    525          	return 0;
   \                     ??uart_console_2: (+1)
   \   00000188   0x2000             MOVS     R0,#+0
   \   0000018A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    526          }

   \                                 In section .data, align 4
   \                     current_mode:
   \   00000000   0x01               DC8 1
   \   00000001   0x00               DC8 0
   \   00000002   0x00 0x00          DC8 0, 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000001B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000024   0x00000000         DC32 0
   \   00000028   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   0000002C   0x00000000         DC32 0H
   \   00000030   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000040   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000004C   0x00000000         DC32 0
   \   00000050   0x00000000         DC32 0
   \   00000054   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000006B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    527          
    528          
    529          //********************************************************************************************* CLI Task
    530          

   \                                 In section .text, align 2, keep-with-next
    531          void Task_CLI(void * pvParameters)
    532          {
   \                     Task_CLI: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    533          	sysinfo_t *s = (sysinfo_t *)pvParameters 	;
    534          
    535          	PromptSem = xSemaphoreCreateMutex();
   \   00000004   0x....             LDR.N    R5,??DataTable104_7
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       xQueueCreateMutex
   \   0000000C   0x6028             STR      R0,[R5, #+0]
    536          	PrintkSem = xSemaphoreCreateMutex();
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       xQueueCreateMutex
   \   00000014   0x6068             STR      R0,[R5, #+4]
    537          	BSP_UART1RX_IntEnable(ENABLE);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       BSP_UART1RX_IntEnable
    538          	for(;;)
    539          	{
    540          		s->twatchCliFlag = 1;
   \                     ??Task_CLI_0: (+1)
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x70E0             STRB     R0,[R4, #+3]
    541          		//uart_console();
    542          		//ddd_task();
    543          		vTaskDelay(10);
   \   00000020   0x200A             MOVS     R0,#+10
   \   00000022   0x.... 0x....      BL       vTaskDelay
    544          		
    545          		s->twatchCliFlag = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x70E0             STRB     R0,[R4, #+3]
   \   0000002A   0xE7F7             B.N      ??Task_CLI_0
    546          	}
    547          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_1:
   \   00000000   0x25 0x66          DC8      0x25, 0x66, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103:
   \   00000000   0x4F 0x42          DC8      "OBD"
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104:
   \   00000000   0x09 0x00          DC8      "\t",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_1:
   \   00000000   0x09 0x3A          DC8      "\t:\t"
   \              0x09 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_2:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_3:
   \   00000000   0x25 0x73          DC8      "%s\r"
   \              0x0D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_4:
   \   00000000   0x........         DC32     current_mode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_5:
   \   00000000   0x........         DC32     dprint_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_6:
   \   00000000   0x........         DC32     pUART_BASE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_7:
   \   00000000   0x........         DC32     PromptSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_8:
   \   00000000   0x........         DC32     kprint_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_9:
   \   00000000   0x40004400         DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_10:
   \   00000000   0x........         DC32     current_mode+0x54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_11:
   \   00000000   0x........         DC32     command_stack

   \                                 In section .text, align 4, keep-with-next
   \                     ?_65:
   \   00000000   0x30 0x78          DC8 "0x%x"
   \              0x25 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_68:
   \   00000000   0x69 0x6E          DC8 "in cli = %s[%.8f]\012"
   \              0x20 0x63    
   \              0x6C 0x69    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x73 0x5B    
   \              0x25 0x2E    
   \              0x38 0x66    
   \              0x5D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_69:
   \   00000000   0x4F 0x42          DC8 "OBDPro]"
   \              0x44 0x50    
   \              0x72 0x6F    
   \              0x5D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_70:
   \   00000000   0x53 0x54          DC8 "STMicroelectronics"
   \              0x4D 0x69    
   \              0x63 0x72    
   \              0x6F 0x65    
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x72 0x6F    
   \              0x6E 0x69    
   \              0x63 0x73    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_71:
   \   00000000   0x0A 0x6C          DC8 "\012loop %s V%d.%d %s\012Build: %s %s\012\012"
   \              0x6F 0x6F    
   \              0x70 0x20    
   \              0x25 0x73    
   \              0x20 0x56    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x20    
   \              0x25 0x73    
   \              0x0A 0x42    
   \              0x75 0x69    
   \              0x6C 0x64    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x20 0x25    
   \              0x73 0x0A    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_73:
   \   00000000   0x53 0x54          DC8 "STM32F207ZET6"
   \              0x4D 0x33    
   \              0x32 0x46    
   \              0x32 0x30    
   \              0x37 0x5A    
   \              0x45 0x54    
   \              0x36 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_74:
   \   00000000   0x44 0x65          DC8 "Dec 18 2023"
   \              0x63 0x20    
   \              0x31 0x38    
   \              0x20 0x32    
   \              0x30 0x32    
   \              0x33 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_75:
   \   00000000   0x31 0x37          DC8 "17:37:03"
   \              0x3A 0x33    
   \              0x37 0x3A    
   \              0x30 0x33    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_76:
   \   00000000   0x0A 0x0A          DC8 "\012\012 Fatal error check system .. \012\012"
   \              0x20 0x46    
   \              0x61 0x74    
   \              0x61 0x6C    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x63    
   \              0x68 0x65    
   \              0x63 0x6B    
   \              0x20 0x73    
   \              0x79 0x73    
   \              0x74 0x65    
   \              0x6D 0x20    
   \              0x2E 0x2E    
   \              0x20 0x0A    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_77:
   \   00000000   0x0A 0x0A          DC8 "\012\012 Ok..  \012\012"
   \              0x20 0x4F    
   \              0x6B 0x2E    
   \              0x2E 0x20    
   \              0x20 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_78:
   \   00000000   0x0A 0x0A          DC8 "\012\012 Invalid parameter \012\012"
   \              0x20 0x49    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_79:
   \   00000000   0x0A 0x0A          DC8 "\012\012 Command not found.. \012\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x66    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x20 0x0A    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x6C 0x73          DC8 "ls"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 1, keep-with-next
   \                     ?_1:
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x68 0x65          DC8 "help"
   \              0x6C 0x70    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x48 0x45          DC8 "HELP list"
   \              0x4C 0x50    
   \              0x20 0x6C    
   \              0x69 0x73    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x72 0x65          DC8 "reset"
   \              0x73 0x65    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x72 0x6F          DC8 "rolback"
   \              0x6C 0x62    
   \              0x61 0x63    
   \              0x6B 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x72 0x6F          DC8 "rolup"
   \              0x6C 0x75    
   \              0x70 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0xC3 0xD6          DC8 "\303\326\301\276 \306\337\277\376\276\356 \267\316\265\345"
   \              0xC1 0xBE    
   \              0x20 0xC6    
   \              0xDF 0xBF    
   \              0xFE 0xBE    
   \              0xEE 0x20    
   \              0xB7 0xCE    
   \              0xB5 0xE5    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x74 0x6C          DC8 "tlist"
   \              0x69 0x73    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x73 0x66          DC8 "sfmap"
   \              0x6D 0x61    
   \              0x70 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x66 0x6C          DC8 "flash map display"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x6D 0x61    
   \              0x70 0x20    
   \              0x64 0x69    
   \              0x73 0x70    
   \              0x6C 0x61    
   \              0x79 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x73 0x66          DC8 "sfmd"
   \              0x6D 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x73 0x66          DC8 "sfmd [addr] memory read(4K)"
   \              0x6D 0x64    
   \              0x20 0x5B    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x5D 0x20    
   \              0x6D 0x65    
   \              0x6D 0x6F    
   \              0x72 0x79    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x28    
   \              0x34 0x4B    
   \              0x29 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x73 0x66          DC8 "sfmod"
   \              0x6D 0x6F    
   \              0x64 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x73 0x66          DC8 "sfmod [addr][data] data modify"
   \              0x6D 0x6F    
   \              0x64 0x20    
   \              0x5B 0x61    
   \              0x64 0x64    
   \              0x72 0x5D    
   \              0x5B 0x64    
   \              0x61 0x74    
   \              0x61 0x5D    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x20    
   \              0x6D 0x6F    
   \              0x64 0x69    
   \              0x66 0x79    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x73 0x66          DC8 "sfse"
   \              0x73 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x73 0x66          DC8 "sfse [addr] sector erase(4K)"
   \              0x73 0x65    
   \              0x20 0x5B    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x5D 0x20    
   \              0x73 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x20 0x65    
   \              0x72 0x61    
   \              0x73 0x65    
   \              0x28 0x34    
   \              0x4B 0x29    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x73 0x66          DC8 "sfsa"
   \              0x73 0x61    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x65 0x72          DC8 "erase all(MCU Area)"
   \              0x61 0x73    
   \              0x65 0x20    
   \              0x61 0x6C    
   \              0x6C 0x28    
   \              0x4D 0x43    
   \              0x55 0x20    
   \              0x41 0x72    
   \              0x65 0x61    
   \              0x29 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x73 0x66          DC8 "sfce"
   \              0x63 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x62 0x75          DC8 "bulk erase all(64M)"
   \              0x6C 0x6B    
   \              0x20 0x65    
   \              0x72 0x61    
   \              0x73 0x65    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x28 0x36    
   \              0x34 0x4D    
   \              0x29 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x73 0x66          DC8 "sfid"
   \              0x69 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_22:
   \   00000000   0x66 0x6C          DC8 "flash id read"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x69 0x64    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_23:
   \   00000000   0x73 0x66          DC8 "sfw"
   \              0x77 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_24:
   \   00000000   0x73 0x66          DC8 "sfw [addr] [data] flash write 1 byte"
   \              0x77 0x20    
   \              0x5B 0x61    
   \              0x64 0x64    
   \              0x72 0x5D    
   \              0x20 0x5B    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x5D 0x20    
   \              0x66 0x6C    
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x31 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_25:
   \   00000000   0x73 0x66          DC8 "sfr"
   \              0x72 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_26:
   \   00000000   0x73 0x66          DC8 "sfr [addr] flash read 1 byte"
   \              0x72 0x20    
   \              0x5B 0x61    
   \              0x64 0x64    
   \              0x72 0x5D    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x31 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_27:
   \   00000000   0x73 0x66          DC8 "sfcrc"
   \              0x63 0x72    
   \              0x63 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_28:
   \   00000000   0x73 0x66          DC8 "sfcrc [0:MCU] flash crc cal"
   \              0x63 0x72    
   \              0x63 0x20    
   \              0x5B 0x30    
   \              0x3A 0x4D    
   \              0x43 0x55    
   \              0x5D 0x20    
   \              0x66 0x6C    
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x63 0x72    
   \              0x63 0x20    
   \              0x63 0x61    
   \              0x6C 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_29:
   \   00000000   0x66 0x73          DC8 "fsel"
   \              0x65 0x6C    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_30:
   \   00000000   0x66 0x73          DC8 "fsel [0:MCU] -> flash control select"
   \              0x65 0x6C    
   \              0x20 0x5B    
   \              0x30 0x3A    
   \              0x4D 0x43    
   \              0x55 0x5D    
   \              0x20 0x2D    
   \              0x3E 0x20    
   \              0x66 0x6C    
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x63 0x6F    
   \              0x6E 0x74    
   \              0x72 0x6F    
   \              0x6C 0x20    
   \              0x73 0x65    
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_31:
   \   00000000   0x69 0x74          DC8 "itest"
   \              0x65 0x73    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_32:
   \   00000000   0x69 0x74          DC8 "itest -> Init test"
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x2D 0x3E    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_33:
   \   00000000   0x62 0x75          DC8 "buzzer"
   \              0x7A 0x7A    
   \              0x65 0x72    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_34:
   \   00000000   0x62 0x75          DC8 "buzzer [ctrl] 0: off 1: on"
   \              0x7A 0x7A    
   \              0x65 0x72    
   \              0x20 0x5B    
   \              0x63 0x74    
   \              0x72 0x6C    
   \              0x5D 0x20    
   \              0x30 0x3A    
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x20 0x31    
   \              0x3A 0x20    
   \              0x6F 0x6E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_35:
   \   00000000   0x64 0x6F          DC8 "doc"
   \              0x63 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_36:
   \   00000000   0x64 0x6F          DC8 "doc ctrl] 0: off 1: on"
   \              0x63 0x20    
   \              0x63 0x74    
   \              0x72 0x6C    
   \              0x5D 0x20    
   \              0x30 0x3A    
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x20 0x31    
   \              0x3A 0x20    
   \              0x6F 0x6E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_37:
   \   00000000   0x72 0x73          DC8 "rset"
   \              0x65 0x74    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_38:
   \   00000000   0x72 0x73          DC8 "rset [yy mm dd hh mm ss wd] rtc set"
   \              0x65 0x74    
   \              0x20 0x5B    
   \              0x79 0x79    
   \              0x20 0x6D    
   \              0x6D 0x20    
   \              0x64 0x64    
   \              0x20 0x68    
   \              0x68 0x20    
   \              0x6D 0x6D    
   \              0x20 0x73    
   \              0x73 0x20    
   \              0x77 0x64    
   \              0x5D 0x20    
   \              0x72 0x74    
   \              0x63 0x20    
   \              0x73 0x65    
   \              0x74 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_39:
   \   00000000   0x72 0x67          DC8 "rget"
   \              0x65 0x74    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_40:
   \   00000000   0x72 0x67          DC8 "rget rtc read"
   \              0x65 0x74    
   \              0x20 0x72    
   \              0x74 0x63    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_41:
   \   00000000   0x62 0x73          DC8 "bswr"
   \              0x77 0x72    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_42:
   \   00000000   0x62 0x73          DC8 "bswr [data] backup ram write 16 byte"
   \              0x77 0x72    
   \              0x20 0x5B    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x5D 0x20    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x75 0x70    
   \              0x20 0x72    
   \              0x61 0x6D    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x31    
   \              0x36 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_43:
   \   00000000   0x62 0x73          DC8 "bsrd"
   \              0x72 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_44:
   \   00000000   0x62 0x73          DC8 "bsrd backup ram read 16 byte"
   \              0x72 0x64    
   \              0x20 0x62    
   \              0x61 0x63    
   \              0x6B 0x75    
   \              0x70 0x20    
   \              0x72 0x61    
   \              0x6D 0x20    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x20 0x31    
   \              0x36 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_45:
   \   00000000   0x72 0x6D          DC8 "rmon"
   \              0x6F 0x6E    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_46:
   \   00000000   0x72 0x6D          DC8 "rmon real time monitoring"
   \              0x6F 0x6E    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x6C 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x20 0x6D    
   \              0x6F 0x6E    
   \              0x69 0x74    
   \              0x6F 0x72    
   \              0x69 0x6E    
   \              0x67 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_47:
   \   00000000   0x73 0x64          DC8 "sdcard"
   \              0x63 0x61    
   \              0x72 0x64    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_48:
   \   00000000   0x73 0x64          DC8 "sdcard test file create"
   \              0x63 0x61    
   \              0x72 0x64    
   \              0x20 0x74    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x20 0x63    
   \              0x72 0x65    
   \              0x61 0x74    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_49:
   \   00000000   0x6E 0x61          DC8 "nandr"
   \              0x6E 0x64    
   \              0x72 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_50:
   \   00000000   0x6E 0x61          DC8 "nandr addr size (max 4k)"
   \              0x6E 0x64    
   \              0x72 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x28 0x6D    
   \              0x61 0x78    
   \              0x20 0x34    
   \              0x6B 0x29    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_51:
   \   00000000   0x6E 0x61          DC8 "nandb"
   \              0x6E 0x64    
   \              0x62 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_52:
   \   00000000   0x6E 0x61          DC8 "nandb bad block check"
   \              0x6E 0x64    
   \              0x62 0x20    
   \              0x62 0x61    
   \              0x64 0x20    
   \              0x62 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x63 0x68    
   \              0x65 0x63    
   \              0x6B 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_53:
   \   00000000   0x6E 0x61          DC8 "nandid"
   \              0x6E 0x64    
   \              0x69 0x64    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_54:
   \   00000000   0x6E 0x61          DC8 "nandid nand identifier"
   \              0x6E 0x64    
   \              0x69 0x64    
   \              0x20 0x6E    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x69 0x64    
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x65 0x72    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_55:
   \   00000000   0x6E 0x61          DC8 "nande"
   \              0x6E 0x64    
   \              0x65 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_56:
   \   00000000   0x6E 0x61          DC8 "nande address "
   \              0x6E 0x64    
   \              0x65 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_57:
   \   00000000   0x66 0x72          DC8 "fr"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_58:
   \   00000000   0x66 0x72          DC8 "fr [addr] [size] fram read"
   \              0x20 0x5B    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x5D 0x20    
   \              0x5B 0x73    
   \              0x69 0x7A    
   \              0x65 0x5D    
   \              0x20 0x66    
   \              0x72 0x61    
   \              0x6D 0x20    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_59:
   \   00000000   0x66 0x77          DC8 "fw"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_60:
   \   00000000   0x66 0x77          DC8 "fw [addr] [data] fram write 1 byte"
   \              0x20 0x5B    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x5D 0x20    
   \              0x5B 0x64    
   \              0x61 0x74    
   \              0x61 0x5D    
   \              0x20 0x66    
   \              0x72 0x61    
   \              0x6D 0x20    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x31 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_61:
   \   00000000   0x66 0x69          DC8 "finit"
   \              0x6E 0x69    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_62:
   \   00000000   0x66 0x69          DC8 "finit [pass] factory init"
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x5B 0x70    
   \              0x61 0x73    
   \              0x73 0x5D    
   \              0x20 0x66    
   \              0x61 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_63:
   \   00000000   0x63 0x69          DC8 "cinit"
   \              0x6E 0x69    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_64:
   \   00000000   0x63 0x69          DC8 "cinit [pass] calib default init"
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x5B 0x70    
   \              0x61 0x73    
   \              0x73 0x5D    
   \              0x20 0x63    
   \              0x61 0x6C    
   \              0x69 0x62    
   \              0x20 0x64    
   \              0x65 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_66:
   \   00000000   0x25 0x64          DC8 "%d"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_67:
   \   00000000   0x25 0x66          DC8 "%f"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_72:
   \   00000000   0x4F 0x42          DC8 "OBD"
   \              0x44 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_80:
   \   00000000   0x09 0x00          DC8 "\t"

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_81:
   \   00000000   0x09 0x3A          DC8 "\t:\t"
   \              0x09 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_82:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_83:
   \   00000000   0x25 0x73          DC8 "%s\015"
   \              0x0D 0x00    
    548          
    549          
    550          
    551          
    552          /*
    553          ********************* (C) COPYRIGHT 2014 Loop ***************END OF FILE*****************************
    554          */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Argument
       0   CLI_GetArgCnt
       0   CLI_SetConsolPort
         0   -> __aeabi_memset4
      16   DisplayLogo
        16   -> __aeabi_memcpy
         0   -> printd
        16   -> printd
       0   MsgCommand
         0   -> printk
      16   Task_CLI
        16   -> BSP_UART1RX_IntEnable
        16   -> vTaskDelay
        16   -> xQueueCreateMutex
       0   Term_Send
         0   -> put_ch_console
       8   Term_Set_Display_Attribute_Mode
         0   -> Term_Send
         8   -> Term_Send
      16   UART2_SendData
        16   -> USART_GetFlagStatus
         0   -> USART_SendData
      16   UART2_SendDataStr
        16   -> UART2_SendData
      32   UART2_print
        32   -> UART2_SendData
        32   -> vsprintf
      16   cmd_confirm_run
        16   -- Indirect call
         0   -> MsgCommand
        16   -> find_command
      64   comparison_float
        64   -> __aeabi_f2d
        64   -> __aeabi_memcpy
        64   -> __aeabi_memset4
        64   -> printk
        64   -> sscanf
        64   -> strlen
       8   comparison_num
         8   -> sscanf
      16   current_fuction_list
        16   -> printk
      16   dput_ch_console
        16   -> USART_GetFlagStatus
         0   -> USART_SendData
      16   find_command
        16   -> strcmp
      32   parsing_command
        32   -> __aeabi_memcpy
      32   printd
        32   -> dput_ch_console
        32   -> vsprintf
      32   printk
        32   -> put_ch_console
        32   -> vsprintf
        32   -> xQueueGenericReceive
        32   -> xQueueGenericSend
       8   prompt
         8   -> Term_Set_Display_Attribute_Mode
         8   -> printk
         8   -> xQueueGenericReceive
         0   -> xQueueGenericSend
       0   put_ch_console
         0   -> dput_ch_console
      16   uart_console
        16   -> CommGetChar
        16   -> __aeabi_memcpy
        16   -> cmd_confirm_run
        16   -> parsing_command
        16   -> printk
        16   -> prompt
        16   -> put_ch_console
        16   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable102
       4  ??DataTable102_1
       4  ??DataTable103
       4  ??DataTable104
       4  ??DataTable104_1
       4  ??DataTable104_10
       4  ??DataTable104_11
       4  ??DataTable104_2
       4  ??DataTable104_3
       4  ??DataTable104_4
       4  ??DataTable104_5
       4  ??DataTable104_6
       4  ??DataTable104_7
       4  ??DataTable104_8
       4  ??DataTable104_9
       4  ?_0
       1  ?_1
      20  ?_10
       8  ?_11
      28  ?_12
       8  ?_13
      32  ?_14
       8  ?_15
      32  ?_16
       8  ?_17
      20  ?_18
       8  ?_19
       8  ?_2
      20  ?_20
       8  ?_21
      16  ?_22
       4  ?_23
      40  ?_24
       4  ?_25
      32  ?_26
       8  ?_27
      28  ?_28
       8  ?_29
      12  ?_3
      40  ?_30
       8  ?_31
      20  ?_32
       8  ?_33
      28  ?_34
       4  ?_35
      24  ?_36
       8  ?_37
      36  ?_38
       8  ?_39
       8  ?_4
      16  ?_40
       8  ?_41
      40  ?_42
       8  ?_43
      32  ?_44
       8  ?_45
      28  ?_46
       8  ?_47
      24  ?_48
       8  ?_49
       8  ?_5
      28  ?_50
       8  ?_51
      24  ?_52
       8  ?_53
      24  ?_54
       8  ?_55
      16  ?_56
       4  ?_57
      28  ?_58
       4  ?_59
       8  ?_6
      36  ?_60
       8  ?_61
      28  ?_62
       8  ?_63
      32  ?_64
       8  ?_65
       4  ?_66
       4  ?_67
      20  ?_68
       8  ?_69
      20  ?_7
      20  ?_70
      36  ?_71
       4  ?_72
      16  ?_73
      12  ?_74
      12  ?_75
      36  ?_76
      12  ?_77
      24  ?_78
      28  ?_79
       8  ?_8
       2  ?_80
       4  ?_81
       2  ?_82
       4  ?_83
       8  ?_9
      12  Argument
       8  CLI_GetArgCnt
      20  CLI_SetConsolPort
      58  DisplayLogo
      42  MsgCommand
       8  PromptSem
          PrintkSem
      44  Task_CLI
       4  Term_Send
      32  Term_Set_Display_Attribute_Mode
      32  UART2_SendData
      24  UART2_SendDataStr
      66  UART2_print
      56  cmd_confirm_run
     128  command_stack
     560  commands
      72  comparison_float
      46  comparison_num
      86  current_fuction_list
     116  current_mode
          esc_mode
          command_line
          cmd_cnt
          Console_Port
          argument
          ulArgumentCount
          line_ptr
          prompt_buffer
     512  dprint_buf
      44  dput_ch_console
       8  eLine
      44  find_command
      52  fle
      56  fls
     512  kprint_buf
     122  parsing_command
      66  printd
     104  printk
      58  prompt
       2  put_ch_console
     396  uart_console

 
 1 160 bytes in section .bss
   116 bytes in section .data
 1 077 bytes in section .rodata
 2 406 bytes in section .text
 
 2 370 bytes of CODE  memory (+ 36 bytes shared)
 1 077 bytes of CONST memory
 1 276 bytes of DATA  memory

Errors: none
Warnings: none
