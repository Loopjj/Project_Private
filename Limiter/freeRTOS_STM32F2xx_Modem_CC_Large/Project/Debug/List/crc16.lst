###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       18/Dec/2023  17:37:03
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\crc16.c
#    Command line =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\crc16.c -D
#        USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_USB_OTG_FS -lC
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List
#        --diag_suppress Pa050 -o
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\ -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\cpu\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Drv\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\fat\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\bsp\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Dev\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Core\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_OTG_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\portable\IAR\ARM_CM3\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\include\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\usbConf\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\drivers\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List\crc16.lst
#    Object file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj\crc16.o
#
###############################################################################

E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\crc16.c
      1          /*
      2          *************************************** (C) COPYRIGHT 2015 LOOP *************************************
      3          *
      4          * File Name          : crc16.c
      5          *
      6          * Author             : Reserch & Developing 1 Team
      7          *
      8          * Version            : V1.0.0
      9          *
     10          * Date               : 07/29/2015
     11          *
     12          * Description        : crc-16 check
     13          *
     14          *********************************************************************************************************
     15          */
     16          
     17          
     18          /*
     19          *********************************************************************************************************
     20          *                                             INCLUDE FILES
     21          *********************************************************************************************************
     22          */
     23          
     24          #define CRC16_GLOBALS
     25          #include "includes.h"
     26          
     27          
     28          
     29          /*
     30          *********************************************************************************************************
     31          *                                               CONSTANT
     32          *********************************************************************************************************
     33          */
     34          

   \                                 In section .text, align 4, keep-with-next
     35          static const INT16U Crc16_Table [CRC_TAB_SIZE]  = {
   \                     Crc16_Table:
   \   00000000   0x0000 0x1021      DC16 0, 4129, 8258, 12387, 16516, 20645, 24774, 28903, 33032, 37161
   \              0x2042 0x3063
   \              0x4084 0x50A5
   \              0x60C6 0x70E7
   \              0x8108 0x9129
   \   00000014   0xA14A 0xB16B      DC16 41290, 45419, 49548, 53677, 57806, 61935, 4657, 528, 12915, 8786
   \              0xC18C 0xD1AD
   \              0xE1CE 0xF1EF
   \              0x1231 0x0210
   \              0x3273 0x2252
   \   00000028   0x52B5 0x4294      DC16 21173, 17044, 29431, 25302, 37689, 33560, 45947, 41818, 54205
   \              0x72F7 0x62D6
   \              0x9339 0x8318
   \              0xB37B 0xA35A
   \              0xD3BD       
   \   0000003A   0xC39C 0xF3FF      DC16 50076, 62463, 58334, 9314, 13379, 1056, 5121, 25830, 29895, 17572
   \              0xE3DE 0x2462
   \              0x3443 0x0420
   \              0x1401 0x64E6
   \              0x74C7 0x44A4
   \   0000004E   0x5485 0xA56A      DC16 21637, 42346, 46411, 34088, 38153, 58862, 62927, 50604, 54669
   \              0xB54B 0x8528
   \              0x9509 0xE5EE
   \              0xF5CF 0xC5AC
   \              0xD58D       
   \   00000060   0x3653 0x2672      DC16 13907, 9842, 5649, 1584, 30423, 26358, 22165, 18100, 46939, 42874
   \              0x1611 0x0630
   \              0x76D7 0x66F6
   \              0x5695 0x46B4
   \              0xB75B 0xA77A
   \   00000074   0x9719 0x8738      DC16 38681, 34616, 63455, 59390, 55197, 51132, 18628, 22757, 26758
   \              0xF7DF 0xE7FE
   \              0xD79D 0xC7BC
   \              0x48C4 0x58E5
   \              0x6886       
   \   00000086   0x78A7 0x0840      DC16 30887, 2112, 6241, 10242, 14371, 51660, 55789, 59790, 63919, 35144
   \              0x1861 0x2802
   \              0x3823 0xC9CC
   \              0xD9ED 0xE98E
   \              0xF9AF 0x8948
   \   0000009A   0x9969 0xA90A      DC16 39273, 43274, 47403, 23285, 19156, 31415, 27286, 6769, 2640, 14899
   \              0xB92B 0x5AF5
   \              0x4AD4 0x7AB7
   \              0x6A96 0x1A71
   \              0x0A50 0x3A33
   \   000000AE   0x2A12 0xDBFD      DC16 10770, 56317, 52188, 64447, 60318, 39801, 35672, 47931, 43802
   \              0xCBDC 0xFBBF
   \              0xEB9E 0x9B79
   \              0x8B58 0xBB3B
   \              0xAB1A       
   \   000000C0   0x6CA6 0x7C87      DC16 27814, 31879, 19684, 23749, 11298, 15363, 3168, 7233, 60846, 64911
   \              0x4CE4 0x5CC5
   \              0x2C22 0x3C03
   \              0x0C60 0x1C41
   \              0xEDAE 0xFD8F
   \   000000D4   0xCDEC 0xDDCD      DC16 52716, 56781, 44330, 48395, 36200, 40265, 32407, 28342, 24277
   \              0xAD2A 0xBD0B
   \              0x8D68 0x9D49
   \              0x7E97 0x6EB6
   \              0x5ED5       
   \   000000E6   0x4EF4 0x3E13      DC16 20212, 15891, 11826, 7761, 3696, 65439, 61374, 57309, 53244, 48923
   \              0x2E32 0x1E51
   \              0x0E70 0xFF9F
   \              0xEFBE 0xDFDD
   \              0xCFFC 0xBF1B
   \   000000FA   0xAF3A 0x9F59      DC16 44858, 40793, 36728, 37256, 33193, 45514, 41451, 53516, 49453
   \              0x8F78 0x9188
   \              0x81A9 0xB1CA
   \              0xA1EB 0xD10C
   \              0xC12D       
   \   0000010C   0xF14E 0xE16F      DC16 61774, 57711, 4224, 161, 12482, 8419, 20484, 16421, 28742, 24679
   \              0x1080 0x00A1
   \              0x30C2 0x20E3
   \              0x5004 0x4025
   \              0x7046 0x6067
   \   00000120   0x83B9 0x9398      DC16 33721, 37784, 41979, 46042, 49981, 54044, 58239, 62302, 689, 4752
   \              0xA3FB 0xB3DA
   \              0xC33D 0xD31C
   \              0xE37F 0xF35E
   \              0x02B1 0x1290
   \   00000134   0x22F3 0x32D2      DC16 8947, 13010, 16949, 21012, 25207, 29270, 46570, 42443, 38312
   \              0x4235 0x5214
   \              0x6277 0x7256
   \              0xB5EA 0xA5CB
   \              0x95A8       
   \   00000146   0x8589 0xF56E      DC16 34185, 62830, 58703, 54572, 50445, 13538, 9411, 5280, 1153, 29798
   \              0xE54F 0xD52C
   \              0xC50D 0x34E2
   \              0x24C3 0x14A0
   \              0x0481 0x7466
   \   0000015A   0x6447 0x5424      DC16 25671, 21540, 17413, 42971, 47098, 34713, 38840, 59231, 63358
   \              0x4405 0xA7DB
   \              0xB7FA 0x8799
   \              0x97B8 0xE75F
   \              0xF77E       
   \   0000016C   0xC71D 0xD73C      DC16 50973, 55100, 9939, 14066, 1681, 5808, 26199, 30326, 17941, 22068
   \              0x26D3 0x36F2
   \              0x0691 0x16B0
   \              0x6657 0x7676
   \              0x4615 0x5634
   \   00000180   0xD94C 0xC96D      DC16 55628, 51565, 63758, 59695, 39368, 35305, 47498, 43435, 22596
   \              0xF90E 0xE92F
   \              0x99C8 0x89E9
   \              0xB98A 0xA9AB
   \              0x5844       
   \   00000192   0x4865 0x7806      DC16 18533, 30726, 26663, 6336, 2273, 14466, 10403, 52093, 56156, 60223
   \              0x6827 0x18C0
   \              0x08E1 0x3882
   \              0x28A3 0xCB7D
   \              0xDB5C 0xEB3F
   \   000001A6   0xFB1E 0x8BF9      DC16 64286, 35833, 39896, 43963, 48026, 19061, 23124, 27191, 31254
   \              0x9BD8 0xABBB
   \              0xBB9A 0x4A75
   \              0x5A54 0x6A37
   \              0x7A16       
   \   000001B8   0x0AF1 0x1AD0      DC16 2801, 6864, 10931, 14994, 64814, 60687, 56684, 52557, 48554, 44427
   \              0x2AB3 0x3A92
   \              0xFD2E 0xED0F
   \              0xDD6C 0xCD4D
   \              0xBDAA 0xAD8B
   \   000001CC   0x9DE8 0x8DC9      DC16 40424, 36297, 31782, 27655, 23652, 19525, 15522, 11395, 7392, 3265
   \              0x7C26 0x6C07
   \              0x5C64 0x4C45
   \              0x3CA2 0x2C83
   \              0x1CE0 0x0CC1
   \   000001E0   0xEF1F 0xFF3E      DC16 61215, 65342, 53085, 57212, 44955, 49082, 36825, 40952, 28183
   \              0xCF5D 0xDF7C
   \              0xAF9B 0xBFBA
   \              0x8FD9 0x9FF8
   \              0x6E17       
   \   000001F2   0x7E36 0x4E55      DC16 32310, 20053, 24180, 11923, 16050, 3793, 7920
   \              0x5E74 0x2E93
   \              0x3EB2 0x0ED1
   \              0x1EF0       
     36          	0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,
     37          	0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,
     38          	0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,
     39          	0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,
     40          	0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485,
     41          	0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,
     42          	0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,
     43          	0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc,
     44          	0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,
     45          	0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b,
     46          	0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12,
     47          	0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,
     48          	0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,
     49          	0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,
     50          	0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,
     51          	0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78,
     52          	0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f,
     53          	0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,
     54          	0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e,
     55          	0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256,
     56          	0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,
     57          	0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
     58          	0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c,
     59          	0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,
     60          	0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab,
     61          	0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3,
     62          	0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,
     63          	0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,
     64          	0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9,
     65          	0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
     66          	0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
     67          	0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
     68          };
     69          
     70          
     71          
     72          /*
     73          *********************************************************************************************************
     74          *                                                FUNCTIONS
     75          *********************************************************************************************************
     76          */
     77          
     78          /*
     79          ********************************************************************************
     80          * Description : GenerateCRC
     81          * Arguments   : INT8U *pszBuffer, INT32U nLength, INT16U last_CRC16
     82          * Return      : 
     83          * Note        : crc16-ccitt
     84          ******************************************************************************** 
     85          */

   \                                 In section .text, align 2, keep-with-next
     86          INT16U GenerateCRC(INT8U *pszBuffer, INT32U nLength, INT16U last_CRC16)
     87          {
   \                     GenerateCRC: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4606             MOV      R6,R0
   \   00000004   0x4615             MOV      R5,R2
     88          
     89          	INT16U wData, wCRC_16;
     90          
     91          	nLength *= 8;
   \   00000006   0x00CC             LSLS     R4,R1,#+3
     92          	
     93          	portENTER_CRITICAL();
   \   00000008   0x.... 0x....      BL       vPortEnterCritical
     94          
     95          	for(wCRC_16=last_CRC16; nLength>=8; nLength-=8,pszBuffer++){
   \   0000000C   0xE00B             B.N      ??GenerateCRC_0
     96          		wCRC_16 = Crc16_Table[((wCRC_16 >> 8) ^ * pszBuffer)&0xFF] ^ (wCRC_16 << 8);
   \                     ??GenerateCRC_1: (+1)
   \   0000000E   0x.... 0x....      ADR.W    R0,Crc16_Table
   \   00000012   0xB2AD             UXTH     R5,R5
   \   00000014   0xF816 0x1B01      LDRB     R1,[R6], #+1
   \   00000018   0xEA81 0x2125      EOR      R1,R1,R5, ASR #+8
   \   0000001C   0xF830 0x0011      LDRH     R0,[R0, R1, LSL #+1]
   \   00000020   0xEA80 0x2505      EOR      R5,R0,R5, LSL #+8
     97          	} 
   \   00000024   0x3C08             SUBS     R4,R4,#+8
   \                     ??GenerateCRC_0: (+1)
   \   00000026   0x2C08             CMP      R4,#+8
   \   00000028   0xD2F1             BCS.N    ??GenerateCRC_1
     98          
     99          	if(nLength != 0)
   \   0000002A   0x2C00             CMP      R4,#+0
   \   0000002C   0xD014             BEQ.N    ??GenerateCRC_2
    100          	{
    101          		wData = ((INT16U)(*pszBuffer)) << (8);  
   \   0000002E   0x7830             LDRB     R0,[R6, #+0]
   \   00000030   0x0200             LSLS     R0,R0,#+8
   \   00000032   0xE001             B.N      ??GenerateCRC_3
    102          
    103          		while(nLength-- != 0)
    104          		{
    105          			if(((wCRC_16 ^ wData) & ((INT16U) 1 << 15)) != 0){  
    106          				wCRC_16 <<= 1;
    107          				wCRC_16 ^= CRC_16_POLYNOMIAL; 
    108          			} 
    109          			else 
    110          				wCRC_16 <<= 1; 
   \                     ??GenerateCRC_4: (+1)
   \   00000034   0x460D             MOV      R5,R1
    111          			wData <<= 1;
   \                     ??GenerateCRC_5: (+1)
   \   00000036   0x0040             LSLS     R0,R0,#+1
   \                     ??GenerateCRC_3: (+1)
   \   00000038   0x4621             MOV      R1,R4
   \   0000003A   0x1E4C             SUBS     R4,R1,#+1
   \   0000003C   0x2900             CMP      R1,#+0
   \   0000003E   0xD00B             BEQ.N    ??GenerateCRC_2
   \   00000040   0x0069             LSLS     R1,R5,#+1
   \   00000042   0xB2AD             UXTH     R5,R5
   \   00000044   0xB280             UXTH     R0,R0
   \   00000046   0xEA80 0x0205      EOR      R2,R0,R5
   \   0000004A   0x0412             LSLS     R2,R2,#+16
   \   0000004C   0xD5F2             BPL.N    ??GenerateCRC_4
   \   0000004E   0xF481 0x5580      EOR      R5,R1,#0x1000
   \   00000052   0xF085 0x0521      EOR      R5,R5,#0x21
   \   00000056   0xE7EE             B.N      ??GenerateCRC_5
    112          		}
    113          	} 
    114          	
    115          	portEXIT_CRITICAL();
   \                     ??GenerateCRC_2: (+1)
   \   00000058   0x.... 0x....      BL       vPortExitCritical
    116          	
    117          	return wCRC_16;
   \   0000005C   0x4628             MOV      R0,R5
   \   0000005E   0xB280             UXTH     R0,R0
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return
    118          }
    119          
    120          /*
    121          ********************************************************************************
    122          * Description : GetCRC16
    123          * Arguments   : INT16U last_CRC16, char data
    124          * Return      : 
    125          * Note        : crc16-ccitt
    126          ******************************************************************************** 
    127          */

   \                                 In section .text, align 2, keep-with-next
    128          INT16U GetCRC16(INT16U last_CRC16, char data)
    129          {
    130            return((last_CRC16<<8) ^ Crc16_Table[((last_CRC16>>8) ^ data)&0x00FF]);
   \                     GetCRC16: (+1)
   \   00000000   0x.... 0x....      ADR.W    R2,Crc16_Table
   \   00000004   0x4603             MOV      R3,R0
   \   00000006   0xEA81 0x2123      EOR      R1,R1,R3, ASR #+8
   \   0000000A   0xF832 0x1011      LDRH     R1,[R2, R1, LSL #+1]
   \   0000000E   0xEA81 0x2000      EOR      R0,R1,R0, LSL #+8
   \   00000012   0xB280             UXTH     R0,R0
   \   00000014   0x4770             BX       LR               ;; return
    131          }
    132          
    133          
    134          /*
    135          ********************************************************************************
    136          * Description : CRCCheck
    137          * Arguments   : INT8U *pszData, INT32U nLength
    138          * Return      : 
    139          * Note        : crc16-ccitt
    140          ******************************************************************************** 
    141          */

   \                                 In section .text, align 2, keep-with-next
    142          INT32U CRCCheck(INT8U *pszData, INT32U nLength)
    143          {
   \                     CRCCheck: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    144          	INT16U wCRC, wTemp;
    145           
    146          //	wCRC=GenerateCRC(pszData+4,nLength-7,0); //STX:4,ETX:1,CRC:2
    147          	wCRC=GenerateCRC((INT8U *)pszData+1,nLength-4,0); //STX:1,ETX:1,CRC:2		
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x1F29             SUBS     R1,R5,#+4
   \   0000000A   0x1C60             ADDS     R0,R4,#+1
   \   0000000C   0x.... 0x....      BL       GenerateCRC
    148           
    149          	wTemp = (*(pszData+(nLength-3))<<8) | *(pszData+(nLength-2)); 
   \   00000010   0x1961             ADDS     R1,R4,R5
   \   00000012   0x1EC9             SUBS     R1,R1,#+3
   \   00000014   0x780A             LDRB     R2,[R1, #+0]
   \   00000016   0x7849             LDRB     R1,[R1, #+1]
   \   00000018   0xEA41 0x2202      ORR      R2,R1,R2, LSL #+8
    150           
    151          	if(wCRC != wTemp){
   \   0000001C   0x4290             CMP      R0,R2
   \   0000001E   0xD006             BEQ.N    ??CRCCheck_0
    152          		printk("\n CRC Error %04X:%04X\n",wCRC ,wTemp);
   \   00000020   0x4601             MOV      R1,R0
   \   00000022   0x.... 0x....      ADR.W    R0,?_0
   \   00000026   0x.... 0x....      BL       printk
    153          		return FALSE;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}
    154          	}
    155           
    156          	return TRUE;
   \                     ??CRCCheck_0: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    157          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x0A 0x20          DC8 "\012 CRC Error %04X:%04X\012"
   \              0x43 0x52    
   \              0x43 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x25 0x30    
   \              0x34 0x58    
   \              0x3A 0x25    
   \              0x30 0x34    
   \              0x58 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0
    158          
    159          
    160          /*
    161          ********************* (C) COPYRIGHT 2014 Loop ***************END OF FILE*****************************
    162          */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   CRCCheck
        16   -> GenerateCRC
        16   -> printk
      16   GenerateCRC
        16   -> vPortEnterCritical
        16   -> vPortExitCritical
       0   GetCRC16


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?_0
      50  CRCCheck
     512  Crc16_Table
      98  GenerateCRC
      22  GetCRC16

 
 706 bytes in section .text
 
 706 bytes of CODE memory

Errors: none
Warnings: none
