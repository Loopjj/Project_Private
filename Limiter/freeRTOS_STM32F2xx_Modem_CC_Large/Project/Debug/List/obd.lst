###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       18/Dec/2023  17:37:05
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\obd.c
#    Command line =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\obd.c -D
#        USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_USB_OTG_FS -lC
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List
#        --diag_suppress Pa050 -o
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\ -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\cpu\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Drv\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\fat\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\bsp\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Dev\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Core\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_OTG_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\portable\IAR\ARM_CM3\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\include\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\usbConf\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\drivers\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List\obd.lst
#    Object file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj\obd.o
#
###############################################################################

E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\obd.c
      1          /*
      2          *************************************** (C) COPYRIGHT 2015 Loop ****************
      3          *
      4          * File Name          : obd.c
      5          *
      6          * Author             : Digital Development Team
      7          *
      8          * Version            : V1.0.0
      9          *
     10          * Date               : 06/19/2015
     11          *
     12          * Description        : obd source 
     13          *
     14          ********************************************************************************
     15          *                       REVISION HISTORY
     16          ********************************************************************************
     17          
     18          ------------------ V1.0.0 ---------------------------
     19          2018.11.29 50EA 출고
     20          
     21          ------------------ V1.1.0 ---------------------------
     22          2018.12.07 일진 탱크 레벨 계산 변경
     23          
     24          ------------------ V1.0.0 ---------------------------
     25          2020.05.27 협회 SCR 관제 100Set 시작 CAN 250k
     26          
     27          ------------------ V1.0.1 ---------------------------
     28          2020.07.06 데이터 저장 간격 1초 -> 4초
     29                     RTC 시간 한국시간 적용
     30          
     31          ------------------ V1.0.2 ---------------------------
     32          2020.07.08 크린어스 Idel배압 5초 고정 조건 삭제
     33          
     34          ------------------ V1.0.3 ---------------------------
     35          2020.07.08 크린어스 탱크 레벨
     36                     일진 탱클 레벨
     37          
     38          ------------------ V1.0.4 ---------------------------
     39          2020.07.31 관제 데이터 전송 시 Flash_Read_SecData -> SPI_FLASH_BufferRead 변경
     40          
     41          ------------------ V1.0.4.1 -------------------------
     42          2020.08.07 Base배압 저장 조건 변경
     43          
     44          ------------------ V1.0.4.2 -------------------------
     45          2020.08.20 Setting값 초기화 수정
     46          
     47          ------------------ V1.0.0.0 -------------------------
     48          2022.06.06 세라컴 SDPF 시작
     49          ------------------ V1.0.0.1 -------------------------
     50          2022.06.20 저장 항목 수정
     51          
     52          */
     53          #define OBD_GLOBALS
     54          #include "includes.h"
     55          

   \                                 In section .bss, align 4
     56          static FATFS FatFs;
   \                     FatFs:
   \   00000000                      DS8 564
     57          
     58          #define SaveSize   16
     59          #define SyncSize   8
     60          #define SyncByte   0xc6
     61          
     62          #define LOW_LIMT_OF_TIME  0x58000000  //2017년 이후값.
     63          
     64          __packed typedef struct {
     65            INT8U sync[8];      
     66            Time_t rtc;
     67          }header_t;
     68          

   \                                 In section .bss, align 4
     69          header_t Header;
   \                     Header:
   \   00000000                      DS8 16

   \                                 In section .bss, align 1
     70          INT8U PrevSpeed;
   \                     PrevSpeed:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     71          unsigned long PrevLat, PrevLon;
   \                     PrevLat:
   \   00000000                      DS8 4
   \                     PrevLon:
   \   00000004                      DS8 4
     72          unsigned int GPSNotValidCount;
   \                     GPSNotValidCount:
   \   00000008                      DS8 4
     73          
     74          INT8U GPS_Time_Sync;
     75          INT8U GPS_Time_NoSyncCnt;
     76          
     77          time_t PrevSecTime;
   \                     PrevSecTime:
   \   0000000C                      DS8 4
     78          

   \                                 In section .rodata, align 4, keep-with-next
     79          const INT8U rotate[14] = { 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x20 };
   \                     rotate:
   \   00000000   0x01 0x01          DC8 1, 1, 1, 1, 1, 2, 4, 8, 8, 8, 8, 8, 16, 32, 0, 0
   \              0x01 0x01    
   \              0x01 0x02    
   \              0x04 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x10 0x20    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
     80          const INT8U rport[14]  = { 0, 1, 2, 3, 4, 4, 4, 4, 3, 2, 1, 0, 0, 0 }; 
   \                     rport:
   \   00000000   0x00 0x01          DC8 0, 1, 2, 3, 4, 4, 4, 4, 3, 2, 1, 0, 0, 0, 0, 0
   \              0x02 0x03    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x03 0x02    
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     81          
     82          
     83          /*
     84          ********************************************************************************
     85          * Description : UpdateTimeToGPSTime
     86          * Arguments   : None
     87          * Return      : 
     88          * Note        :  UpdateTimeToGPSTime
     89          ******************************************************************************** 
     90          */       

   \                                 In section .text, align 2, keep-with-next
     91          void UpdateTimeToGPSTime(INT32U rtime)
     92          {
   \                     UpdateTimeToGPSTime: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08E             SUB      SP,SP,#+56
     93          	struct tm tm_time;
     94            Time_t t;
     95          
     96            t = gmtime_conv(rtime);
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      BL       gmtime_conv
     97            if(GPS_Time_Sync)  {
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable33
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD018             BEQ.N    ??UpdateTimeToGPSTime_0
     98              tm_time.tm_sec = t.tm_sec;
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0x9002             STR      R0,[SP, #+8]
     99              tm_time.tm_min = t.tm_min;
   \   0000001C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000020   0x9003             STR      R0,[SP, #+12]
    100              tm_time.tm_hour = t.tm_hour;
   \   00000022   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000026   0x9004             STR      R0,[SP, #+16]
    101              tm_time.tm_mday = t.tm_mday;
   \   00000028   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000002C   0x9005             STR      R0,[SP, #+20]
    102              tm_time.tm_mon = t.tm_mon;
   \   0000002E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000032   0x9006             STR      R0,[SP, #+24]
    103              tm_time.tm_year = t.tm_year;
   \   00000034   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000038   0x9007             STR      R0,[SP, #+28]
    104              tm_time.tm_isdst = 0;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x900A             STR      R0,[SP, #+40]
    105              SetRTCTime(&tm_time);    
   \   0000003E   0xA802             ADD      R0,SP,#+8
   \   00000040   0x.... 0x....      BL       SetRTCTime
    106              GPS_Time_Sync = 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x7020             STRB     R0,[R4, #+0]
    107            }
    108          }
   \                     ??UpdateTimeToGPSTime_0: (+1)
   \   00000048   0xB00E             ADD      SP,SP,#+56
   \   0000004A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 4
   \                     GPS_Time_Sync:
   \   00000000                      DS8 1
   \                     GPS_Time_NoSyncCnt:
   \   00000001                      DS8 1
   \   00000002                      DS8 2
    109          
    110          /*
    111          ********************************************************************************
    112          * Description : CheckGPSTimeSyc
    113          * Arguments   : None
    114          * Return      : 
    115          * Note        :  CheckGPSTimeSyc
    116          ******************************************************************************** 
    117          */       
    118          u32 Prev_rmctime;
   \                     Prev_rmctime:
   \   00000004                      DS8 4
    119          u32 GPS_SyncOKTime;
   \                     GPS_SyncOKTime:
   \   00000008                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    120          void CheckGPSTimeSyc(void)
    121          {
   \                     CheckGPSTimeSyc: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    122            Time_t gps_time;
    123            u32 diff = 0;
    124            
    125            if(GPS_Valid && rmc.time != Prev_rmctime) {
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable33
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable33_1
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD059             BEQ.N    ??CheckGPSTimeSyc_0
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable33_2
   \   00000016   0x6829             LDR      R1,[R5, #+0]
   \   00000018   0x6860             LDR      R0,[R4, #+4]
   \   0000001A   0x4281             CMP      R1,R0
   \   0000001C   0xD053             BEQ.N    ??CheckGPSTimeSyc_0
    126              gps_time.tm_hour = rmc.time/10000;
   \   0000001E   0xF242 0x7010      MOVW     R0,#+10000
   \   00000022   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   00000026   0xF88D 0x0002      STRB     R0,[SP, #+2]
    127              gps_time.tm_min  = (rmc.time/100)%100; 
   \   0000002A   0x2064             MOVS     R0,#+100
   \   0000002C   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   00000030   0x4603             MOV      R3,R0
   \   00000032   0xFBB2 0xF3F3      UDIV     R3,R2,R3
   \   00000036   0xFB00 0x2313      MLS      R3,R0,R3,R2
   \   0000003A   0xF88D 0x3001      STRB     R3,[SP, #+1]
    128              gps_time.tm_sec  = rmc.time%100;
   \   0000003E   0xFB00 0x1112      MLS      R1,R0,R2,R1
   \   00000042   0xF88D 0x1000      STRB     R1,[SP, #+0]
    129              gps_time.tm_year = rmc.date%100;
   \   00000046   0x6AA9             LDR      R1,[R5, #+40]
   \   00000048   0x4602             MOV      R2,R0
   \   0000004A   0xFBB1 0xF2F2      UDIV     R2,R1,R2
   \   0000004E   0xFB00 0x1312      MLS      R3,R0,R2,R1
   \   00000052   0xF88D 0x3005      STRB     R3,[SP, #+5]
    130              gps_time.tm_mon  = (rmc.date/100)%100;
   \   00000056   0x4603             MOV      R3,R0
   \   00000058   0xFBB2 0xF3F3      UDIV     R3,R2,R3
   \   0000005C   0xFB00 0x2013      MLS      R0,R0,R3,R2
   \   00000060   0xF88D 0x0004      STRB     R0,[SP, #+4]
    131              gps_time.tm_mday = rmc.date/10000;
   \   00000064   0xF242 0x7010      MOVW     R0,#+10000
   \   00000068   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   0000006C   0xF88D 0x0003      STRB     R0,[SP, #+3]
    132              RTC_GPS_Val = mktime_conv(gps_time);
   \   00000070   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000074   0x.... 0x....      BL       mktime_conv
   \   00000078   0x4606             MOV      R6,R0
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable33_3
   \   0000007E   0x6006             STR      R6,[R0, #+0]
    133              diff = abs(RTC_GPS_Val-(RTC_LVal-TIMESHIFT_SEC));
   \   00000080   0xF647 0x6790      MOVW     R7,#+32400
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable33_4
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x1A30             SUBS     R0,R6,R0
   \   0000008C   0x1838             ADDS     R0,R7,R0
   \   0000008E   0x.... 0x....      BL       abs
    134              if(RTC_GPS_Val > LOW_LIMT_OF_TIME) {
   \   00000092   0xF1B6 0x4FB0      CMP      R6,#+1476395008
   \   00000096   0xD911             BLS.N    ??CheckGPSTimeSyc_1
    135                if(diff > 3) {
   \   00000098   0x2804             CMP      R0,#+4
   \   0000009A   0xD30C             BCC.N    ??CheckGPSTimeSyc_2
    136                  GPS_Time_Sync = 1; 
   \   0000009C   0x2101             MOVS     R1,#+1
   \   0000009E   0x7021             STRB     R1,[R4, #+0]
    137                  if(diff > 86400 && GPS_SyncOKTime < 60)   UpdateTimeToGPSTime(RTC_GPS_Val+TIMESHIFT_SEC);   //하루이상 시간차일때 바로 업데이트 하고 그렇지 않으면 키오프시 업데이트..
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable35  ;; 0x15181
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD309             BCC.N    ??CheckGPSTimeSyc_1
   \   000000A8   0x68A0             LDR      R0,[R4, #+8]
   \   000000AA   0x283C             CMP      R0,#+60
   \   000000AC   0xD206             BCS.N    ??CheckGPSTimeSyc_1
   \   000000AE   0x19B8             ADDS     R0,R7,R6
   \   000000B0   0x.... 0x....      BL       UpdateTimeToGPSTime
   \   000000B4   0xE002             B.N      ??CheckGPSTimeSyc_1
    138                }
    139                else GPS_SyncOKTime++; //GPS 와 시간이 3초이내 차이일 경우 카운트 
   \                     ??CheckGPSTimeSyc_2: (+1)
   \   000000B6   0x68A0             LDR      R0,[R4, #+8]
   \   000000B8   0x1C40             ADDS     R0,R0,#+1
   \   000000BA   0x60A0             STR      R0,[R4, #+8]
    140              }
    141              Prev_rmctime = rmc.time;
   \                     ??CheckGPSTimeSyc_1: (+1)
   \   000000BC   0x6828             LDR      R0,[R5, #+0]
   \   000000BE   0x6060             STR      R0,[R4, #+4]
    142              GPS_Time_NoSyncCnt = 0;
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0x7060             STRB     R0,[R4, #+1]
   \   000000C4   0xBDF7             POP      {R0-R2,R4-R7,PC}
    143            }  
    144            else {
    145              if(GPS_Time_Sync) {
   \                     ??CheckGPSTimeSyc_0: (+1)
   \   000000C6   0x7820             LDRB     R0,[R4, #+0]
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xD007             BEQ.N    ??CheckGPSTimeSyc_3
    146                GPS_Time_NoSyncCnt++;
   \   000000CC   0x7860             LDRB     R0,[R4, #+1]
   \   000000CE   0x1C40             ADDS     R0,R0,#+1
   \   000000D0   0x7060             STRB     R0,[R4, #+1]
    147                if(GPS_Time_NoSyncCnt > 30) GPS_Time_Sync = 0;  //약 3초 
   \   000000D2   0xB2C0             UXTB     R0,R0
   \   000000D4   0x281F             CMP      R0,#+31
   \   000000D6   0xDB01             BLT.N    ??CheckGPSTimeSyc_3
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x7020             STRB     R0,[R4, #+0]
    148              }
    149            }
    150          }  
   \                     ??CheckGPSTimeSyc_3: (+1)
   \   000000DC   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    151          
    152          /*******************************************************************************
    153          * Function Name  : DrvDataUpdate
    154          * Description    : None
    155          * Input          : None
    156          * Output         : None
    157          * Return         : None
    158          *******************************************************************************/

   \                                 In section .bss, align 4
    159          stREAD_VALUE PrevReadValue;
   \                     PrevReadValue:
   \   00000000                      DS8 128

   \                                 In section .text, align 2, keep-with-next
    160          void DrvDataUpdate(void)
    161          {
   \                     DrvDataUpdate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    162          // 향후 서버로 전송할때 아래 데이터를 만들어 보낼것.
    163          //  ReadValue.State; // End, CleanEarth
    164          //  ReadValue.Concentration;  //CleanEarth
    165          //  ReadValue.SystemError[8]; //EnD
    166          //  ReadValue.DoserError[8];  //Iljin
    167            
    168            if(Save_SecData_Cnt < 300) {
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable33_5
   \   00000006   0x880A             LDRH     R2,[R1, #+0]
   \   00000008   0x4610             MOV      R0,R2
   \   0000000A   0xF5B0 0x7F96      CMP      R0,#+300
   \   0000000E   0xDA0A             BGE.N    ??DrvDataUpdate_0
    169              memcpy((u8*)&ReadValue_Buff[Save_SecData_Cnt++], (u8*)&ReadValue, sizeof(stREAD_VALUE));
   \   00000010   0x.... 0x....      LDR.W    R3,??DataTable33_6
   \   00000014   0xEB03 0x10C0      ADD      R0,R3,R0, LSL #+7
   \   00000018   0x1C52             ADDS     R2,R2,#+1
   \   0000001A   0x800A             STRH     R2,[R1, #+0]
   \   0000001C   0x2280             MOVS     R2,#+128
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable33_7
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy
    170            }
    171            if(!Save_SecData_Flag) {
   \                     ??DrvDataUpdate_0: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable33_8
   \   0000002A   0x7801             LDRB     R1,[R0, #+0]
   \   0000002C   0x2900             CMP      R1,#+0
   \   0000002E   0xD101             BNE.N    ??DrvDataUpdate_1
    172                Save_SecData_Flag = 1;
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x7001             STRB     R1,[R0, #+0]
    173            }
    174            
    175            PrevReadValue = ReadValue;
   \                     ??DrvDataUpdate_1: (+1)
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable33_9
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable33_7
   \   0000003C   0x2280             MOVS     R2,#+128
   \   0000003E   0xE8BD 0x4008      POP      {R3,LR}
   \   00000042   0x.... 0x....      B.W      __aeabi_memcpy
    176          }
    177          
    178          /*******************************************************************************
    179          * Function Name  : GpsDataUpdate
    180          * Description    : None
    181          * Input          : None
    182          * Output         : None
    183          * Return         : None
    184          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    185          void GpsDataUpdate(void)
    186          {
   \                     GpsDataUpdate: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
    187            unsigned long lat, lon;
    188            
    189            ReadValue.TM = RTC_LVal;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable33_4
   \   00000008   0x6804             LDR      R4,[R0, #+0]
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable33_7
   \   0000000E   0x602C             STR      R4,[R5, #+0]
    190            
    191            if(GPS_Valid) {
   \   00000010   0x.... 0x....      LDR.W    R6,??DataTable34_1
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable33_1
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD055             BEQ.N    ??GpsDataUpdate_0
    192              GPS_Speed_Val = (u32)(rmc.speed  * 1.852);
   \   0000001E   0x.... 0x....      LDR.W    R9,??DataTable33_2
   \   00000022   0xE9D9 0x2306      LDRD     R2,R3,[R9, #+24]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable34_2  ;; 0xc083126f
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable34_3  ;; 0x3ffda1ca
   \   0000002E   0x.... 0x....      BL       __aeabi_dmul
   \   00000032   0x.... 0x....      BL       __aeabi_d2uiz
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable36
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
    193              // GPS 데이터 
    194              lat = (unsigned long)(gga.latitude  * 1000000.0);
   \   0000003C   0xF04F 0x0A00      MOV      R10,#+0
   \   00000040   0x.... 0x....      LDR.W    R11,??DataTable34_4  ;; 0x412e8480
   \   00000044   0x.... 0x....      LDR.W    R8,??DataTable34_5
   \   00000048   0xE9D8 0x0100      LDRD     R0,R1,[R8, #+0]
   \   0000004C   0x4652             MOV      R2,R10
   \   0000004E   0x465B             MOV      R3,R11
   \   00000050   0x.... 0x....      BL       __aeabi_dmul
   \   00000054   0x.... 0x....      BL       __aeabi_d2uiz
   \   00000058   0x4607             MOV      R7,R0
    195              lon = (unsigned long)(gga.longitude * 1000000.0);
   \   0000005A   0xE9D8 0x0102      LDRD     R0,R1,[R8, #+8]
   \   0000005E   0x4602             MOV      R2,R0
   \   00000060   0x460B             MOV      R3,R1
   \   00000062   0x4650             MOV      R0,R10
   \   00000064   0x4659             MOV      R1,R11
   \   00000066   0x.... 0x....      BL       __aeabi_dmul
   \   0000006A   0x.... 0x....      BL       __aeabi_d2uiz
   \   0000006E   0x4680             MOV      R8,R0
    196              if((ReadValue.TM - PrevSecTime) < 5) {
   \   00000070   0x68F0             LDR      R0,[R6, #+12]
   \   00000072   0x1A20             SUBS     R0,R4,R0
   \   00000074   0x2805             CMP      R0,#+5
   \   00000076   0xD218             BCS.N    ??GpsDataUpdate_1
    197                if(abs(PrevLat-lat) < 50000) {
   \   00000078   0xF24C 0x3450      MOVW     R4,#+50000
   \   0000007C   0x6830             LDR      R0,[R6, #+0]
   \   0000007E   0x1BC0             SUBS     R0,R0,R7
   \   00000080   0x.... 0x....      BL       abs
   \   00000084   0x42A0             CMP      R0,R4
   \   00000086   0xDA01             BGE.N    ??GpsDataUpdate_2
    198                  ReadValue.LT = lat;
   \   00000088   0x606F             STR      R7,[R5, #+4]
   \   0000008A   0xE001             B.N      ??GpsDataUpdate_3
    199                }
    200                else ReadValue.LN = 0;
   \                     ??GpsDataUpdate_2: (+1)
   \   0000008C   0x4650             MOV      R0,R10
   \   0000008E   0x60A8             STR      R0,[R5, #+8]
    201                if(abs(PrevLon-lon) < 50000) {
   \                     ??GpsDataUpdate_3: (+1)
   \   00000090   0x6870             LDR      R0,[R6, #+4]
   \   00000092   0xEBA0 0x0008      SUB      R0,R0,R8
   \   00000096   0x.... 0x....      BL       abs
   \   0000009A   0x42A0             CMP      R0,R4
   \   0000009C   0xDA02             BGE.N    ??GpsDataUpdate_4
    202                  ReadValue.LN = lon;
   \   0000009E   0xF8C5 0x8008      STR      R8,[R5, #+8]
   \   000000A2   0xE005             B.N      ??GpsDataUpdate_5
    203                }
    204                else ReadValue.LN = 0;
   \                     ??GpsDataUpdate_4: (+1)
   \   000000A4   0x4650             MOV      R0,R10
   \   000000A6   0x60A8             STR      R0,[R5, #+8]
   \   000000A8   0xE002             B.N      ??GpsDataUpdate_5
    205              }
    206              else {
    207                ReadValue.LT = 0;
   \                     ??GpsDataUpdate_1: (+1)
   \   000000AA   0x4650             MOV      R0,R10
   \   000000AC   0x6068             STR      R0,[R5, #+4]
    208                ReadValue.LN = 0;
   \   000000AE   0x60A8             STR      R0,[R5, #+8]
    209              }
    210           
    211              ReadValue.CO  = (unsigned short)rmc.course;
   \                     ??GpsDataUpdate_5: (+1)
   \   000000B0   0xE9D9 0x0108      LDRD     R0,R1,[R9, #+32]
   \   000000B4   0x.... 0x....      BL       __aeabi_d2iz
   \   000000B8   0x81E8             STRH     R0,[R5, #+14]
    212              PrevSecTime = ReadValue.TM;
   \   000000BA   0x6828             LDR      R0,[R5, #+0]
   \   000000BC   0x60F0             STR      R0,[R6, #+12]
    213              PrevLat = lat; 
   \   000000BE   0x6037             STR      R7,[R6, #+0]
    214              PrevLon = lon;
   \   000000C0   0xF8C6 0x8004      STR      R8,[R6, #+4]
    215              GPSNotValidCount = 0;
   \   000000C4   0x4650             MOV      R0,R10
   \   000000C6   0x60B0             STR      R0,[R6, #+8]
   \   000000C8   0xE013             B.N      ??GpsDataUpdate_6
    216            }
    217            else {
    218              if(GPSNotValidCount < 60)   GPSNotValidCount++;
   \                     ??GpsDataUpdate_0: (+1)
   \   000000CA   0x68B0             LDR      R0,[R6, #+8]
   \   000000CC   0x283C             CMP      R0,#+60
   \   000000CE   0xD201             BCS.N    ??GpsDataUpdate_7
   \   000000D0   0x1C40             ADDS     R0,R0,#+1
   \   000000D2   0x60B0             STR      R0,[R6, #+8]
    219              if(!ReadValue.Sig.KeyOn || GPSNotValidCount >= 60) {
   \                     ??GpsDataUpdate_7: (+1)
   \   000000D4   0xF8B5 0x005A      LDRH     R0,[R5, #+90]
   \   000000D8   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD002             BEQ.N    ??GpsDataUpdate_8
   \   000000E0   0x68B0             LDR      R0,[R6, #+8]
   \   000000E2   0x283C             CMP      R0,#+60
   \   000000E4   0xD305             BCC.N    ??GpsDataUpdate_6
    220                ReadValue.LT = 0;
   \                     ??GpsDataUpdate_8: (+1)
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x6068             STR      R0,[R5, #+4]
    221                ReadValue.LN = 0;
   \   000000EA   0x60A8             STR      R0,[R5, #+8]
    222          //      ReadValue.AT = 0;
    223                GPS_Speed_Val = 0;
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable36
   \   000000F0   0x7008             STRB     R0,[R1, #+0]
    224              }
    225            }
    226            ReadValue.Speed = GPS_Speed_Val;
   \                     ??GpsDataUpdate_6: (+1)
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable36
   \   000000F6   0x7800             LDRB     R0,[R0, #+0]
   \   000000F8   0x7328             STRB     R0,[R5, #+12]
    227          }  
   \   000000FA   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    228          
    229          /*******************************************************************************
    230          * Function Name  : Flash_Write_SaveData
    231          * Description    : Data write
    232          * Input          : None
    233          * Output         : None
    234          * Return         : None
    235          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    236          void Flash_Write_SaveData(void)
    237          {
   \                     Flash_Write_SaveData: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    238            u16 size;
    239            u16 n;
    240          
    241            if(!Save_SecData_Flag) return; 
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable33_8
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD03B             BEQ.N    ??Flash_Write_SaveData_0
    242          
    243            if(DataSaveAddr % 128)
   \   0000000C   0x.... 0x....      LDR.W    R5,??DataTable36_1
   \   00000010   0x6828             LDR      R0,[R5, #+0]
   \   00000012   0xF010 0x0F7F      TST      R0,#0x7F
   \   00000016   0xD005             BEQ.N    ??Flash_Write_SaveData_1
    244              DataSaveAddr = (DataSaveAddr + (128 - DataSaveAddr % 128));
   \   00000018   0xF100 0x0180      ADD      R1,R0,#+128
   \   0000001C   0xF000 0x007F      AND      R0,R0,#0x7F
   \   00000020   0x1A08             SUBS     R0,R1,R0
   \   00000022   0x6028             STR      R0,[R5, #+0]
    245            if((DataSaveAddr % SPI_FLASH_PAGE) == 0) {   // every 4K erase
   \                     ??Flash_Write_SaveData_1: (+1)
   \   00000024   0x6828             LDR      R0,[R5, #+0]
   \   00000026   0x0501             LSLS     R1,R0,#+20
   \   00000028   0xD101             BNE.N    ??Flash_Write_SaveData_2
    246              SPI_FLASH_PageErase(DataSaveAddr);
   \   0000002A   0x.... 0x....      BL       SPI_FLASH_PageErase
    247            }
    248            
    249            size = sizeof(stREAD_VALUE);
    250            for(n = 0; n < Save_SecData_Cnt; n++) {
   \                     ??Flash_Write_SaveData_2: (+1)
   \   0000002E   0x2600             MOVS     R6,#+0
   \   00000030   0xE01A             B.N      ??Flash_Write_SaveData_3
    251              SPI_FLASH_BufferWrite((u8*)&ReadValue_Buff[n], DataSaveAddr, size);
   \                     ??Flash_Write_SaveData_4: (+1)
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable33_6
   \   00000036   0xEB10 0x17C6      ADDS     R7,R0,R6, LSL #+7
   \   0000003A   0x2280             MOVS     R2,#+128
   \   0000003C   0x6829             LDR      R1,[R5, #+0]
   \   0000003E   0x4638             MOV      R0,R7
   \   00000040   0x.... 0x....      BL       SPI_FLASH_BufferWrite
    252              DataSaveAddr = (DataSaveAddr+size)%FLASH_DATA_SIZE;
   \   00000044   0x6828             LDR      R0,[R5, #+0]
   \   00000046   0x3080             ADDS     R0,R0,#+128
   \   00000048   0xF44F 0x0150      MOV      R1,#+13631488
   \   0000004C   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   00000050   0xF44F 0x0250      MOV      R2,#+13631488
   \   00000054   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   00000058   0x6028             STR      R0,[R5, #+0]
    253              memset((u8*)&ReadValue_Buff[n], 0, size);
   \   0000005A   0x2200             MOVS     R2,#+0
   \   0000005C   0x2180             MOVS     R1,#+128
   \   0000005E   0x4638             MOV      R0,R7
   \   00000060   0x.... 0x....      BL       __aeabi_memset
    254            }
   \   00000064   0x1C76             ADDS     R6,R6,#+1
   \   00000066   0xB2B6             UXTH     R6,R6
   \                     ??Flash_Write_SaveData_3: (+1)
   \   00000068   0x.... 0x....      LDR.W    R7,??DataTable33_5
   \   0000006C   0x8838             LDRH     R0,[R7, #+0]
   \   0000006E   0x4286             CMP      R6,R0
   \   00000070   0xDBDF             BLT.N    ??Flash_Write_SaveData_4
    255            
    256            FRAMMultiWrite((u8 *)&DataSaveAddr, DRV_SAVE_ADDR, 4); 
   \   00000072   0x2204             MOVS     R2,#+4
   \   00000074   0xF44F 0x7100      MOV      R1,#+512
   \   00000078   0x4628             MOV      R0,R5
   \   0000007A   0x.... 0x....      BL       FRAMMultiWrite
    257          
    258            Save_SecData_Cnt = 0;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x8038             STRH     R0,[R7, #+0]
    259            Save_SecData_Flag = 0;
   \   00000082   0x7020             STRB     R0,[R4, #+0]
    260          }
   \                     ??Flash_Write_SaveData_0: (+1)
   \   00000084   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    261          
    262          /*
    263          ********************************************************************************
    264          * Description : Flash_Read_SecData
    265          * Arguments   : *buffer, address, length
    266          * Return      : 
    267          * Note        : Read Flash sec data
    268          ******************************************************************************** 
    269          */

   \                                 In section .text, align 2, keep-with-next
    270          void Flash_Read_SecData(u8 *pBuffer, u32 addr, u16 len)
    271          {
   \                     Flash_Read_SecData: (+1)
   \   00000000   0xB418             PUSH     {R3,R4}
    272            if(addr < DataSaveAddr && addr >= DataSaveAddr - (DataSaveAddr % SPI_FLASH_PAGE) ) {
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable36_1
   \   00000006   0x681B             LDR      R3,[R3, #+0]
   \   00000008   0x4299             CMP      R1,R3
   \   0000000A   0xD20D             BCS.N    ??Flash_Read_SecData_0
   \   0000000C   0xF3C3 0x040B      UBFX     R4,R3,#+0,#+12
   \   00000010   0x1B1B             SUBS     R3,R3,R4
   \   00000012   0x4299             CMP      R1,R3
   \   00000014   0xD308             BCC.N    ??Flash_Read_SecData_0
    273              memcpy(pBuffer, (u8*)(Flash_Save_Buff+(addr % SPI_FLASH_PAGE)),len);
   \   00000016   0x.... 0x....      LDR.W    R3,??DataTable36_2
   \   0000001A   0x681B             LDR      R3,[R3, #+0]
   \   0000001C   0xF3C1 0x010B      UBFX     R1,R1,#+0,#+12
   \   00000020   0x4419             ADD      R1,R3,R1
   \   00000022   0xBC18             POP      {R3,R4}
   \   00000024   0x.... 0x....      B.W      __aeabi_memcpy
    274            }
    275            else {
    276              SPI_FLASH_BufferRead(pBuffer, addr, len);
   \                     ??Flash_Read_SecData_0: (+1)
   \   00000028   0xBC18             POP      {R3,R4}
   \   0000002A   0x.... 0x....      B.W      SPI_FLASH_BufferRead
    277            }
    278          }
    279          
    280          /*
    281          ********************************************************************************
    282          * Description : Default Set
    283          * Arguments   : None
    284          * Return      : None
    285          * Note        : 
    286          ******************************************************************************** 
    287          */

   \                                 In section .text, align 2, keep-with-next
    288          void DefaultSet(void)
    289          {
   \                     DefaultSet: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    290            u32 i, len;
    291            u16 addr, SetSiz = 0;
    292          
    293          	DATA_LED(ON);	  // LED ON
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable36_3  ;; 0x40021000
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xF44F 0x6100      MOV      R1,#+2048
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       GPIO_WriteBit
    294            memset(Flash_Save_Buff, 0, SPI_FLASH_PAGE);
   \   00000014   0x.... 0x....      LDR.W    R6,??DataTable36_2
   \   00000018   0xF44F 0x5580      MOV      R5,#+4096
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x4629             MOV      R1,R5
   \   00000020   0x6830             LDR      R0,[R6, #+0]
   \   00000022   0x.... 0x....      BL       __aeabi_memset
    295            FRAMMultiRead((u8 *)&Setting, DRV_SETTING_PARM, sizeof(st_Setting)); 
   \   00000026   0x.... 0x....      LDR.W    R7,??DataTable36_4
   \   0000002A   0xF44F 0x7280      MOV      R2,#+256
   \   0000002E   0x4611             MOV      R1,R2
   \   00000030   0x4638             MOV      R0,R7
   \   00000032   0x.... 0x....      BL       FRAMMultiRead
    296            
    297            for(i = 0; i < 256; i++)  {            //Fram 모두 초기화  8Kbyte
   \   00000036   0xF04F 0x0800      MOV      R8,#+0
   \   0000003A   0xE00C             B.N      ??DefaultSet_0
    298              FRAMMultiWrite(Flash_Save_Buff, i*32, 32);
   \                     ??DefaultSet_1: (+1)
   \   0000003C   0x2220             MOVS     R2,#+32
   \   0000003E   0xEA4F 0x1148      LSL      R1,R8,#+5
   \   00000042   0x6830             LDR      R0,[R6, #+0]
   \   00000044   0x.... 0x....      BL       FRAMMultiWrite
    299              IWDG_ReloadCounter(); 
   \   00000048   0x.... 0x....      BL       IWDG_ReloadCounter
    300              delay_ms(100);
   \   0000004C   0x2064             MOVS     R0,#+100
   \   0000004E   0x.... 0x....      BL       delay_ms
    301            }
   \   00000052   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??DefaultSet_0: (+1)
   \   00000056   0xF1B8 0x0FFF      CMP      R8,#+255
   \   0000005A   0xD9EF             BLS.N    ??DefaultSet_1
    302            
    303            Setting.FW_Type = USE_MODEM;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0xF887 0x008A      STRB     R0,[R7, #+138]
    304            addr = DRV_SETTING_PARM + offsetof(st_Setting, FW_Type);
    305            FRAMByteWrite(Setting.FW_Type, addr);
   \   00000062   0xF44F 0x71C5      MOV      R1,#+394
   \   00000066   0x.... 0x....      BL       FRAMByteWrite
    306            
    307            memset(Setting.Model_No, ' ', sizeof(Setting.Model_No));
   \   0000006A   0x2220             MOVS     R2,#+32
   \   0000006C   0x2114             MOVS     R1,#+20
   \   0000006E   0xF107 0x0072      ADD      R0,R7,#+114
   \   00000072   0x.... 0x....      BL       __aeabi_memset
    308            len = StringLen((char*)Model_Name, 15);
   \   00000076   0x.... 0x....      LDR.W    R6,??DataTable36_5
   \   0000007A   0x210F             MOVS     R1,#+15
   \   0000007C   0x4630             MOV      R0,R6
   \   0000007E   0x.... 0x....      BL       StringLen
   \   00000082   0x4602             MOV      R2,R0
    309            memcpy(Setting.Model_No, (u8*)Model_Name, len);
   \   00000084   0x4631             MOV      R1,R6
   \   00000086   0xF107 0x0072      ADD      R0,R7,#+114
   \   0000008A   0x.... 0x....      BL       __aeabi_memcpy
    310            addr = DRV_SETTING_PARM + (u8 *)&Setting.Model_No - (u8 *)&Setting;
    311            FRAMMultiWrite((u8 *)&Setting.Model_No, addr, sizeof(Setting.Model_No));
   \   0000008E   0x2214             MOVS     R2,#+20
   \   00000090   0xF44F 0x71B9      MOV      R1,#+370
   \   00000094   0xF107 0x0072      ADD      R0,R7,#+114
   \   00000098   0x.... 0x....      BL       FRAMMultiWrite
    312            IWDG_ReloadCounter(); 
   \   0000009C   0x.... 0x....      BL       IWDG_ReloadCounter
    313            
    314            Setting.t_DelayP = PDELAYTIME;
   \   000000A0   0xF107 0x0695      ADD      R6,R7,#+149
   \   000000A4   0x201E             MOVS     R0,#+30
   \   000000A6   0x8030             STRH     R0,[R6, #+0]
    315            SetSiz += sizeof(Setting.t_DelayP);
    316            
    317            Setting.t_Buzzer = 1;
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0x8070             STRH     R0,[R6, #+2]
    318            SetSiz += sizeof(Setting.t_Buzzer);
    319            
    320            Setting.P1L_Set = 350;
   \   000000AC   0xF44F 0x70AF      MOV      R0,#+350
   \   000000B0   0x80B0             STRH     R0,[R6, #+4]
    321            SetSiz += sizeof(Setting.P1L_Set);
    322            
    323            Setting.P1H_Set = 400;
   \   000000B2   0xF44F 0x70C8      MOV      R0,#+400
   \   000000B6   0x80F0             STRH     R0,[R6, #+6]
    324            SetSiz += sizeof(Setting.P1H_Set);
    325            
    326            Setting.Prangehigh = PRANGEHIGH;
   \   000000B8   0xF44F 0x777A      MOV      R7,#+1000
   \   000000BC   0x8177             STRH     R7,[R6, #+10]
    327            SetSiz += sizeof(Setting.Prangehigh);
    328            
    329            Setting.Prangelow = PRANGELOW;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x81B0             STRH     R0,[R6, #+12]
    330            SetSiz += sizeof(Setting.Prangelow);
    331            
    332            Setting.P1CalHigh = PCalHigh;
   \   000000C2   0xF640 0x609C      MOVW     R0,#+3740
   \   000000C6   0x81F0             STRH     R0,[R6, #+14]
    333            SetSiz += sizeof(Setting.P1CalHigh);
    334            
    335            Setting.P1CalLow = PCalLow;
   \   000000C8   0xF44F 0x70E1      MOV      R0,#+450
   \   000000CC   0x8230             STRH     R0,[R6, #+16]
    336            SetSiz += sizeof(Setting.P1CalLow);
    337            
    338            Setting.T1Offset = T_Offset;
   \   000000CE   0x200A             MOVS     R0,#+10
   \   000000D0   0x8270             STRH     R0,[R6, #+18]
    339            SetSiz+= sizeof(Setting.T1Offset);
    340            
    341            Setting.TLL_Set = 10;
   \   000000D2   0x82B0             STRH     R0,[R6, #+20]
    342            SetSiz+= sizeof(Setting.TLL_Set);
    343            
    344            Setting.TLH_Set = 15;
   \   000000D4   0x200F             MOVS     R0,#+15
   \   000000D6   0x82F0             STRH     R0,[R6, #+22]
    345            SetSiz+= sizeof(Setting.TLH_Set);
    346            IWDG_ReloadCounter();
   \   000000D8   0x.... 0x....      BL       IWDG_ReloadCounter
    347            
    348            Setting.t_DelayTL = TLDELAYTIME;
   \   000000DC   0x201E             MOVS     R0,#+30
   \   000000DE   0x8330             STRH     R0,[R6, #+24]
    349            SetSiz+= sizeof(Setting.t_DelayTL);
    350            
    351            Setting.LED = 0x1000;
   \   000000E0   0x8375             STRH     R5,[R6, #+26]
    352            SetSiz+= sizeof(Setting.LED);
    353            
    354            Setting.IdlePress = 0;
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x83B0             STRH     R0,[R6, #+28]
    355            SetSiz+= sizeof(Setting.IdlePress);
    356            ReadValue.DpfValue.baseP1 = Setting.IdlePress;
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable33_7
   \   000000EA   0xF8A1 0x0031      STRH     R0,[R1, #+49]
    357            memset(P_BUF, 0, 12*2);
   \   000000EE   0x4602             MOV      R2,R0
   \   000000F0   0x2118             MOVS     R1,#+24
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable37
   \   000000F6   0x.... 0x....      BL       __aeabi_memset
    358            
    359            Setting.Prangehigh = PRANGEHIGH;
   \   000000FA   0x8177             STRH     R7,[R6, #+10]
    360            SetSiz+= sizeof(Setting.Prangehigh);
    361            
    362            Setting.Prangelow = PRANGELOW;
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x81B0             STRH     R0,[R6, #+12]
    363            SetSiz+= sizeof(Setting.Prangelow);
    364            
    365          	Setting.PAlarm.B = 0;
   \   00000100   0x77F0             STRB     R0,[R6, #+31]
    366            SetSiz+= sizeof(Setting.PAlarm);
    367            
    368          	Setting.CanBPS = 1;
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0x77B0             STRB     R0,[R6, #+30]
    369            SetSiz+= sizeof(Setting.CanBPS);
    370            
    371            addr = DRV_SETTING_PARM + offsetof(st_Setting, t_DelayP); 
    372            FRAMMultiWrite((u8 *)&Setting.t_DelayP, addr, SetSiz);
   \   00000106   0x2222             MOVS     R2,#+34
   \   00000108   0xF240 0x1195      MOVW     R1,#+405
   \   0000010C   0x4630             MOV      R0,R6
   \   0000010E   0x.... 0x....      BL       FRAMMultiWrite
    373            IWDG_ReloadCounter();
   \   00000112   0x.... 0x....      BL       IWDG_ReloadCounter
    374            
    375            Modem_Parameter_Reset();
   \   00000116   0x.... 0x....      BL       Modem_Parameter_Reset
    376          	DATA_LED(OFF);
   \   0000011A   0x2201             MOVS     R2,#+1
   \   0000011C   0xF44F 0x6100      MOV      R1,#+2048
   \   00000120   0x4620             MOV      R0,R4
   \   00000122   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000126   0x.... 0x....      B.W      GPIO_WriteBit
    377          }
    378          
    379          /*
    380          ********************************************************************************
    381          * Description : Parameter Initialize
    382          ******************************************************************************** 
    383          */

   \                                 In section .text, align 2, keep-with-next
    384          void InitPara(void) 
    385          {
   \                     InitPara: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
    386            u8 ver[6];
    387            u16 i, addr, size;    
    388            u32 saddr = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
    389            
    390            ReadValue.FW_Ver = (MAJOR*1000) + (MINOR*100) + (RELEASE*10) + BUILD;
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable33_7
   \   0000000E   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000012   0x8228             STRH     R0,[R5, #+16]
    391            DMS_ver = (MAJOR*1000) + (MINOR*100) + (RELEASE*10) + BUILD;
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable36_6
   \   00000018   0x8008             STRH     R0,[R1, #+0]
    392            Flash_Save_Buff =  (u8*)BKPSRAM_BASE;
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable36_7  ;; 0x40024000
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable36_2
   \   00000022   0x6008             STR      R0,[R1, #+0]
    393              
    394            FRAMMultiRead((u8 *)&ver, FIRMWARE_VER, 6);
   \   00000024   0x2206             MOVS     R2,#+6
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0xA801             ADD      R0,SP,#+4
   \   0000002A   0x.... 0x....      BL       FRAMMultiRead
    395            if(!(ver[0] == MAJOR && ver[1] == MINOR && ver[2] == RELEASE && ver[3] == BUILD)) {
   \   0000002E   0xA801             ADD      R0,SP,#+4
   \   00000030   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000034   0x2902             CMP      R1,#+2
   \   00000036   0xD108             BNE.N    ??InitPara_0
   \   00000038   0x7841             LDRB     R1,[R0, #+1]
   \   0000003A   0x2900             CMP      R1,#+0
   \   0000003C   0xD105             BNE.N    ??InitPara_0
   \   0000003E   0x7881             LDRB     R1,[R0, #+2]
   \   00000040   0x2900             CMP      R1,#+0
   \   00000042   0xD102             BNE.N    ??InitPara_0
   \   00000044   0x78C1             LDRB     R1,[R0, #+3]
   \   00000046   0x2900             CMP      R1,#+0
   \   00000048   0xD00F             BEQ.N    ??InitPara_1
    396              ver[0] = MAJOR; ver[1] = MINOR; ver[2] = RELEASE; ver[3] = BUILD;
   \                     ??InitPara_0: (+1)
   \   0000004A   0x2102             MOVS     R1,#+2
   \   0000004C   0xF88D 0x1004      STRB     R1,[SP, #+4]
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x7041             STRB     R1,[R0, #+1]
   \   00000054   0x8041             STRH     R1,[R0, #+2]
    397              ver[4] = 0; ver[5] = 0;
   \   00000056   0x8081             STRH     R1,[R0, #+4]
    398              FRAMMultiWrite((u8 *)&ver, FIRMWARE_VER, 6);
   \   00000058   0x2206             MOVS     R2,#+6
   \   0000005A   0x.... 0x....      BL       FRAMMultiWrite
    399              
    400              addr = DRV_SETTING_PARM + (u8 *)&Setting.FW_Ver - (u8 *)&Setting;
    401              size = sizeof(Setting.FW_Ver)-2; //1.4.0.0
    402              FRAMMultiWrite((u8 *)&ver, addr, size); 
   \   0000005E   0x2204             MOVS     R2,#+4
   \   00000060   0xF240 0x118B      MOVW     R1,#+395
   \   00000064   0xA801             ADD      R0,SP,#+4
   \   00000066   0x.... 0x....      BL       FRAMMultiWrite
    403            }
    404          
    405            FRAMMultiRead((u8 *)&Setting, DRV_SETTING_PARM, sizeof(st_Setting));
   \                     ??InitPara_1: (+1)
   \   0000006A   0x.... 0x....      LDR.W    R6,??DataTable36_4
   \   0000006E   0xF44F 0x7280      MOV      R2,#+256
   \   00000072   0x4611             MOV      R1,R2
   \   00000074   0x4630             MOV      R0,R6
   \   00000076   0x.... 0x....      BL       FRAMMultiRead
    406            
    407            if(Setting.t_DelayP > 9999) {
   \   0000007A   0xF106 0x0495      ADD      R4,R6,#+149
   \   0000007E   0xF242 0x7710      MOVW     R7,#+10000
   \   00000082   0x8820             LDRH     R0,[R4, #+0]
   \   00000084   0x42B8             CMP      R0,R7
   \   00000086   0xDB07             BLT.N    ??InitPara_2
    408              Setting.t_DelayP = PDELAYTIME;
   \   00000088   0x201E             MOVS     R0,#+30
   \   0000008A   0x8020             STRH     R0,[R4, #+0]
    409              addr = DRV_SETTING_PARM + offsetof(st_Setting, t_DelayP);
    410              FRAMMultiWrite((u8 *)&Setting.t_DelayP, addr, sizeof(Setting.t_DelayP));
   \   0000008C   0x2202             MOVS     R2,#+2
   \   0000008E   0xF240 0x1195      MOVW     R1,#+405
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0x.... 0x....      BL       FRAMMultiWrite
    411            }
    412            if(Setting.t_Buzzer > 10) {
   \                     ??InitPara_2: (+1)
   \   00000098   0x8860             LDRH     R0,[R4, #+2]
   \   0000009A   0x280B             CMP      R0,#+11
   \   0000009C   0xDB08             BLT.N    ??InitPara_3
    413              Setting.t_Buzzer = 1;
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0x8060             STRH     R0,[R4, #+2]
    414              addr = DRV_SETTING_PARM + offsetof(st_Setting, t_Buzzer);
    415              FRAMMultiWrite((u8 *)&Setting.t_Buzzer, addr, sizeof(Setting.t_Buzzer));
   \   000000A2   0x2202             MOVS     R2,#+2
   \   000000A4   0xF240 0x1197      MOVW     R1,#+407
   \   000000A8   0xF106 0x0097      ADD      R0,R6,#+151
   \   000000AC   0x.... 0x....      BL       FRAMMultiWrite
    416            }
    417            if(Setting.P1L_Set > 1000) {
   \                     ??InitPara_3: (+1)
   \   000000B0   0xF240 0x38E9      MOVW     R8,#+1001
   \   000000B4   0x88A0             LDRH     R0,[R4, #+4]
   \   000000B6   0x4540             CMP      R0,R8
   \   000000B8   0xDB09             BLT.N    ??InitPara_4
    418              Setting.P1L_Set = 350;
   \   000000BA   0xF44F 0x70AF      MOV      R0,#+350
   \   000000BE   0x80A0             STRH     R0,[R4, #+4]
    419              addr = DRV_SETTING_PARM + offsetof(st_Setting, P1L_Set);
    420              FRAMMultiWrite((u8 *)&Setting.P1L_Set, addr, sizeof(Setting.P1L_Set));
   \   000000C0   0x2202             MOVS     R2,#+2
   \   000000C2   0xF240 0x1199      MOVW     R1,#+409
   \   000000C6   0xF106 0x0099      ADD      R0,R6,#+153
   \   000000CA   0x.... 0x....      BL       FRAMMultiWrite
    421            }
    422            if(Setting.P1H_Set > 1000) {
   \                     ??InitPara_4: (+1)
   \   000000CE   0x88E0             LDRH     R0,[R4, #+6]
   \   000000D0   0x4540             CMP      R0,R8
   \   000000D2   0xDB09             BLT.N    ??InitPara_5
    423              Setting.P1H_Set = 400;
   \   000000D4   0xF44F 0x70C8      MOV      R0,#+400
   \   000000D8   0x80E0             STRH     R0,[R4, #+6]
    424              addr = DRV_SETTING_PARM + offsetof(st_Setting, P1H_Set);
    425              FRAMMultiWrite((u8 *)&Setting.P1H_Set, addr, sizeof(Setting.P1H_Set));
   \   000000DA   0x2202             MOVS     R2,#+2
   \   000000DC   0xF240 0x119B      MOVW     R1,#+411
   \   000000E0   0xF106 0x009B      ADD      R0,R6,#+155
   \   000000E4   0x.... 0x....      BL       FRAMMultiWrite
    426            }
    427            if(Setting.Prangehigh > 1000) {
   \                     ??InitPara_5: (+1)
   \   000000E8   0x8960             LDRH     R0,[R4, #+10]
   \   000000EA   0x4540             CMP      R0,R8
   \   000000EC   0xDB09             BLT.N    ??InitPara_6
    428              Setting.Prangehigh = PRANGEHIGH;
   \   000000EE   0xF44F 0x707A      MOV      R0,#+1000
   \   000000F2   0x8160             STRH     R0,[R4, #+10]
    429              addr = DRV_SETTING_PARM + offsetof(st_Setting, Prangehigh);
    430              FRAMMultiWrite((u8 *)&Setting.Prangehigh, addr, sizeof(Setting.Prangehigh));
   \   000000F4   0x2202             MOVS     R2,#+2
   \   000000F6   0xF240 0x119F      MOVW     R1,#+415
   \   000000FA   0xF106 0x009F      ADD      R0,R6,#+159
   \   000000FE   0x.... 0x....      BL       FRAMMultiWrite
    431            }
    432            IWDG_ReloadCounter();
   \                     ??InitPara_6: (+1)
   \   00000102   0x.... 0x....      BL       IWDG_ReloadCounter
    433            
    434            if(Setting.Prangelow > 1000) {
   \   00000106   0x89A0             LDRH     R0,[R4, #+12]
   \   00000108   0x4540             CMP      R0,R8
   \   0000010A   0xDB08             BLT.N    ??InitPara_7
    435              Setting.Prangelow = PRANGELOW;
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x81A0             STRH     R0,[R4, #+12]
    436              addr = DRV_SETTING_PARM + offsetof(st_Setting, Prangelow);
    437              FRAMMultiWrite((u8 *)&Setting.Prangelow, addr, sizeof(Setting.Prangelow));
   \   00000110   0x2202             MOVS     R2,#+2
   \   00000112   0xF240 0x11A1      MOVW     R1,#+417
   \   00000116   0xF106 0x00A1      ADD      R0,R6,#+161
   \   0000011A   0x.... 0x....      BL       FRAMMultiWrite
    438            }
    439            if(Setting.P1CalHigh > 4095) {
   \                     ??InitPara_7: (+1)
   \   0000011E   0x89E0             LDRH     R0,[R4, #+14]
   \   00000120   0xF5B0 0x5F80      CMP      R0,#+4096
   \   00000124   0xDB09             BLT.N    ??InitPara_8
    440              Setting.P1CalHigh = PCalHigh;
   \   00000126   0xF640 0x609C      MOVW     R0,#+3740
   \   0000012A   0x81E0             STRH     R0,[R4, #+14]
    441              addr = DRV_SETTING_PARM + offsetof(st_Setting, P1CalHigh);
    442              FRAMMultiWrite((u8 *)&Setting.P1CalHigh, addr, sizeof(Setting.P1CalHigh));
   \   0000012C   0x2202             MOVS     R2,#+2
   \   0000012E   0xF240 0x11A3      MOVW     R1,#+419
   \   00000132   0xF106 0x00A3      ADD      R0,R6,#+163
   \   00000136   0x.... 0x....      BL       FRAMMultiWrite
    443            }
    444            if(Setting.P1CalLow > 4095) {
   \                     ??InitPara_8: (+1)
   \   0000013A   0x8A20             LDRH     R0,[R4, #+16]
   \   0000013C   0xF5B0 0x5F80      CMP      R0,#+4096
   \   00000140   0xDB09             BLT.N    ??InitPara_9
    445              Setting.P1CalLow = PCalLow;
   \   00000142   0xF44F 0x70E1      MOV      R0,#+450
   \   00000146   0x8220             STRH     R0,[R4, #+16]
    446              addr = DRV_SETTING_PARM + offsetof(st_Setting, P1CalLow);
    447              FRAMMultiWrite((u8 *)&Setting.P1CalLow, addr, sizeof(Setting.P1CalLow));
   \   00000148   0x2202             MOVS     R2,#+2
   \   0000014A   0xF240 0x11A5      MOVW     R1,#+421
   \   0000014E   0xF106 0x00A5      ADD      R0,R6,#+165
   \   00000152   0x.... 0x....      BL       FRAMMultiWrite
    448            }
    449            if(Setting.T1Offset > 1000) {
   \                     ??InitPara_9: (+1)
   \   00000156   0x8A60             LDRH     R0,[R4, #+18]
   \   00000158   0x4540             CMP      R0,R8
   \   0000015A   0xDB08             BLT.N    ??InitPara_10
    450              Setting.T1Offset = T_Offset;
   \   0000015C   0x200A             MOVS     R0,#+10
   \   0000015E   0x8260             STRH     R0,[R4, #+18]
    451              addr = DRV_SETTING_PARM + offsetof(st_Setting, T1Offset);
    452              FRAMMultiWrite((u8 *)&Setting.T1Offset, addr, sizeof(Setting.T1Offset));
   \   00000160   0x2202             MOVS     R2,#+2
   \   00000162   0xF240 0x11A7      MOVW     R1,#+423
   \   00000166   0xF106 0x00A7      ADD      R0,R6,#+167
   \   0000016A   0x.... 0x....      BL       FRAMMultiWrite
    453            }
    454            if(Setting.TLL_Set > 100) {
   \                     ??InitPara_10: (+1)
   \   0000016E   0x8AA0             LDRH     R0,[R4, #+20]
   \   00000170   0x2865             CMP      R0,#+101
   \   00000172   0xDB08             BLT.N    ??InitPara_11
    455              Setting.TLL_Set = 10;
   \   00000174   0x200A             MOVS     R0,#+10
   \   00000176   0x82A0             STRH     R0,[R4, #+20]
    456              addr = DRV_SETTING_PARM + offsetof(st_Setting, TLL_Set);
    457              FRAMMultiWrite((u8 *)&Setting.TLL_Set, addr, sizeof(Setting.TLL_Set));
   \   00000178   0x2202             MOVS     R2,#+2
   \   0000017A   0xF240 0x11A9      MOVW     R1,#+425
   \   0000017E   0xF106 0x00A9      ADD      R0,R6,#+169
   \   00000182   0x.... 0x....      BL       FRAMMultiWrite
    458            }
    459            IWDG_ReloadCounter();
   \                     ??InitPara_11: (+1)
   \   00000186   0x.... 0x....      BL       IWDG_ReloadCounter
    460            
    461            if(Setting.TLH_Set > 100) {
   \   0000018A   0x8AE0             LDRH     R0,[R4, #+22]
   \   0000018C   0x2865             CMP      R0,#+101
   \   0000018E   0xDB08             BLT.N    ??InitPara_12
    462              Setting.TLH_Set = 15;
   \   00000190   0x200F             MOVS     R0,#+15
   \   00000192   0x82E0             STRH     R0,[R4, #+22]
    463              addr = DRV_SETTING_PARM + offsetof(st_Setting, TLH_Set);
    464              FRAMMultiWrite((u8 *)&Setting.TLH_Set, addr, sizeof(Setting.TLH_Set));
   \   00000194   0x2202             MOVS     R2,#+2
   \   00000196   0xF240 0x11AB      MOVW     R1,#+427
   \   0000019A   0xF106 0x00AB      ADD      R0,R6,#+171
   \   0000019E   0x.... 0x....      BL       FRAMMultiWrite
    465            }
    466            if(Setting.t_DelayTL > 9999) {
   \                     ??InitPara_12: (+1)
   \   000001A2   0x8B20             LDRH     R0,[R4, #+24]
   \   000001A4   0x42B8             CMP      R0,R7
   \   000001A6   0xDB08             BLT.N    ??InitPara_13
    467              Setting.t_DelayTL = TLDELAYTIME;
   \   000001A8   0x201E             MOVS     R0,#+30
   \   000001AA   0x8320             STRH     R0,[R4, #+24]
    468              addr = DRV_SETTING_PARM + offsetof(st_Setting, t_DelayTL);
    469              FRAMMultiWrite((u8 *)&Setting.t_DelayTL, addr, sizeof(Setting.t_DelayTL));
   \   000001AC   0x2202             MOVS     R2,#+2
   \   000001AE   0xF240 0x11AD      MOVW     R1,#+429
   \   000001B2   0xF106 0x00AD      ADD      R0,R6,#+173
   \   000001B6   0x.... 0x....      BL       FRAMMultiWrite
    470            }
    471            if(Setting.Prangehigh > 1000) {
   \                     ??InitPara_13: (+1)
   \   000001BA   0x8960             LDRH     R0,[R4, #+10]
   \   000001BC   0x4540             CMP      R0,R8
   \   000001BE   0xDB09             BLT.N    ??InitPara_14
    472              Setting.Prangehigh = PRANGEHIGH;
   \   000001C0   0xF44F 0x707A      MOV      R0,#+1000
   \   000001C4   0x8160             STRH     R0,[R4, #+10]
    473              addr = DRV_SETTING_PARM + offsetof(st_Setting, Prangehigh);
    474              FRAMMultiWrite((u8 *)&Setting.Prangehigh, addr, sizeof(Setting.Prangehigh));
   \   000001C6   0x2202             MOVS     R2,#+2
   \   000001C8   0xF240 0x119F      MOVW     R1,#+415
   \   000001CC   0xF106 0x009F      ADD      R0,R6,#+159
   \   000001D0   0x.... 0x....      BL       FRAMMultiWrite
    475            }
    476            if(Setting.Prangelow > 1000) {
   \                     ??InitPara_14: (+1)
   \   000001D4   0x89A0             LDRH     R0,[R4, #+12]
   \   000001D6   0x4540             CMP      R0,R8
   \   000001D8   0xDB08             BLT.N    ??InitPara_15
    477              Setting.Prangelow = PRANGELOW;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x81A0             STRH     R0,[R4, #+12]
    478              addr = DRV_SETTING_PARM + offsetof(st_Setting, Prangelow);
    479              FRAMMultiWrite((u8 *)&Setting.Prangelow, addr, sizeof(Setting.Prangelow));
   \   000001DE   0x2202             MOVS     R2,#+2
   \   000001E0   0xF240 0x11A1      MOVW     R1,#+417
   \   000001E4   0xF106 0x00A1      ADD      R0,R6,#+161
   \   000001E8   0x.... 0x....      BL       FRAMMultiWrite
    480            }
    481            if(Setting.PAlarm.B > 0x0F) {
   \                     ??InitPara_15: (+1)
   \   000001EC   0x7FE0             LDRB     R0,[R4, #+31]
   \   000001EE   0x2810             CMP      R0,#+16
   \   000001F0   0xDB08             BLT.N    ??InitPara_16
    482              Setting.PAlarm.B = 0;
   \   000001F2   0x2000             MOVS     R0,#+0
   \   000001F4   0x77E0             STRB     R0,[R4, #+31]
    483              addr = DRV_SETTING_PARM + offsetof(st_Setting, PAlarm);
    484              FRAMMultiWrite((u8 *)&Setting.PAlarm.B, addr, sizeof(Setting.PAlarm));
   \   000001F6   0x2201             MOVS     R2,#+1
   \   000001F8   0xF44F 0x71DA      MOV      R1,#+436
   \   000001FC   0xF106 0x00B4      ADD      R0,R6,#+180
   \   00000200   0x.... 0x....      BL       FRAMMultiWrite
    485            }
    486            IWDG_ReloadCounter();
   \                     ??InitPara_16: (+1)
   \   00000204   0x.... 0x....      BL       IWDG_ReloadCounter
    487            
    488            if(Setting.IdlePress > 1000) {
   \   00000208   0x8BA0             LDRH     R0,[R4, #+28]
   \   0000020A   0x4540             CMP      R0,R8
   \   0000020C   0xDB08             BLT.N    ??InitPara_17
    489              Setting.IdlePress = 0;
   \   0000020E   0x2000             MOVS     R0,#+0
   \   00000210   0x83A0             STRH     R0,[R4, #+28]
    490              addr = DRV_SETTING_PARM + offsetof(st_Setting, IdlePress);
    491              FRAMMultiWrite((u8 *)&Setting.IdlePress, addr, sizeof(Setting.IdlePress));
   \   00000212   0x2202             MOVS     R2,#+2
   \   00000214   0xF240 0x11B1      MOVW     R1,#+433
   \   00000218   0xF106 0x00B1      ADD      R0,R6,#+177
   \   0000021C   0x.... 0x....      BL       FRAMMultiWrite
    492            }
    493            for(i=0; i<12; i++) P_BUF[i] = Setting.IdlePress;
   \                     ??InitPara_17: (+1)
   \   00000220   0x2000             MOVS     R0,#+0
   \   00000222   0x.... 0x....      LDR.W    R3,??DataTable37
   \   00000226   0xE002             B.N      ??InitPara_18
   \                     ??InitPara_19: (+1)
   \   00000228   0xF823 0x2011      STRH     R2,[R3, R1, LSL #+1]
   \   0000022C   0x1C40             ADDS     R0,R0,#+1
   \                     ??InitPara_18: (+1)
   \   0000022E   0x8BA2             LDRH     R2,[R4, #+28]
   \   00000230   0xB280             UXTH     R0,R0
   \   00000232   0x4601             MOV      R1,R0
   \   00000234   0x290C             CMP      R1,#+12
   \   00000236   0xDBF7             BLT.N    ??InitPara_19
    494            ReadValue.DpfValue.baseP1 = Setting.IdlePress;
   \   00000238   0xF8A5 0x2031      STRH     R2,[R5, #+49]
    495            if(Setting.CanBPS > 1) {
   \   0000023C   0x7FA0             LDRB     R0,[R4, #+30]
   \   0000023E   0x2802             CMP      R0,#+2
   \   00000240   0xDB08             BLT.N    ??InitPara_20
    496              Setting.CanBPS = 1;
   \   00000242   0x2001             MOVS     R0,#+1
   \   00000244   0x77A0             STRB     R0,[R4, #+30]
    497              addr = DRV_SETTING_PARM + offsetof(st_Setting, CanBPS);
    498              FRAMMultiWrite((u8 *)&Setting.CanBPS, addr, sizeof(Setting.CanBPS));
   \   00000246   0x4602             MOV      R2,R0
   \   00000248   0xF240 0x11B3      MOVW     R1,#+435
   \   0000024C   0xF106 0x00B3      ADD      R0,R6,#+179
   \   00000250   0x.... 0x....      BL       FRAMMultiWrite
    499            }
    500            IWDG_ReloadCounter();
   \                     ??InitPara_20: (+1)
   \   00000254   0x.... 0x....      BL       IWDG_ReloadCounter
    501            
    502            GPIO_Write(GPIOE, (GPIO_ReadOutputData(GPIOE) | 0xf000));
   \   00000258   0x.... 0x....      LDR.W    R5,??DataTable36_3  ;; 0x40021000
   \   0000025C   0x4628             MOV      R0,R5
   \   0000025E   0x.... 0x....      BL       GPIO_ReadOutputData
   \   00000262   0xF440 0x4170      ORR      R1,R0,#0xF000
   \   00000266   0x4628             MOV      R0,R5
   \   00000268   0x.... 0x....      BL       GPIO_Write
    503            GPIO_Write(GPIOE, (GPIO_ReadOutputData(GPIOE) & (~(Setting.LED &  0xf000))));
   \   0000026C   0x4628             MOV      R0,R5
   \   0000026E   0x.... 0x....      BL       GPIO_ReadOutputData
   \   00000272   0x8B61             LDRH     R1,[R4, #+26]
   \   00000274   0xF401 0x4170      AND      R1,R1,#0xF000
   \   00000278   0xEA20 0x0101      BIC      R1,R0,R1
   \   0000027C   0x4628             MOV      R0,R5
   \   0000027E   0x.... 0x....      BL       GPIO_Write
    504          
    505            FRAMMultiRead((u8 *)&saddr, DRV_SAVE_ADDR, 4);   
   \   00000282   0x2204             MOVS     R2,#+4
   \   00000284   0xF44F 0x7100      MOV      R1,#+512
   \   00000288   0x4668             MOV      R0,SP
   \   0000028A   0x.... 0x....      BL       FRAMMultiRead
    506            if(saddr%sizeof(stREAD_VALUE) > 0 || saddr > FLASH_DATA_SIZE) 
   \   0000028E   0x.... 0x....      LDR.W    R5,??DataTable36_1
   \   00000292   0x9800             LDR      R0,[SP, #+0]
   \   00000294   0xF010 0x0F7F      TST      R0,#0x7F
   \   00000298   0xD102             BNE.N    ??InitPara_21
   \   0000029A   0xF5B0 0x0F50      CMP      R0,#+13631488
   \   0000029E   0xD901             BLS.N    ??InitPara_22
    507              saddr = DataSaveAddr; //RTC_BK_Addr->Sent_Addr;
   \                     ??InitPara_21: (+1)
   \   000002A0   0x6828             LDR      R0,[R5, #+0]
   \   000002A2   0x9000             STR      R0,[SP, #+0]
    508            DataSaveAddr = saddr;
   \                     ??InitPara_22: (+1)
   \   000002A4   0x9800             LDR      R0,[SP, #+0]
   \   000002A6   0x6028             STR      R0,[R5, #+0]
    509          
    510            FRAMMultiRead((u8 *)&saddr, DRV_SENT_ADDR, 4);   
   \   000002A8   0x2204             MOVS     R2,#+4
   \   000002AA   0xF44F 0x7101      MOV      R1,#+516
   \   000002AE   0x4668             MOV      R0,SP
   \   000002B0   0x.... 0x....      BL       FRAMMultiRead
    511            if(saddr%sizeof(stREAD_VALUE) > 0 || saddr > FLASH_DATA_SIZE) 
   \   000002B4   0x9800             LDR      R0,[SP, #+0]
   \   000002B6   0xF010 0x0F7F      TST      R0,#0x7F
   \   000002BA   0xD102             BNE.N    ??InitPara_23
   \   000002BC   0xF5B0 0x0F50      CMP      R0,#+13631488
   \   000002C0   0xD901             BLS.N    ??InitPara_24
    512              saddr = DataSaveAddr; //RTC_BK_Addr->Sent_Addr;
   \                     ??InitPara_23: (+1)
   \   000002C2   0x6828             LDR      R0,[R5, #+0]
   \   000002C4   0x9000             STR      R0,[SP, #+0]
    513            DataSentAddr = saddr;
   \                     ??InitPara_24: (+1)
   \   000002C6   0x9800             LDR      R0,[SP, #+0]
   \   000002C8   0x.... 0x....      LDR.W    R1,??DataTable37_2
   \   000002CC   0x6008             STR      R0,[R1, #+0]
    514            
    515            IWDG_ReloadCounter();
   \   000002CE   0x.... 0x....      BL       IWDG_ReloadCounter
    516            
    517          
    518          	if(Setting.t_Buzzer > 10) 
   \   000002D2   0x8860             LDRH     R0,[R4, #+2]
   \   000002D4   0x280B             CMP      R0,#+11
   \   000002D6   0xDB01             BLT.N    ??InitPara_25
    519          		Setting.t_Buzzer = 10;
   \   000002D8   0x200A             MOVS     R0,#+10
   \   000002DA   0x8060             STRH     R0,[R4, #+2]
    520          }
   \                     ??InitPara_25: (+1)
   \   000002DC   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return
    521          
    522          /*
    523          ********************************************************************************
    524          * Description : SaveData
    525          * Arguments   : None
    526          * Return      : None
    527          * Note        : 
    528          ******************************************************************************** 
    529          */

   \                                 In section .text, align 2, keep-with-next
    530          void MMCSaveData(void)
    531          {
   \                     MMCSaveData: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB09D             SUB      SP,SP,#+116
    532           	sysinfo_t *s = &_sysinfo;   
    533            
    534           	if(open_append(&fp, F_Name)==FR_OK) {
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable37_3
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable37_4
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable37_5
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       open_append
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xF040 0x8144      BNE.W    ??MMCSaveData_0
    535              f_printf(&fp, "\n");
   \   0000001E   0x....             ADR.N    R1,??DataTable28  ;; "\n"
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0x.... 0x....      BL       f_printf
    536          #if 0	
    537          	                   // Date		
    538          		f_printf(&fp, "%01d%01d.%01d%01d.%01d%01d\t",    
    539                           		s->tm_ptr.tm_year/10, s->tm_ptr.tm_year%10, s->tm_ptr.tm_mon/10, s->tm_ptr.tm_mon%10, s->tm_ptr.tm_mday/10, s->tm_ptr.tm_mday%10);
    540                             // Time
    541          		f_printf(&fp, "%01d%01d:%01d%01d:%01d%01d\t",    
    542                           		s->tm_ptr.tm_hour/10, s->tm_ptr.tm_hour%10, s->tm_ptr.tm_min/10, s->tm_ptr.tm_min%10, s->tm_ptr.tm_sec/10, s->tm_ptr.tm_sec%10);
    543                             // DpfTemp, DpfPress, NOxIn, NOxOut
    544          		f_printf(&fp, "%01d\t%01d\t%01d\t%01d\t",ReadValue.DpfTemp, ReadValue.DpfPress, ReadValue.NOxIn, ReadValue.NOxOut);
    545                             // TempIn, TempOut, DosingRate(lu), UreaLevel
    546          		f_printf(&fp, "%01d\t%01d\t%01d\t%01d\t", ReadValue.TempIn, ReadValue.TempOut, ReadValue.DosingRate, ReadValue.UreaLevel);
    547                             // MAF, State, Concentration, Vbat
    548          		f_printf(&fp, "%01d\t%01d\t%01d", ReadValue.MAF, ReadValue.Concentration, ReadValue.Vbat);
    549          #else
    550              f_printf(&fp, "%01d%01d.%01d%01d.%01d%01d\t",    
    551                           		s->tm_ptr.tm_year/10, s->tm_ptr.tm_year%10, s->tm_ptr.tm_mon/10, s->tm_ptr.tm_mon%10, s->tm_ptr.tm_mday/10, s->tm_ptr.tm_mday%10);
   \   00000026   0x.... 0x....      LDR.W    R7,??DataTable37_6
   \   0000002A   0x6AB9             LDR      R1,[R7, #+40]
   \   0000002C   0x6AFB             LDR      R3,[R7, #+44]
   \   0000002E   0x6B38             LDR      R0,[R7, #+48]
   \   00000030   0x220A             MOVS     R2,#+10
   \   00000032   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \   00000036   0x260A             MOVS     R6,#+10
   \   00000038   0xFB93 0xFCF6      SDIV     R12,R3,R6
   \   0000003C   0xFB91 0xFEF6      SDIV     LR,R1,R6
   \   00000040   0xFB06 0x111E      MLS      R1,R6,LR,R1
   \   00000044   0x9103             STR      R1,[SP, #+12]
   \   00000046   0xF8CD 0xE008      STR      LR,[SP, #+8]
   \   0000004A   0xFB06 0x311C      MLS      R1,R6,R12,R3
   \   0000004E   0x9101             STR      R1,[SP, #+4]
   \   00000050   0xF8CD 0xC000      STR      R12,[SP, #+0]
   \   00000054   0xFB06 0x0312      MLS      R3,R6,R2,R0
   \   00000058   0x.... 0x....      ADR.W    R1,?_1
   \   0000005C   0x4628             MOV      R0,R5
   \   0000005E   0x.... 0x....      BL       f_printf
    552                             // Time
    553          		f_printf(&fp, "%01d%01d:%01d%01d:%01d%01d\t",    
    554                           		s->tm_ptr.tm_hour/10, s->tm_ptr.tm_hour%10, s->tm_ptr.tm_min/10, s->tm_ptr.tm_min%10, s->tm_ptr.tm_sec/10, s->tm_ptr.tm_sec%10);
   \   00000062   0x69F8             LDR      R0,[R7, #+28]
   \   00000064   0x6A39             LDR      R1,[R7, #+32]
   \   00000066   0x6A7B             LDR      R3,[R7, #+36]
   \   00000068   0x4632             MOV      R2,R6
   \   0000006A   0xFB93 0xF2F2      SDIV     R2,R3,R2
   \   0000006E   0x4637             MOV      R7,R6
   \   00000070   0xFB91 0xF7F7      SDIV     R7,R1,R7
   \   00000074   0x46B4             MOV      R12,R6
   \   00000076   0xFB90 0xFCFC      SDIV     R12,R0,R12
   \   0000007A   0xFB06 0x001C      MLS      R0,R6,R12,R0
   \   0000007E   0x9003             STR      R0,[SP, #+12]
   \   00000080   0xF8CD 0xC008      STR      R12,[SP, #+8]
   \   00000084   0xFB06 0x1017      MLS      R0,R6,R7,R1
   \   00000088   0x9001             STR      R0,[SP, #+4]
   \   0000008A   0x9700             STR      R7,[SP, #+0]
   \   0000008C   0xFB06 0x3312      MLS      R3,R6,R2,R3
   \   00000090   0x.... 0x....      ADR.W    R1,?_2
   \   00000094   0x4628             MOV      R0,R5
   \   00000096   0x.... 0x....      BL       f_printf
    555              f_printf(&fp, "%01d\t%01d\t%01d\t%01d\t",
    556          	                  ReadValue.DpfValue.f_REG,ReadValue.DpfValue.t_REG,ReadValue.DpfValue.f_SCR,ReadValue.DpfValue.t_SCR);
   \   0000009A   0x.... 0x....      LDR.W    R11,??DataTable37_7
   \   0000009E   0xF10B 0x070C      ADD      R7,R11,#+12
   \   000000A2   0xF10B 0x082D      ADD      R8,R11,#+45
   \   000000A6   0x.... 0x....      ADR.W    R9,?_3
   \   000000AA   0xF8B8 0x0008      LDRH     R0,[R8, #+8]
   \   000000AE   0x9001             STR      R0,[SP, #+4]
   \   000000B0   0xF8B8 0x0006      LDRH     R0,[R8, #+6]
   \   000000B4   0x9000             STR      R0,[SP, #+0]
   \   000000B6   0x8B7B             LDRH     R3,[R7, #+26]
   \   000000B8   0x8ABA             LDRH     R2,[R7, #+20]
   \   000000BA   0x4649             MOV      R1,R9
   \   000000BC   0x4628             MOV      R0,R5
   \   000000BE   0x.... 0x....      BL       f_printf
    557          		f_printf(&fp, "%01d\t%01d\t%01d\t%01d\t",
    558          	                  ReadValue.TempIn,ReadValue.DpfValue.T[1],ReadValue.DpfValue.T[2],ReadValue.DpfValue.T[3]);
   \   000000C2   0xF10B 0x0A3E      ADD      R10,R11,#+62
   \   000000C6   0x89B8             LDRH     R0,[R7, #+12]
   \   000000C8   0x9001             STR      R0,[SP, #+4]
   \   000000CA   0x8978             LDRH     R0,[R7, #+10]
   \   000000CC   0x9000             STR      R0,[SP, #+0]
   \   000000CE   0x893B             LDRH     R3,[R7, #+8]
   \   000000D0   0xF9BA 0x2006      LDRSH    R2,[R10, #+6]
   \   000000D4   0x4649             MOV      R1,R9
   \   000000D6   0x4628             MOV      R0,R5
   \   000000D8   0x.... 0x....      BL       f_printf
    559          		f_printf(&fp, "%01d\t%01d\t%01d\t%01d\t", 
    560                              ReadValue.DpfValue.P,ReadValue.DpfValue.baseP1,ReadValue.DpfValue.FPD,ReadValue.DpfValue.Sig.Ready);
   \   000000DC   0x7FB8             LDRB     R0,[R7, #+30]
   \   000000DE   0xF000 0x0001      AND      R0,R0,#0x1
   \   000000E2   0x9001             STR      R0,[SP, #+4]
   \   000000E4   0x7DF8             LDRB     R0,[R7, #+23]
   \   000000E6   0x9000             STR      R0,[SP, #+0]
   \   000000E8   0xF8B8 0x3004      LDRH     R3,[R8, #+4]
   \   000000EC   0x89FA             LDRH     R2,[R7, #+14]
   \   000000EE   0x4649             MOV      R1,R9
   \   000000F0   0x4628             MOV      R0,R5
   \   000000F2   0x.... 0x....      BL       f_printf
    561              f_printf(&fp, "%01d\t%01d\t%01d\t%01d\t", 
    562                              ReadValue.Tavg,ReadValue.NOxIn,ReadValue.NOxOut,ReadValue.MAF);
   \   000000F6   0xF8BA 0x0004      LDRH     R0,[R10, #+4]
   \   000000FA   0x9001             STR      R0,[SP, #+4]
   \   000000FC   0xF9BA 0x0002      LDRSH    R0,[R10, #+2]
   \   00000100   0x9000             STR      R0,[SP, #+0]
   \   00000102   0xF9BA 0x3000      LDRSH    R3,[R10, #+0]
   \   00000106   0xF9BA 0x200A      LDRSH    R2,[R10, #+10]
   \   0000010A   0x4649             MOV      R1,R9
   \   0000010C   0x4628             MOV      R0,R5
   \   0000010E   0x.... 0x....      BL       f_printf
    563              f_printf(&fp, "%02d.%02d\t%02d.%02d\t", 
    564                              ReadValue.DosingRatehouer/100, ReadValue.DosingRatehouer%100,ReadValue.BV/100, ReadValue.BV%100);
   \   00000112   0xF10B 0x0B5E      ADD      R11,R11,#+94
   \   00000116   0xF8BB 0x0006      LDRH     R0,[R11, #+6]
   \   0000011A   0xF8DA 0x1010      LDR      R1,[R10, #+16]
   \   0000011E   0x2264             MOVS     R2,#+100
   \   00000120   0xFB90 0xF3F2      SDIV     R3,R0,R2
   \   00000124   0xFBB1 0xF2F2      UDIV     R2,R1,R2
   \   00000128   0xF04F 0x0C64      MOV      R12,#+100
   \   0000012C   0xFB0C 0x0013      MLS      R0,R12,R3,R0
   \   00000130   0x9001             STR      R0,[SP, #+4]
   \   00000132   0x9300             STR      R3,[SP, #+0]
   \   00000134   0x4660             MOV      R0,R12
   \   00000136   0xFB00 0x1312      MLS      R3,R0,R2,R1
   \   0000013A   0x.... 0x....      ADR.W    R1,?_4
   \   0000013E   0x4628             MOV      R0,R5
   \   00000140   0x.... 0x....      BL       f_printf
   \   00000144   0x8A78             LDRH     R0,[R7, #+18]
   \   00000146   0x2164             MOVS     R1,#+100
   \   00000148   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   0000014C   0x7FBA             LDRB     R2,[R7, #+30]
   \   0000014E   0xF3C2 0x0380      UBFX     R3,R2,#+2,#+1
   \   00000152   0x9303             STR      R3,[SP, #+12]
   \   00000154   0xF3C2 0x0240      UBFX     R2,R2,#+1,#+1
   \   00000158   0x9202             STR      R2,[SP, #+8]
   \   0000015A   0x2264             MOVS     R2,#+100
   \   0000015C   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   00000160   0x9001             STR      R0,[SP, #+4]
   \   00000162   0x9100             STR      R1,[SP, #+0]
   \   00000164   0xF9BB 0x3002      LDRSH    R3,[R11, #+2]
   \   00000168   0xF89B 0x2000      LDRB     R2,[R11, #+0]
   \   0000016C   0x.... 0x....      ADR.W    R1,?_5
   \   00000170   0x4628             MOV      R0,R5
    565              f_printf(&fp, "%01d\t%01d\t%01d.%01d\t%01d\t%01d\t", 
    566                              ReadValue.UreaLevel,ReadValue.TankTemp,ReadValue.DpfValue.IHC/100,ReadValue.DpfValue.IHC%100,ReadValue.DpfValue.Sig.Igniter,ReadValue.DpfValue.Sig.Motor);
   \   00000172   0x.... 0x....      BL       f_printf
    567              f_printf(&fp, "%01d\t%01d\t%01d\t", 
    568                              ReadValue.SupplyP,ReadValue.DpfValue.Error.B,ReadValue.DpfValue.Check.B);
   \   00000176   0x7E78             LDRB     R0,[R7, #+25]
   \   00000178   0x9000             STR      R0,[SP, #+0]
   \   0000017A   0x7E3B             LDRB     R3,[R7, #+24]
   \   0000017C   0xF8BA 0x200E      LDRH     R2,[R10, #+14]
   \   00000180   0x.... 0x....      ADR.W    R1,?_6
   \   00000184   0x4628             MOV      R0,R5
   \   00000186   0x.... 0x....      BL       f_printf
    569              f_printf(&fp, "%01d\t%01d\t%01d\t%01d\t", 
    570                              ReadValue.Err.B,ReadValue.Chk.W,ReadValue.DpfValue.DrvTime/3600,((ReadValue.DpfValue.Sig.B>>5)&0x03));
   \   0000018A   0x7FB8             LDRB     R0,[R7, #+30]
   \   0000018C   0xF3C0 0x1041      UBFX     R0,R0,#+5,#+2
   \   00000190   0x9001             STR      R0,[SP, #+4]
   \   00000192   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000196   0xF44F 0x6161      MOV      R1,#+3600
   \   0000019A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000019E   0x9000             STR      R0,[SP, #+0]
   \   000001A0   0xF8BA 0x301A      LDRH     R3,[R10, #+26]
   \   000001A4   0xF89A 0x2018      LDRB     R2,[R10, #+24]
   \   000001A8   0x4649             MOV      R1,R9
   \   000001AA   0x4628             MOV      R0,R5
   \   000001AC   0x.... 0x....      BL       f_printf
   \   000001B0   0xF8BB 0x0018      LDRH     R0,[R11, #+24]
   \   000001B4   0x4631             MOV      R1,R6
   \   000001B6   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   000001BA   0xF8BB 0x201C      LDRH     R2,[R11, #+28]
   \   000001BE   0xF8BB 0x301E      LDRH     R3,[R11, #+30]
   \   000001C2   0xF3C3 0x3C40      UBFX     R12,R3,#+13,#+1
   \   000001C6   0xF8CD 0xC070      STR      R12,[SP, #+112]
   \   000001CA   0xF3C3 0x3C00      UBFX     R12,R3,#+12,#+1
   \   000001CE   0xF8CD 0xC06C      STR      R12,[SP, #+108]
   \   000001D2   0xF3C3 0x2CC0      UBFX     R12,R3,#+11,#+1
   \   000001D6   0xF8CD 0xC068      STR      R12,[SP, #+104]
   \   000001DA   0xF3C3 0x2C80      UBFX     R12,R3,#+10,#+1
   \   000001DE   0xF8CD 0xC064      STR      R12,[SP, #+100]
   \   000001E2   0xF3C3 0x2C40      UBFX     R12,R3,#+9,#+1
   \   000001E6   0xF8CD 0xC060      STR      R12,[SP, #+96]
   \   000001EA   0xF3C3 0x2C00      UBFX     R12,R3,#+8,#+1
   \   000001EE   0xF8CD 0xC05C      STR      R12,[SP, #+92]
   \   000001F2   0xF3C3 0x1CC0      UBFX     R12,R3,#+7,#+1
   \   000001F6   0xF8CD 0xC058      STR      R12,[SP, #+88]
   \   000001FA   0xF3C3 0x1C80      UBFX     R12,R3,#+6,#+1
   \   000001FE   0xF8CD 0xC054      STR      R12,[SP, #+84]
   \   00000202   0xF3C3 0x1C40      UBFX     R12,R3,#+5,#+1
   \   00000206   0xF8CD 0xC050      STR      R12,[SP, #+80]
   \   0000020A   0xF3C3 0x1C00      UBFX     R12,R3,#+4,#+1
   \   0000020E   0xF8CD 0xC04C      STR      R12,[SP, #+76]
   \   00000212   0xF3C3 0x0CC0      UBFX     R12,R3,#+3,#+1
   \   00000216   0xF8CD 0xC048      STR      R12,[SP, #+72]
   \   0000021A   0xF3C3 0x0C80      UBFX     R12,R3,#+2,#+1
   \   0000021E   0xF8CD 0xC044      STR      R12,[SP, #+68]
   \   00000222   0xF3C3 0x0C40      UBFX     R12,R3,#+1,#+1
   \   00000226   0xF8CD 0xC040      STR      R12,[SP, #+64]
   \   0000022A   0xF003 0x0301      AND      R3,R3,#0x1
   \   0000022E   0x930F             STR      R3,[SP, #+60]
   \   00000230   0xF3C2 0x2340      UBFX     R3,R2,#+9,#+1
   \   00000234   0x930E             STR      R3,[SP, #+56]
   \   00000236   0xF3C2 0x2300      UBFX     R3,R2,#+8,#+1
   \   0000023A   0x930D             STR      R3,[SP, #+52]
   \   0000023C   0xF3C2 0x13C0      UBFX     R3,R2,#+7,#+1
   \   00000240   0x930C             STR      R3,[SP, #+48]
   \   00000242   0xF3C2 0x1380      UBFX     R3,R2,#+6,#+1
   \   00000246   0x930B             STR      R3,[SP, #+44]
   \   00000248   0xF3C2 0x1340      UBFX     R3,R2,#+5,#+1
   \   0000024C   0x930A             STR      R3,[SP, #+40]
   \   0000024E   0xF3C2 0x1300      UBFX     R3,R2,#+4,#+1
   \   00000252   0x9309             STR      R3,[SP, #+36]
   \   00000254   0xF3C2 0x03C0      UBFX     R3,R2,#+3,#+1
   \   00000258   0x9308             STR      R3,[SP, #+32]
   \   0000025A   0xF3C2 0x0380      UBFX     R3,R2,#+2,#+1
   \   0000025E   0x9307             STR      R3,[SP, #+28]
   \   00000260   0xF3C2 0x0340      UBFX     R3,R2,#+1,#+1
   \   00000264   0x9306             STR      R3,[SP, #+24]
   \   00000266   0xF002 0x0201      AND      R2,R2,#0x1
   \   0000026A   0x9205             STR      R2,[SP, #+20]
   \   0000026C   0xF8BB 0x201A      LDRH     R2,[R11, #+26]
   \   00000270   0x9204             STR      R2,[SP, #+16]
   \   00000272   0xF89B 0x2001      LDRB     R2,[R11, #+1]
   \   00000276   0x9203             STR      R2,[SP, #+12]
   \   00000278   0x7DBA             LDRB     R2,[R7, #+22]
   \   0000027A   0x1C52             ADDS     R2,R2,#+1
   \   0000027C   0x9202             STR      R2,[SP, #+8]
   \   0000027E   0xFB06 0x0011      MLS      R0,R6,R1,R0
   \   00000282   0x9001             STR      R0,[SP, #+4]
   \   00000284   0x9100             STR      R1,[SP, #+0]
   \   00000286   0x783B             LDRB     R3,[R7, #+0]
   \   00000288   0xF898 0x200C      LDRB     R2,[R8, #+12]
   \   0000028C   0x.... 0x....      ADR.W    R1,?_7
   \   00000290   0x4628             MOV      R0,R5
    571          //    f_printf(&fp, "%01d\t%01d\t%01d\t%01d\t", 
    572          //                    ReadValue.PM_Senser1,ReadValue.PM_Senser2,ReadValue.PM_Senser3,ReadValue.PM_Senser4);
    573              f_printf(&fp, "%01d\t%01d\t%01d.%01d\t%01d\t%01d\t%0ld\t%01d%01d%01d%01d%01d%01d%01d%01d%01d%01d\t%01d%01d%01d%01d%01d%01d%01d%01d%01d%01d%01d%01d%01d%01d", 
    574                              ReadValue.DpfValue.RegenStartKey,ReadValue.Speed,ReadValue.UreaQuality/10,ReadValue.UreaQuality%10,ReadValue.DpfValue.CarType+1,ReadValue.LimitStep,ReadValue.DPF_Crack,
    575                               ReadValue.PM1_Error.CIRC_DIAG, ReadValue.PM1_Error.SELF_DIAG, ReadValue.PM1_Error.HEATR_DIAG, ReadValue.PM1_Error.POS_DIAG, ReadValue.PM1_Error.HEATR_ON, ReadValue.PM1_Error.TEMP_MEAS,
    576                               ReadValue.PM1_Error.HEATR_OFF, ReadValue.PM1_Error.NOT_RDY, ReadValue.PM1_Error.BYTT, ReadValue.PM1_Error.CAN, //PM1 Error 
    577                                 
    578                               ReadValue.PM2_Error.CIRC_DIAG, ReadValue.PM2_Error.SELF_DIAG, ReadValue.PM2_Error.HEATR_DIAG, ReadValue.PM2_Error.POS_DIAG, ReadValue.PM2_Error.HEATR_ON, ReadValue.PM2_Error.TEMP_MEAS, ReadValue.PM2_Error.HEATR_OFF,
    579                               ReadValue.PM2_Error.NOT_RDY, ReadValue.PM2_Error.BYTT, ReadValue.PM2_Error.CAN, ReadValue.PM2_Error.DPF_CRACK, ReadValue.PM2_Error.MEM, ReadValue.PM2_Error.SD, ReadValue.PM2_Error.DPF_COM);
   \   00000292   0x.... 0x....      BL       f_printf
    580          //    f_printf(&fp, "\t%01d\t%01d\t%X\t%X", 
    581          //                    NoxFail[0],NoxFail[1],NoxErr[0],NoxErr[1]);
    582          //    f_printf(&fp, "\t%X\t%X\t%X\t%X\t%X\t%X", 
    583          //                    NoxData[0][0],NoxData[0][1],NoxData[0][2],NoxData[1][0],NoxData[1][1],NoxData[1][2]);
    584          #endif    
    585          		f_close(&fp);    
   \   00000296   0x4628             MOV      R0,R5
   \   00000298   0x.... 0x....      BL       f_close
    586            	Flags.SaveOkFlag = 1;
   \   0000029C   0x8820             LDRH     R0,[R4, #+0]
   \   0000029E   0xF440 0x7080      ORR      R0,R0,#0x100
   \   000002A2   0x8020             STRH     R0,[R4, #+0]
   \   000002A4   0xE004             B.N      ??MMCSaveData_1
    587          	}
    588            else {
    589            	Flags.SaveOkFlag = 0;  
   \                     ??MMCSaveData_0: (+1)
   \   000002A6   0x8820             LDRH     R0,[R4, #+0]
   \   000002A8   0xF64F 0x61FF      MOVW     R1,#+65279
   \   000002AC   0x4008             ANDS     R0,R1,R0
   \   000002AE   0x8020             STRH     R0,[R4, #+0]
    590            }
    591          }
   \                     ??MMCSaveData_1: (+1)
   \   000002B0   0xB01D             ADD      SP,SP,#+116
   \   000002B2   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    592          
    593          /*
    594          ********************************************************************************
    595          * Description : FileCreate
    596          * Arguments   : None
    597          * Return      : None
    598          * Note        : 
    599          ******************************************************************************** 
    600          */

   \                                 In section .text, align 2, keep-with-next
    601          unsigned char FileCreate(void)
    602          {
   \                     FileCreate: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
    603           	sysinfo_t *s = &_sysinfo;
    604            int canbps = 0;
                       ^
Warning[Pe550]: variable "canbps" was set but never used
    605           
    606            memset((INT8U *)F_Name, 0x00, 12);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable37_5
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x210C             MOVS     R1,#+12
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
    607            
    608          	F_Name[0] = (s->tm_ptr.tm_year/10) + 0x30;	// convert to ascii code
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable37_6
   \   00000014   0x6B02             LDR      R2,[R0, #+48]
   \   00000016   0x210A             MOVS     R1,#+10
   \   00000018   0xFB92 0xF3F1      SDIV     R3,R2,R1
   \   0000001C   0xF103 0x0130      ADD      R1,R3,#+48
   \   00000020   0x7021             STRB     R1,[R4, #+0]
    609          	F_Name[1] = (s->tm_ptr.tm_year%10) + 0x30;
   \   00000022   0x210A             MOVS     R1,#+10
   \   00000024   0xFB01 0x2213      MLS      R2,R1,R3,R2
   \   00000028   0x3230             ADDS     R2,R2,#+48
   \   0000002A   0x7062             STRB     R2,[R4, #+1]
    610          	F_Name[2] = (s->tm_ptr.tm_mon/10) + 0x30;	// convert to ascii code
   \   0000002C   0x6AC2             LDR      R2,[R0, #+44]
   \   0000002E   0x460B             MOV      R3,R1
   \   00000030   0xFB92 0xF3F3      SDIV     R3,R2,R3
   \   00000034   0xF103 0x0530      ADD      R5,R3,#+48
   \   00000038   0x70A5             STRB     R5,[R4, #+2]
    611          	F_Name[3] = (s->tm_ptr.tm_mon%10) + 0x30;
   \   0000003A   0xFB01 0x2213      MLS      R2,R1,R3,R2
   \   0000003E   0x3230             ADDS     R2,R2,#+48
   \   00000040   0x70E2             STRB     R2,[R4, #+3]
    612          	F_Name[4] = (s->tm_ptr.tm_mday/10) + 0x30;	// convert to ascii code
   \   00000042   0x6A80             LDR      R0,[R0, #+40]
   \   00000044   0x460A             MOV      R2,R1
   \   00000046   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \   0000004A   0xF102 0x0330      ADD      R3,R2,#+48
   \   0000004E   0x7123             STRB     R3,[R4, #+4]
    613          	F_Name[5] = (s->tm_ptr.tm_mday%10) + 0x30;
   \   00000050   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000054   0x3030             ADDS     R0,R0,#+48
   \   00000056   0x7160             STRB     R0,[R4, #+5]
    614          	F_Name[6] = '.';	
   \   00000058   0x202E             MOVS     R0,#+46
   \   0000005A   0x71A0             STRB     R0,[R4, #+6]
    615          	F_Name[7] = 'x';
   \   0000005C   0x2078             MOVS     R0,#+120
   \   0000005E   0x71E0             STRB     R0,[R4, #+7]
    616          	F_Name[8] = 'l';	
   \   00000060   0x206C             MOVS     R0,#+108
   \   00000062   0x7220             STRB     R0,[R4, #+8]
    617          	F_Name[9] = 's';
   \   00000064   0x2073             MOVS     R0,#+115
   \   00000066   0x7260             STRB     R0,[R4, #+9]
    618            
    619            if(Setting.CanBPS)
    620              canbps = 500;
    621            else
    622              canbps = 250;
    623            
    624            if(f_open(&fp,F_Name,FA_OPEN_EXISTING) != FR_OK) { //file MUST exist for reading
   \   00000068   0x.... 0x....      LDR.W    R5,??DataTable37_4
   \   0000006C   0x2200             MOVS     R2,#+0
   \   0000006E   0x4621             MOV      R1,R4
   \   00000070   0x4628             MOV      R0,R5
   \   00000072   0x.... 0x....      BL       f_open
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD047             BEQ.N    ??FileCreate_0
    625             	if(f_open(&fp,F_Name,FA_CREATE_ALWAYS| FA_WRITE) == FR_OK)
   \   0000007A   0x.... 0x....      LDR.W    R6,??DataTable37_3
   \   0000007E   0x220A             MOVS     R2,#+10
   \   00000080   0x4621             MOV      R1,R4
   \   00000082   0x4628             MOV      R0,R5
   \   00000084   0x.... 0x....      BL       f_open
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD137             BNE.N    ??FileCreate_1
    626           	  {
    627          #if 0      
    628                f_printf(&fp, "Date\tTime\tDpfTemp\tDpfPress\tNOxIn\tNOxOut\t");
    629                f_printf(&fp, "TempIn\tTempOut\tDosingRate\tTankLevel\t");
    630                f_printf(&fp, "MAF\tState\tConcentration\tVbat\t");
    631                f_printf(&fp, "OBD V%01d.%01d\t", DMS_ver/100, DMS_ver%100);
    632                f_printf(&fp, "User %01d\tCAN %01d kbps", ReadValue.User, canbps);
    633          #else
    634                f_printf(&fp, "Date\tTime\tStep\tRegTime\tscrStep\tscrRegTime\tT-up\tT2\tT3\tT4\tP1\tBaseP1\tFPD\tReady\t");
   \   0000008C   0x.... 0x....      ADR.W    R1,?_8
   \   00000090   0x4628             MOV      R0,R5
   \   00000092   0x.... 0x....      BL       f_printf
    635            		f_printf(&fp, "Tavg\tNOx-up\tNOx-dn\tMAF\tDosingRate\t");
   \   00000096   0x.... 0x....      ADR.W    R1,?_9
   \   0000009A   0x4628             MOV      R0,R5
   \   0000009C   0x.... 0x....      BL       f_printf
    636            		f_printf(&fp, "BV\tUreaLevel\tTankTemp\tCurrent\tIgniter\tMotor\tSupplyP\t");
   \   000000A0   0x.... 0x....      ADR.W    R1,?_10
   \   000000A4   0x4628             MOV      R0,R5
   \   000000A6   0x.... 0x....      BL       f_printf
    637            		f_printf(&fp, "DpfError\tDpfCheck\tScrError\tScrCheck\tdrvH\tRegenSts\t");
   \   000000AA   0x.... 0x....      ADR.W    R1,?_11
   \   000000AE   0x4628             MOV      R0,R5
   \   000000B0   0x.... 0x....      BL       f_printf
    638            		f_printf(&fp, "RegenMode\tSpeed\tUreaQuality\tCarType\tLimitStep\tDPFCrack\tPM1Err\tPM2Err\t");
   \   000000B4   0x.... 0x....      ADR.W    R1,?_12
   \   000000B8   0x4628             MOV      R0,R5
   \   000000BA   0x.... 0x....      BL       f_printf
   \   000000BE   0x....             LDR.N    R0,??DataTable33_7
   \   000000C0   0x8F80             LDRH     R0,[R0, #+60]
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable36_6
   \   000000C6   0x8809             LDRH     R1,[R1, #+0]
   \   000000C8   0x2264             MOVS     R2,#+100
   \   000000CA   0xFB90 0xF3F2      SDIV     R3,R0,R2
   \   000000CE   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \   000000D2   0x2464             MOVS     R4,#+100
   \   000000D4   0xFB04 0x0013      MLS      R0,R4,R3,R0
   \   000000D8   0x9001             STR      R0,[SP, #+4]
   \   000000DA   0x9300             STR      R3,[SP, #+0]
   \   000000DC   0xFB04 0x1312      MLS      R3,R4,R2,R1
   \   000000E0   0x.... 0x....      ADR.W    R1,?_13
   \   000000E4   0x4628             MOV      R0,R5
    639          //  		f_printf(&fp, "NOxFail1\tNOxFail2\tNOxErr1\tNOxErr2\t");
    640          //  		f_printf(&fp, "NOxData15\tNOxData16\tNOxData17\tNOxData25\tNOxData26\tNOxData27\t");
    641                f_printf(&fp, "OBD V%01d.%02d\tECU V%01d.%02d", DMS_ver/100, DMS_ver%100, ReadValue.Ver/100, ReadValue.Ver%100);
   \   000000E6   0x.... 0x....      BL       f_printf
    642          #endif      
    643                f_close(&fp);
   \   000000EA   0x4628             MOV      R0,R5
   \   000000EC   0x.... 0x....      BL       f_close
    644          		  Flags.SaveOkFlag = 1;     	
   \   000000F0   0x8830             LDRH     R0,[R6, #+0]
   \   000000F2   0xF440 0x7080      ORR      R0,R0,#0x100
   \   000000F6   0x8030             STRH     R0,[R6, #+0]
    645          		  return 1;
   \   000000F8   0x2001             MOVS     R0,#+1
   \   000000FA   0xBD76             POP      {R1,R2,R4-R6,PC}
    646          	  }
    647          	  else{
    648           	    Flags.SaveOkFlag = 0;    	
   \                     ??FileCreate_1: (+1)
   \   000000FC   0x8830             LDRH     R0,[R6, #+0]
   \   000000FE   0xF64F 0x61FF      MOVW     R1,#+65279
   \   00000102   0x4008             ANDS     R0,R1,R0
   \   00000104   0x8030             STRH     R0,[R6, #+0]
    649          	    return 0;
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0xBD76             POP      {R1,R2,R4-R6,PC}
    650          	  }	  
    651            }
    652            else {
    653          	  f_close(&fp);
   \                     ??FileCreate_0: (+1)
   \   0000010A   0x4628             MOV      R0,R5
   \   0000010C   0x.... 0x....      BL       f_close
    654            	MMCSaveData();
   \   00000110   0x.... 0x....      BL       MMCSaveData
    655            	return 1; 
   \   00000114   0x2001             MOVS     R0,#+1
   \   00000116   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    656            }       		
    657          }
    658          
    659          /*
    660          ********************************************************************************
    661          * Description : Disk Detect
    662          * Arguments   : None
    663          * Return      : None
    664          * Note        : 
    665          ******************************************************************************** 
    666          */

   \                                 In section .text, align 2, keep-with-next
    667          int Disk_Dtect(void)
    668          {
   \                     Disk_Dtect: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    669          	if(!MMC_DETECT() && !DetectFlag) 
   \   00000002   0x2108             MOVS     R1,#+8
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable36_3  ;; 0x40021000
   \   00000008   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable37_8
   \   00000010   0x7809             LDRB     R1,[R1, #+0]
   \   00000012   0x4308             ORRS     R0,R1,R0
   \   00000014   0xD101             BNE.N    ??Disk_Dtect_0
    670          		return 1;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xBD02             POP      {R1,PC}
    671          	else {
    672          		Flags.SaveOkFlag = 0; 
   \                     ??Disk_Dtect_0: (+1)
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable37_3
   \   0000001E   0x8801             LDRH     R1,[R0, #+0]
   \   00000020   0xF64F 0x62FF      MOVW     R2,#+65279
   \   00000024   0x4011             ANDS     R1,R2,R1
   \   00000026   0x8001             STRH     R1,[R0, #+0]
    673            	return 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xBD02             POP      {R1,PC}          ;; return
    674          	}
    675          }
    676          
    677          /*
    678          ********************************************************************************
    679          * Description : System Check
    680          * Arguments   : None
    681          * Return      : None
    682          * Note        : 
    683          ******************************************************************************** 
    684          */

   \                                 In section .text, align 2, keep-with-next
    685          void MMC_Check(void) 
    686          {
   \                     MMC_Check: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    687            int res;
    688            
    689            if(!Flags.CheckFlag) {
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable37_3
   \   00000006   0x8820             LDRH     R0,[R4, #+0]
   \   00000008   0xF3C0 0x10C0      UBFX     R0,R0,#+7,#+1
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD12E             BNE.N    ??MMC_Check_0
    690              if(Disk_Dtect()) {
   \   00000010   0x.... 0x....      BL       Disk_Dtect
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD026             BEQ.N    ??MMC_Check_1
    691                if(disk_initialize(0) == FR_OK)	{   // 0: ATA, 1: USB
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       disk_initialize
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD117             BNE.N    ??MMC_Check_2
    692                  f_mount(&FatFs, "", 0);          
   \   00000022   0x....             ADR.N    R5,??DataTable34  ;; ""
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0x4629             MOV      R1,R5
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable37_9
   \   0000002C   0x.... 0x....      BL       f_mount
    693          				res = scan_files("");	
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0x.... 0x....      BL       scan_files
    694          				if(res == FR_DISK_FULL)	
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable37_10
   \   0000003A   0x2814             CMP      R0,#+20
   \   0000003C   0xD102             BNE.N    ??MMC_Check_3
    695          					Disk_Full = 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x7008             STRB     R0,[R1, #+0]
   \   00000042   0xE001             B.N      ??MMC_Check_4
    696                  else 
    697                    Disk_Full = 0;
   \                     ??MMC_Check_3: (+1)
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x7008             STRB     R0,[R1, #+0]
    698                  DetectFlag = 0;
   \                     ??MMC_Check_4: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable37_8
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
   \   00000050   0xE003             B.N      ??MMC_Check_5
    699                }
    700                else DetectFlag = 1; 
   \                     ??MMC_Check_2: (+1)
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable37_8
   \   00000058   0x7008             STRB     R0,[R1, #+0]
    701                if(Disk_Dtect()) FileCreate();
   \                     ??MMC_Check_5: (+1)
   \   0000005A   0x.... 0x....      BL       Disk_Dtect
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD001             BEQ.N    ??MMC_Check_1
   \   00000062   0x.... 0x....      BL       FileCreate
    702              }
    703                Flags.CheckFlag = 1;
   \                     ??MMC_Check_1: (+1)
   \   00000066   0x8820             LDRH     R0,[R4, #+0]
   \   00000068   0xF040 0x0080      ORR      R0,R0,#0x80
   \   0000006C   0x8020             STRH     R0,[R4, #+0]
    704            }
    705          }
   \                     ??MMC_Check_0: (+1)
   \   0000006E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    706          
    707          /*
    708          ********************************************************************************
    709          * Description : KeyOn_Process
    710          * Arguments   : none
    711          * Return      : 
    712          * Note        : KeyOn check process
    713          ******************************************************************************** 
    714          */

   \                                 In section .text, align 2, keep-with-next
    715          void KeyOn_Process(void)
    716          {
   \                     KeyOn_Process: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    717          	sysinfo_t *s = &_sysinfo 	;
    718          
    719          	/*Key Off시 Power Off*/
    720          
    721            if(POWER_SIG())	{
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable37_6
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable37_11  ;; 0x40020000
   \   0000000A   0xF44F 0x7180      MOV      R1,#+256
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD004             BEQ.N    ??KeyOn_Process_0
    722              s->key.keyon_st = ON;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x7660             STRB     R0,[R4, #+25]
    723              s->key.nStatus = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x76E0             STRB     R0,[R4, #+27]
   \   00000020   0xE001             B.N      ??KeyOn_Process_1
    724            }
    725          	else {
    726              s->key.keyon_st = OFF;
   \                     ??KeyOn_Process_0: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x7660             STRB     R0,[R4, #+25]
    727            }
    728          		
    729          	{
    730          		switch(s->key.nStatus)
   \                     ??KeyOn_Process_1: (+1)
   \   00000026   0x7EE0             LDRB     R0,[R4, #+27]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD111             BNE.N    ??KeyOn_Process_2
    731          		{
    732          		case 0:
    733          			if(s->key.keyon_st == ON)//만약에 on이면...다시 돌아갈....ㅋㅋ
   \   0000002C   0x7E60             LDRB     R0,[R4, #+25]
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD102             BNE.N    ??KeyOn_Process_3
    734          			{
    735          				s->key.nStatus= 0;
    736          				s->key.OffCount = 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x7620             STRB     R0,[R4, #+24]
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}
    737          			}
    738          			else
    739          			{
    740                  vTaskDelay(100);
   \                     ??KeyOn_Process_3: (+1)
   \   00000038   0x2064             MOVS     R0,#+100
   \   0000003A   0x.... 0x....      BL       vTaskDelay
    741                  CHARGE(OFF);
   \   0000003E   0x2200             MOVS     R2,#+0
   \   00000040   0x2102             MOVS     R1,#+2
   \   00000042   0x4628             MOV      R0,R5
   \   00000044   0x.... 0x....      BL       GPIO_WriteBit
    742                  system_power_off();
   \   00000048   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   0000004C   0x.... 0x....      B.W      system_power_off
    743          			}
    744          			break;
    745          		default:
    746          			break;
    747          		}
    748          	}
    749          }
   \                     ??KeyOn_Process_2: (+1)
   \   00000050   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    750          
    751          /*
    752          ********************************************************************************
    753          * Description : SecDataSave
    754          * Arguments   : none
    755          * Return      : 
    756          * Note        : 
    757          ******************************************************************************** 
    758          */

   \                                 In section .text, align 2, keep-with-next
    759          void SecDataSave(void)  
    760          {
   \                     SecDataSave: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    761          	sysinfo_t *s = &_sysinfo;
    762            
    763            if(Flags.SaveDataFlag && s->key.nStatus < 2) {
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable37_3
   \   00000006   0x8820             LDRH     R0,[R4, #+0]
   \   00000008   0xF3C0 0x3000      UBFX     R0,R0,#+12,#+1
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD014             BEQ.N    ??SecDataSave_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable37_6
   \   00000014   0x7EC0             LDRB     R0,[R0, #+27]
   \   00000016   0x2802             CMP      R0,#+2
   \   00000018   0xDA0F             BGE.N    ??SecDataSave_0
    764          //    CheckGPSTimeSyc();
    765              DrvDataUpdate();
   \   0000001A   0x.... 0x....      BL       DrvDataUpdate
    766              Flash_Write_SaveData();
   \   0000001E   0x.... 0x....      BL       Flash_Write_SaveData
    767              if(Setting.FW_Type == USE_MODEM) {
   \   00000022   0x....             LDR.N    R0,??DataTable36_4
   \   00000024   0xF890 0x008A      LDRB     R0,[R0, #+138]
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xD101             BNE.N    ??SecDataSave_1
    768                Modem_SecIntProcess();
   \   0000002C   0x.... 0x....      BL       Modem_SecIntProcess
    769              }
    770              Flags.SaveDataFlag = 0;
   \                     ??SecDataSave_1: (+1)
   \   00000030   0x8820             LDRH     R0,[R4, #+0]
   \   00000032   0xF64E 0x71FF      MOVW     R1,#+61439
   \   00000036   0x4008             ANDS     R0,R1,R0
   \   00000038   0x8020             STRH     R0,[R4, #+0]
    771            }
    772            if(Flags1.GpsDataFlag && s->key.nStatus < 2) {
   \                     ??SecDataSave_0: (+1)
   \   0000003A   0x.... 0x....      LDR.W    R4,??DataTable37_12
   \   0000003E   0x8820             LDRH     R0,[R4, #+0]
   \   00000040   0xF3C0 0x3040      UBFX     R0,R0,#+13,#+1
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD00B             BEQ.N    ??SecDataSave_2
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable37_6
   \   0000004C   0x7EC0             LDRB     R0,[R0, #+27]
   \   0000004E   0x2802             CMP      R0,#+2
   \   00000050   0xDA06             BGE.N    ??SecDataSave_2
    773              GpsDataUpdate();
   \   00000052   0x.... 0x....      BL       GpsDataUpdate
    774              Flags1.GpsDataFlag = 0;
   \   00000056   0x8820             LDRH     R0,[R4, #+0]
   \   00000058   0xF64D 0x71FF      MOVW     R1,#+57343
   \   0000005C   0x4008             ANDS     R0,R1,R0
   \   0000005E   0x8020             STRH     R0,[R4, #+0]
    775            }
    776          }
   \                     ??SecDataSave_2: (+1)
   \   00000060   0xBD10             POP      {R4,PC}          ;; return
    777          
    778          /*
    779          ********************************************************************************
    780          * Description : Analysis Process
    781          * Arguments   : None
    782          * Return      : None
    783          * Note        : 
    784          ******************************************************************************** 
    785          */

   \                                 In section .text, align 2, keep-with-next
    786          void Analysis(void)
    787          {
   \                     Analysis: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    788            //Tank Level 알람
    789          	if ((ReadValue.UreaLevel <= Setting.TLL_Set) && (!Flags1.TLvLAlarmFlag)) { //Low Tank Level Alarm	
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable37_13
   \   00000006   0x7A0A             LDRB     R2,[R1, #+8]
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable37_14
   \   0000000C   0x8A63             LDRH     R3,[R4, #+18]
   \   0000000E   0x.... 0x....      LDR.W    R5,??DataTable37_12
   \   00000012   0x8828             LDRH     R0,[R5, #+0]
   \   00000014   0x461E             MOV      R6,R3
   \   00000016   0x4617             MOV      R7,R2
   \   00000018   0x42BE             CMP      R6,R7
   \   0000001A   0xD320             BCC.N    ??Analysis_0
   \   0000001C   0xF3C0 0x1640      UBFX     R6,R0,#+5,#+1
   \   00000020   0x2E00             CMP      R6,#+0
   \   00000022   0xD11C             BNE.N    ??Analysis_0
    790          		Flags1.HTLvLCntFlag = 1;
   \   00000024   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000028   0x8028             STRH     R0,[R5, #+0]
    791          		if(HTLvLCnt >= Setting.t_DelayTL){			           //HTLvLCntNum = Delay count
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable37_15
   \   0000002E   0x8801             LDRH     R1,[R0, #+0]
   \   00000030   0x8AE2             LDRH     R2,[R4, #+22]
   \   00000032   0x4291             CMP      R1,R2
   \   00000034   0xF0C0 0x80AE      BCC.W    ??Analysis_1
    792                Flags1.TLvHAlarmFlag = 1;
    793                Flags1.TLvLAlarmFlag = 1;
    794                Flags1.HTLvLCntFlag = 0;
   \   00000038   0x2106             MOVS     R1,#+6
   \   0000003A   0x882A             LDRH     R2,[R5, #+0]
   \   0000003C   0xF361 0x1206      BFI      R2,R1,#+4,#+3
   \   00000040   0x802A             STRH     R2,[R5, #+0]
    795          			TLv_Beep = 3;
   \   00000042   0x2103             MOVS     R1,#+3
   \   00000044   0x.... 0x....      LDR.W    R2,??DataTable37_16
   \   00000048   0x8011             STRH     R1,[R2, #+0]
    796          			HTLvLCnt = 0;
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x8001             STRH     R1,[R0, #+0]
    797                NORMAL_LED(OFF);
   \   0000004E   0x2201             MOVS     R2,#+1
   \   00000050   0xF44F 0x5180      MOV      R1,#+4096
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable37_17  ;; 0x40021000
   \   00000058   0x.... 0x....      BL       GPIO_WriteBit
   \   0000005C   0xE09A             B.N      ??Analysis_1
    798              }
    799          	}
    800           	else if ((ReadValue.UreaLevel <= Setting.TLH_Set) && (!Flags1.TLvHAlarmFlag)) {			//Low Tank Level Alarm	
   \                     ??Analysis_0: (+1)
   \   0000005E   0x8AA6             LDRH     R6,[R4, #+20]
   \   00000060   0x4637             MOV      R7,R6
   \   00000062   0x4694             MOV      R12,R2
   \   00000064   0x4567             CMP      R7,R12
   \   00000066   0xD321             BCC.N    ??Analysis_2
   \   00000068   0xF3C0 0x1780      UBFX     R7,R0,#+6,#+1
   \   0000006C   0x2F00             CMP      R7,#+0
   \   0000006E   0xD11D             BNE.N    ??Analysis_2
    801          		Flags1.HTLvHCntFlag = 1;
   \   00000070   0xF040 0x0008      ORR      R0,R0,#0x8
   \   00000074   0x8028             STRH     R0,[R5, #+0]
    802          		if(HTLvHCnt >= Setting.t_DelayTL){			             //HTLvHCntNum = Delay count Time 15S
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable37_18
   \   0000007A   0x880A             LDRH     R2,[R1, #+0]
   \   0000007C   0x8AE3             LDRH     R3,[R4, #+22]
   \   0000007E   0x429A             CMP      R2,R3
   \   00000080   0xF0C0 0x8088      BCC.W    ??Analysis_1
    803                Flags1.TLvHAlarmFlag = 1;
    804                Flags1.HTLvHCntFlag = 0;
   \   00000084   0xF64F 0x72F7      MOVW     R2,#+65527
   \   00000088   0x4010             ANDS     R0,R2,R0
   \   0000008A   0xF040 0x0040      ORR      R0,R0,#0x40
   \   0000008E   0x8028             STRH     R0,[R5, #+0]
    805          			TLv_Beep = 1;
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x.... 0x....      LDR.W    R2,??DataTable37_16
   \   00000096   0x8010             STRH     R0,[R2, #+0]
    806                HTLvHCnt = 0;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x8008             STRH     R0,[R1, #+0]
    807                NORMAL_LED(OFF);
   \   0000009C   0x2201             MOVS     R2,#+1
   \   0000009E   0xF44F 0x5180      MOV      R1,#+4096
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable37_17  ;; 0x40021000
   \   000000A6   0x.... 0x....      BL       GPIO_WriteBit
   \   000000AA   0xE073             B.N      ??Analysis_1
    808          		}
    809          	}
    810          	else if ((ReadValue.UreaLevel > Setting.TLH_Set) && (Flags1.TLvHAlarmFlag)) {
   \                     ??Analysis_2: (+1)
   \   000000AC   0x4617             MOV      R7,R2
   \   000000AE   0x42BE             CMP      R6,R7
   \   000000B0   0xD21C             BCS.N    ??Analysis_3
   \   000000B2   0xF3C0 0x1680      UBFX     R6,R0,#+6,#+1
   \   000000B6   0x2E00             CMP      R6,#+0
   \   000000B8   0xD018             BEQ.N    ??Analysis_3
    811          		Flags1.HTLvHCntFlag = 1;
   \   000000BA   0xF040 0x0008      ORR      R0,R0,#0x8
   \   000000BE   0x8028             STRH     R0,[R5, #+0]
    812          		if(HTLvHCnt >= Setting.t_DelayTL){			           //HTLvLCntNum = Delay count
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable37_18
   \   000000C4   0x8809             LDRH     R1,[R1, #+0]
   \   000000C6   0x8AE2             LDRH     R2,[R4, #+22]
   \   000000C8   0x4291             CMP      R1,R2
   \   000000CA   0xD363             BCC.N    ??Analysis_1
    813                Flags1.TLvHAlarmFlag = 0;
    814                Flags1.TLvLAlarmFlag = 0;
    815                Flags1.HTLvHCntFlag = 0;
   \   000000CC   0xF64F 0x7197      MOVW     R1,#+65431
   \   000000D0   0x4008             ANDS     R0,R1,R0
   \   000000D2   0x8028             STRH     R0,[R5, #+0]
    816          			HTLvLCnt = 0;
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable37_15
   \   000000DA   0x8008             STRH     R0,[R1, #+0]
    817                NORMAL_LED(ON);
   \   000000DC   0x4602             MOV      R2,R0
   \   000000DE   0xF44F 0x5180      MOV      R1,#+4096
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable37_17  ;; 0x40021000
   \   000000E6   0x.... 0x....      BL       GPIO_WriteBit
   \   000000EA   0xE053             B.N      ??Analysis_1
    818              }
    819          	}
    820           	else if ((ReadValue.UreaLevel > Setting.TLL_Set) && (Flags1.TLvLAlarmFlag)) {
   \                     ??Analysis_3: (+1)
   \   000000EC   0x4293             CMP      R3,R2
   \   000000EE   0xD215             BCS.N    ??Analysis_4
   \   000000F0   0xF3C0 0x1240      UBFX     R2,R0,#+5,#+1
   \   000000F4   0x2A00             CMP      R2,#+0
   \   000000F6   0xD011             BEQ.N    ??Analysis_4
    821          		Flags1.HTLvLCntFlag = 1;
   \   000000F8   0xF040 0x0010      ORR      R0,R0,#0x10
   \   000000FC   0x8028             STRH     R0,[R5, #+0]
    822          		if(HTLvLCnt >= Setting.t_DelayTL){			             //HTLvHCntNum = Delay count
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable37_15
   \   00000102   0x8809             LDRH     R1,[R1, #+0]
   \   00000104   0x8AE2             LDRH     R2,[R4, #+22]
   \   00000106   0x4291             CMP      R1,R2
   \   00000108   0xD344             BCC.N    ??Analysis_1
    823                Flags1.TLvLAlarmFlag = 0;
    824                Flags1.HTLvLCntFlag = 0;
   \   0000010A   0xF64F 0x71CF      MOVW     R1,#+65487
   \   0000010E   0x4008             ANDS     R0,R1,R0
   \   00000110   0x8028             STRH     R0,[R5, #+0]
    825          			HTLvHCnt = 0;
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable37_18
   \   00000118   0x8008             STRH     R0,[R1, #+0]
   \   0000011A   0xE03B             B.N      ??Analysis_1
    826          		}
    827          	}
    828           	else if ((ReadValue.Err.UQuality) && (!Flags1.QualityAlarmFlag)) { 
   \                     ??Analysis_4: (+1)
   \   0000011C   0x7809             LDRB     R1,[R1, #+0]
   \   0000011E   0x060A             LSLS     R2,R1,#+24
   \   00000120   0xD51E             BPL.N    ??Analysis_5
   \   00000122   0x0602             LSLS     R2,R0,#+24
   \   00000124   0xD41C             BMI.N    ??Analysis_5
    829          		Flags1.QualityCntFlag = 1;
   \   00000126   0xF040 0x0104      ORR      R1,R0,#0x4
   \   0000012A   0x8029             STRH     R1,[R5, #+0]
    830          		if(QualityCnt >= Setting.t_DelayTL){			           //For Quality Count 
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable37_19
   \   00000130   0x8802             LDRH     R2,[R0, #+0]
   \   00000132   0x8AE3             LDRH     R3,[R4, #+22]
   \   00000134   0x429A             CMP      R2,R3
   \   00000136   0xD32D             BCC.N    ??Analysis_1
    831                Flags1.QualityAlarmFlag = 1;
    832                Flags1.QualityCntFlag = 0;
   \   00000138   0xF64F 0x72FB      MOVW     R2,#+65531
   \   0000013C   0x4011             ANDS     R1,R2,R1
   \   0000013E   0xF041 0x0180      ORR      R1,R1,#0x80
   \   00000142   0x8029             STRH     R1,[R5, #+0]
    833          			TLv_Beep = 4;
   \   00000144   0x2104             MOVS     R1,#+4
   \   00000146   0x.... 0x....      LDR.W    R2,??DataTable37_16
   \   0000014A   0x8011             STRH     R1,[R2, #+0]
    834          			QualityCnt = 0;
   \   0000014C   0x2100             MOVS     R1,#+0
   \   0000014E   0x8001             STRH     R1,[R0, #+0]
    835                NORMAL_LED(OFF);
   \   00000150   0x2201             MOVS     R2,#+1
   \   00000152   0xF44F 0x5180      MOV      R1,#+4096
   \   00000156   0x.... 0x....      LDR.W    R0,??DataTable37_17  ;; 0x40021000
   \   0000015A   0x.... 0x....      BL       GPIO_WriteBit
   \   0000015E   0xE019             B.N      ??Analysis_1
    836              }
    837          	}
    838          	else if ((!ReadValue.Err.UQuality) && (Flags1.QualityAlarmFlag)) {
   \                     ??Analysis_5: (+1)
   \   00000160   0x0609             LSLS     R1,R1,#+24
   \   00000162   0xD417             BMI.N    ??Analysis_1
   \   00000164   0x0601             LSLS     R1,R0,#+24
   \   00000166   0xD515             BPL.N    ??Analysis_1
    839          		Flags1.QualityCntFlag = 1;
   \   00000168   0xF040 0x0104      ORR      R1,R0,#0x4
   \   0000016C   0x8029             STRH     R1,[R5, #+0]
    840          		if(QualityCnt >= Setting.t_DelayTL){			          
   \   0000016E   0x.... 0x....      LDR.W    R0,??DataTable37_19
   \   00000172   0x8802             LDRH     R2,[R0, #+0]
   \   00000174   0x8AE3             LDRH     R3,[R4, #+22]
   \   00000176   0x429A             CMP      R2,R3
   \   00000178   0xD30C             BCC.N    ??Analysis_1
    841                Flags1.QualityAlarmFlag = 0;
    842                Flags1.QualityCntFlag = 0;
   \   0000017A   0xF64F 0x727B      MOVW     R2,#+65403
   \   0000017E   0x4011             ANDS     R1,R2,R1
   \   00000180   0x8029             STRH     R1,[R5, #+0]
    843          			QualityCnt = 0;
   \   00000182   0x2100             MOVS     R1,#+0
   \   00000184   0x8001             STRH     R1,[R0, #+0]
    844                NORMAL_LED(ON);
   \   00000186   0x460A             MOV      R2,R1
   \   00000188   0xF44F 0x5180      MOV      R1,#+4096
   \   0000018C   0x.... 0x....      LDR.W    R0,??DataTable37_17  ;; 0x40021000
   \   00000190   0x.... 0x....      BL       GPIO_WriteBit
    845              }
    846          	} 
    847            if(Flags1.BuzzerFlag) {
   \                     ??Analysis_1: (+1)
   \   00000194   0x8828             LDRH     R0,[R5, #+0]
   \   00000196   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   0000019A   0x2800             CMP      R0,#+0
   \   0000019C   0xD007             BEQ.N    ??Analysis_6
    848              BuzzerOn(Setting.t_Buzzer);
   \   0000019E   0x8820             LDRH     R0,[R4, #+0]
   \   000001A0   0x.... 0x....      BL       BuzzerOn
    849              Flags1.BuzzerFlag = 0;
   \   000001A4   0x8828             LDRH     R0,[R5, #+0]
   \   000001A6   0xF64F 0x61FF      MOVW     R1,#+65279
   \   000001AA   0x4008             ANDS     R0,R1,R0
   \   000001AC   0x8028             STRH     R0,[R5, #+0]
    850            }
    851          }
   \                     ??Analysis_6: (+1)
   \   000001AE   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    852          
    853          /*
    854          ********************************************************************************
    855          * Description : File Name
    856          * Arguments   : None
    857          * Return      : None
    858          * Note        : 
    859          ******************************************************************************** 
    860          */

   \                                 In section .text, align 4, keep-with-next
    861          INT32U File_Name(int cnt, char n_val)
    862          {
    863            INT32U temp_val = 0;
   \                     File_Name: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
    864          
    865            n_val -= 0x30;
   \   00000002   0x3930             SUBS     R1,R1,#+48
    866            switch(cnt) {
   \   00000004   0x2805             CMP      R0,#+5
   \   00000006   0xD822             BHI.N    ??File_Name_1
   \   00000008   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??File_Name_0:
   \   0000000C   0x03 0x09          DC8      0x3,0x9,0xF,0x15
   \              0x0F 0x15    
   \   00000010   0x1A 0x1F          DC8      0x1A,0x1F
    867              case 0:
    868                temp_val = n_val * 100000;
   \                     ??File_Name_2: (+1)
   \   00000012   0xB2C9             UXTB     R1,R1
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable37_20  ;; 0x186a0
   \   00000018   0xFB00 0xF201      MUL      R2,R0,R1
    869                break;
   \   0000001C   0xE017             B.N      ??File_Name_1
    870              case 1:
    871                temp_val = n_val * 10000;
   \                     ??File_Name_3: (+1)
   \   0000001E   0xB2C9             UXTB     R1,R1
   \   00000020   0xF242 0x7010      MOVW     R0,#+10000
   \   00000024   0xFB00 0xF201      MUL      R2,R0,R1
    872                break;
   \   00000028   0xE011             B.N      ??File_Name_1
    873              case 2:
    874                temp_val = n_val * 1000;
   \                     ??File_Name_4: (+1)
   \   0000002A   0xB2C9             UXTB     R1,R1
   \   0000002C   0xF44F 0x707A      MOV      R0,#+1000
   \   00000030   0xFB00 0xF201      MUL      R2,R0,R1
    875                break;
   \   00000034   0xE00B             B.N      ??File_Name_1
    876              case 3:
    877                temp_val = n_val * 100;
   \                     ??File_Name_5: (+1)
   \   00000036   0xB2C9             UXTB     R1,R1
   \   00000038   0x2064             MOVS     R0,#+100
   \   0000003A   0xFB00 0xF201      MUL      R2,R0,R1
    878                break;
   \   0000003E   0xE006             B.N      ??File_Name_1
    879              case 4:
    880                temp_val = n_val * 10;
   \                     ??File_Name_6: (+1)
   \   00000040   0xB2C9             UXTB     R1,R1
   \   00000042   0xEB01 0x0081      ADD      R0,R1,R1, LSL #+2
   \   00000046   0x0042             LSLS     R2,R0,#+1
    881                break;
   \   00000048   0xE001             B.N      ??File_Name_1
    882              case 5:
    883                temp_val = n_val;
   \                     ??File_Name_7: (+1)
   \   0000004A   0x460A             MOV      R2,R1
   \   0000004C   0xB2D2             UXTB     R2,R2
    884                break;
    885            }
    886          
    887            return temp_val; 
   \                     ??File_Name_1: (+1)
   \   0000004E   0x4610             MOV      R0,R2
   \   00000050   0x4770             BX       LR               ;; return
    888          }
    889          
    890          /*
    891          ********************************************************************************
    892          * Description : remove files
    893          * Arguments   : None
    894          * Return      : None
    895          * Note        : 
    896          ******************************************************************************** 
    897          */

   \                                 In section .text, align 2, keep-with-next
    898          void remove_files (
    899          	char* path		/* Pointer to the working buffer with start path */
    900          )
    901          {
   \                     remove_files: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB092             SUB      SP,SP,#+72
    902          	DIR dirs;
    903            TCHAR	dfname[10];
    904          	FRESULT res;
    905            FILINFO DFinfo;
    906          	INT32U ctime = 0, mtime = 0, i;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x4625             MOV      R5,R4
    907            
    908          	res = f_opendir(&dirs, path);
    909          	if (res == FR_OK) {
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0xA809             ADD      R0,SP,#+36
   \   0000000C   0x.... 0x....      BL       f_opendir
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD134             BNE.N    ??remove_files_0
   \   00000014   0xE015             B.N      ??remove_files_1
    910          		while (((res = f_readdir(&dirs, &DFinfo)) == FR_OK) && DFinfo.fname[0]) {
    911                for(i = 0; i < 6; i++)
    912                  mtime += File_Name(i, DFinfo.fname[i]);
   \                     ??remove_files_2: (+1)
   \   00000016   0xA803             ADD      R0,SP,#+12
   \   00000018   0x4430             ADD      R0,R0,R6
   \   0000001A   0x7A41             LDRB     R1,[R0, #+9]
   \   0000001C   0x4630             MOV      R0,R6
   \   0000001E   0x.... 0x....      BL       File_Name
   \   00000022   0x1945             ADDS     R5,R0,R5
   \   00000024   0x1C76             ADDS     R6,R6,#+1
   \                     ??remove_files_3: (+1)
   \   00000026   0x2E06             CMP      R6,#+6
   \   00000028   0xD3F5             BCC.N    ??remove_files_2
    913                if(!ctime || (ctime > mtime)) {
   \   0000002A   0x2C00             CMP      R4,#+0
   \   0000002C   0xD001             BEQ.N    ??remove_files_4
   \   0000002E   0x42A5             CMP      R5,R4
   \   00000030   0xD206             BCS.N    ??remove_files_5
    914                  memcpy(dfname, &DFinfo.fname, 10);
   \                     ??remove_files_4: (+1)
   \   00000032   0x220A             MOVS     R2,#+10
   \   00000034   0xF10D 0x0115      ADD      R1,SP,#+21
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x.... 0x....      BL       __aeabi_memcpy
    915                  ctime = mtime;
   \   0000003E   0x462C             MOV      R4,R5
    916                }
    917                mtime = 0;
   \                     ??remove_files_5: (+1)
   \   00000040   0x2500             MOVS     R5,#+0
   \                     ??remove_files_1: (+1)
   \   00000042   0xA903             ADD      R1,SP,#+12
   \   00000044   0xA809             ADD      R0,SP,#+36
   \   00000046   0x.... 0x....      BL       f_readdir
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD105             BNE.N    ??remove_files_6
   \   0000004E   0xF89D 0x0015      LDRB     R0,[SP, #+21]
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD001             BEQ.N    ??remove_files_6
   \   00000056   0x462E             MOV      R6,R5
   \   00000058   0xE7E5             B.N      ??remove_files_3
    918          		}
    919              f_unlink(dfname);
   \                     ??remove_files_6: (+1)
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x.... 0x....      BL       f_unlink
    920              if(DelFiles > 0)DelFiles--;
   \   00000060   0x....             LDR.N    R0,??DataTable37_21
   \   00000062   0x8801             LDRH     R1,[R0, #+0]
   \   00000064   0x000A             MOVS     R2,R1
   \   00000066   0xD002             BEQ.N    ??remove_files_7
   \   00000068   0x1E49             SUBS     R1,R1,#+1
   \   0000006A   0x8001             STRH     R1,[R0, #+0]
   \   0000006C   0xE004             B.N      ??remove_files_8
    921              else {
    922                Disk_Full = 0;
   \                     ??remove_files_7: (+1)
   \   0000006E   0x4628             MOV      R0,R5
   \   00000070   0x....             LDR.N    R1,??DataTable37_10
   \   00000072   0x7008             STRB     R0,[R1, #+0]
    923                FileCreate();
   \   00000074   0x.... 0x....      BL       FileCreate
    924              }
    925              f_closedir(&dirs);
   \                     ??remove_files_8: (+1)
   \   00000078   0xA809             ADD      R0,SP,#+36
   \   0000007A   0x.... 0x....      BL       f_closedir
    926          	}
    927          }
   \                     ??remove_files_0: (+1)
   \   0000007E   0xB012             ADD      SP,SP,#+72
   \   00000080   0xBD70             POP      {R4-R6,PC}       ;; return
    928          
    929          
    930          /* 
    931          *********************************************************************************
    932          *                           Task MMC                                            *
    933          *********************************************************************************
    934          */

   \                                 In section .text, align 2, keep-with-next
    935          void Task_OBD(void *p_arg)
    936          {
   \                     Task_OBD: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
    937            sysinfo_t *s = (sysinfo_t *)p_arg;
    938            
    939            DATA_LED(ON);
   \   00000006   0x....             LDR.N    R5,??DataTable37_17  ;; 0x40021000
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xF44F 0x6100      MOV      R1,#+2048
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0x.... 0x....      BL       GPIO_WriteBit
    940            CHECK_LED(ON);
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0xF44F 0x4180      MOV      R1,#+16384
   \   0000001A   0x4628             MOV      R0,R5
   \   0000001C   0x.... 0x....      BL       GPIO_WriteBit
    941            PRESS_LED(ON);
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0xF44F 0x4100      MOV      R1,#+32768
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0x.... 0x....      BL       GPIO_WriteBit
    942            REGEN_LED(ON);
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0xF44F 0x5100      MOV      R1,#+8192
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0x.... 0x....      BL       GPIO_WriteBit
    943            NORMAL_LED(ON);
   \   00000038   0x2200             MOVS     R2,#+0
   \   0000003A   0xF44F 0x5180      MOV      R1,#+4096
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       GPIO_WriteBit
    944            vTaskDelay(1000);
   \   00000044   0xF44F 0x707A      MOV      R0,#+1000
   \   00000048   0x.... 0x....      BL       vTaskDelay
    945            DATA_LED(OFF);
   \   0000004C   0x2201             MOVS     R2,#+1
   \   0000004E   0xF44F 0x6100      MOV      R1,#+2048
   \   00000052   0x4628             MOV      R0,R5
   \   00000054   0x.... 0x....      BL       GPIO_WriteBit
    946            CHECK_LED(OFF);
   \   00000058   0x2201             MOVS     R2,#+1
   \   0000005A   0xF44F 0x4180      MOV      R1,#+16384
   \   0000005E   0x4628             MOV      R0,R5
   \   00000060   0x.... 0x....      BL       GPIO_WriteBit
    947            PRESS_LED(OFF);
   \   00000064   0x2201             MOVS     R2,#+1
   \   00000066   0xF44F 0x4100      MOV      R1,#+32768
   \   0000006A   0x4628             MOV      R0,R5
   \   0000006C   0x.... 0x....      BL       GPIO_WriteBit
    948            REGEN_LED(OFF);
   \   00000070   0x2201             MOVS     R2,#+1
   \   00000072   0xF44F 0x5100      MOV      R1,#+8192
   \   00000076   0x4628             MOV      R0,R5
   \   00000078   0x.... 0x....      BL       GPIO_WriteBit
    949            NORMAL_LED(OFF);
   \   0000007C   0x2201             MOVS     R2,#+1
   \   0000007E   0xF44F 0x5180      MOV      R1,#+4096
   \   00000082   0x4628             MOV      R0,R5
   \   00000084   0x.... 0x....      BL       GPIO_WriteBit
    950            InitPara();
   \   00000088   0x.... 0x....      BL       InitPara
    951            Flags.StartFlag = 0;
   \   0000008C   0x....             LDR.N    R6,??DataTable37_3
   \   0000008E   0x8830             LDRH     R0,[R6, #+0]
   \   00000090   0xF64F 0x51FF      MOVW     R1,#+65023
   \   00000094   0x4008             ANDS     R0,R1,R0
   \   00000096   0x8030             STRH     R0,[R6, #+0]
    952            vTaskDelay(1000);
   \   00000098   0xF44F 0x707A      MOV      R0,#+1000
   \   0000009C   0x.... 0x....      BL       vTaskDelay
    953            ModemInit();
   \   000000A0   0x.... 0x....      BL       ModemInit
    954            Setting.FW_Type = USE_MODEM;
   \   000000A4   0x....             LDR.N    R7,??DataTable37_22
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0xF887 0x008A      STRB     R0,[R7, #+138]
    955            BSP_CAN_Init();
   \   000000AC   0x.... 0x....      BL       BSP_CAN_Init
    956            vTaskDelay(3000);
   \   000000B0   0xF640 0x30B8      MOVW     R0,#+3000
   \   000000B4   0x.... 0x....      BL       vTaskDelay
    957            CHARGE(ON);
   \   000000B8   0x2201             MOVS     R2,#+1
   \   000000BA   0x2102             MOVS     R1,#+2
   \   000000BC   0x....             LDR.N    R0,??DataTable37_11  ;; 0x40020000
   \   000000BE   0x.... 0x....      BL       GPIO_WriteBit
    958            MMC_Check();
   \   000000C2   0x.... 0x....      BL       MMC_Check
    959            Save_SecData_Cnt = 0;
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x....             LDR.N    R1,??DataTable37_23
   \   000000CA   0x8008             STRH     R0,[R1, #+0]
    960            PreDay = s->tm_ptr.tm_mday;
   \   000000CC   0x.... 0x....      LDR.W    R8,??DataTable37_24
   \   000000D0   0x6AA0             LDR      R0,[R4, #+40]
   \   000000D2   0xF888 0x0000      STRB     R0,[R8, #+0]
    961            vTaskResume(xHandle_can); // CAN Task start
   \   000000D6   0x....             LDR.N    R0,??DataTable37_25
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0x.... 0x....      BL       vTaskResume
    962            Flags.CANWaitFlag = 1; // CAN TASK가 시작되면 SAVE FLAG가 1이된다. 
   \   000000DE   0xF8B6 0x0001      LDRH     R0,[R6, #+1]
   \   000000E2   0xF440 0x7080      ORR      R0,R0,#0x100
   \   000000E6   0xF8A6 0x0001      STRH     R0,[R6, #+1]
    963            
    964            Setting.t_Buzzer = 1;
   \   000000EA   0xF107 0x0097      ADD      R0,R7,#+151
   \   000000EE   0x9000             STR      R0,[SP, #+0]
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x9900             LDR      R1,[SP, #+0]
   \   000000F4   0x8008             STRH     R0,[R1, #+0]
   \   000000F6   0x.... 0x....      LDR.W    R9,??DataTable37_7
   \   000000FA   0xF109 0x0A56      ADD      R10,R9,#+86
   \   000000FE   0xF109 0x0B20      ADD      R11,R9,#+32
   \   00000102   0xE01C             B.N      ??Task_OBD_0
    965            
    966            for(;;)
    967          	{
    968          		s->twatchObdFlag = 1;
    969              if(Flags.CheckFlag && ReadValue.Sig.KeyOn) {
    970                if(TmrChk(TMR_DLINTERVAL) == 0)	{	
    971                  TmrSetT(TMR_DLINTERVAL, 10);
    972                  TmrStart(TMR_DLINTERVAL);
    973                  if(!BackUpFlag && Flags.SecIntFlag) {
    974                    if(Setting.ECUFW_flag == 1) {
    975                      CanFotaFile();
    976                    }
    977                    else {
    978                      Analysis();          
    979                      if(Disk_Dtect()) {
    980                        if(Disk_Full) {
    981                          remove_files("");
    982                        }
    983                        else if(Flags.DownloadFlag) 
    984                          CanTxFile();
    985                        else if(Flags.MMCSaveFlag) {
    986                          if(PreDay != s->tm_ptr.tm_mday) {
    987                            FileCreate();
    988                            PreDay = s->tm_ptr.tm_mday;
    989                          }
    990                          MMCSaveData();
    991                          Flags.MMCSaveFlag = 0;
    992                        }
    993                      }
    994                      SecDataSave();
    995                    }
    996                    DATA_LED(Flags.SaveOkFlag);
    997                  }
    998                  if((ReadValue.DpfValue.Error.B) || (ReadValue.Err.B)||(ReadValue.UreaLevel<=Setting.TLH_Set)) CHECK_LED(ON); //Level 15이하 일경우 Check LED ON
    999                  else CHECK_LED(OFF);
   1000                  if(ReadValue.DpfValue.Check.Func.CF) PRESS_LED(ON);
   1001                  else PRESS_LED(OFF);
   1002                  if(!ReadValue.DpfValue.Error.B && !ReadValue.DpfValue.Check.Func.CF && !ReadValue.Err.B &&(ReadValue.UreaLevel>Setting.TLH_Set)) NORMAL_LED(ON);
   1003                  else NORMAL_LED(OFF);
   1004                  if(ReadValue.DpfValue.f_REG || ReadValue.DpfValue.f_SCR) {
   1005                    REGEN_LED(ON);
   1006                    if((ReadValue.DpfValue.f_REG >= 3 || ReadValue.DpfValue.f_SCR >= 3) && buzerflag) {
   1007                      TLv_Beep = 3;
   1008                      buzerflag = 0;
   1009                    }
   1010                  }
   1011                  else {
   1012                    REGEN_LED(OFF);
   \                     ??Task_OBD_1: (+1)
   \   00000104   0x2201             MOVS     R2,#+1
   \   00000106   0xF44F 0x5100      MOV      R1,#+8192
   \   0000010A   0x4628             MOV      R0,R5
   \   0000010C   0x.... 0x....      BL       GPIO_WriteBit
   1013                    buzerflag = 1;
   \   00000110   0x2001             MOVS     R0,#+1
   \   00000112   0x....             LDR.N    R1,??DataTable37_26
   \   00000114   0x7008             STRB     R0,[R1, #+0]
   1014                  }
   1015                }
   1016              }
   1017              if(Flags.KeyOnFlag) 
   \                     ??Task_OBD_2: (+1)
   \   00000116   0x8830             LDRH     R0,[R6, #+0]
   \   00000118   0xF3C0 0x20C0      UBFX     R0,R0,#+11,#+1
   \   0000011C   0x2800             CMP      R0,#+0
   \   0000011E   0xD009             BEQ.N    ??Task_OBD_3
   1018              {
   1019                Start_Flag = 1;
   \   00000120   0x2001             MOVS     R0,#+1
   \   00000122   0x....             LDR.N    R1,??DataTable37_27
   \   00000124   0x7008             STRB     R0,[R1, #+0]
   1020                KeyOn_Process();
   \   00000126   0x.... 0x....      BL       KeyOn_Process
   1021                Flags.KeyOnFlag = 0;
   \   0000012A   0x8830             LDRH     R0,[R6, #+0]
   \   0000012C   0xF24F 0x71FF      MOVW     R1,#+63487
   \   00000130   0x4008             ANDS     R0,R1,R0
   \   00000132   0x8030             STRH     R0,[R6, #+0]
   1022              }
   1023              s->twatchObdFlag = 0;
   \                     ??Task_OBD_3: (+1)
   \   00000134   0x2000             MOVS     R0,#+0
   \   00000136   0x7360             STRB     R0,[R4, #+13]
   1024              vTaskDelay(1);
   \   00000138   0x2001             MOVS     R0,#+1
   \   0000013A   0x.... 0x....      BL       vTaskDelay
   \                     ??Task_OBD_0: (+1)
   \   0000013E   0x2001             MOVS     R0,#+1
   \   00000140   0x7360             STRB     R0,[R4, #+13]
   \   00000142   0x8830             LDRH     R0,[R6, #+0]
   \   00000144   0xF3C0 0x10C0      UBFX     R0,R0,#+7,#+1
   \   00000148   0x2800             CMP      R0,#+0
   \   0000014A   0xD0E4             BEQ.N    ??Task_OBD_2
   \   0000014C   0xF8BA 0x0004      LDRH     R0,[R10, #+4]
   \   00000150   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD0DE             BEQ.N    ??Task_OBD_2
   \   00000158   0x2005             MOVS     R0,#+5
   \   0000015A   0x.... 0x....      BL       TmrChk
   \   0000015E   0x2800             CMP      R0,#+0
   \   00000160   0xD1D9             BNE.N    ??Task_OBD_2
   \   00000162   0x210A             MOVS     R1,#+10
   \   00000164   0x2005             MOVS     R0,#+5
   \   00000166   0x.... 0x....      BL       TmrSetT
   \   0000016A   0x2005             MOVS     R0,#+5
   \   0000016C   0x.... 0x....      BL       TmrStart
   \   00000170   0x....             LDR.N    R0,??DataTable37_28
   \   00000172   0x7800             LDRB     R0,[R0, #+0]
   \   00000174   0x2800             CMP      R0,#+0
   \   00000176   0xD141             BNE.N    ??Task_OBD_4
   \   00000178   0x8830             LDRH     R0,[R6, #+0]
   \   0000017A   0x0BC0             LSRS     R0,R0,#+15
   \   0000017C   0xD03E             BEQ.N    ??Task_OBD_4
   \   0000017E   0xF897 0x00C5      LDRB     R0,[R7, #+197]
   \   00000182   0x2801             CMP      R0,#+1
   \   00000184   0xD102             BNE.N    ??Task_OBD_5
   \   00000186   0x.... 0x....      BL       CanFotaFile
   \   0000018A   0xE02C             B.N      ??Task_OBD_6
   \                     ??Task_OBD_5: (+1)
   \   0000018C   0x.... 0x....      BL       Analysis
   \   00000190   0x.... 0x....      BL       Disk_Dtect
   \   00000194   0x2800             CMP      R0,#+0
   \   00000196   0xD024             BEQ.N    ??Task_OBD_7
   \   00000198   0x....             LDR.N    R0,??DataTable37_10
   \   0000019A   0x7800             LDRB     R0,[R0, #+0]
   \   0000019C   0x2800             CMP      R0,#+0
   \   0000019E   0xD003             BEQ.N    ??Task_OBD_8
   \   000001A0   0x....             ADR.N    R0,??DataTable37_1  ;; ""
   \   000001A2   0x.... 0x....      BL       remove_files
   \   000001A6   0xE01C             B.N      ??Task_OBD_7
   \                     ??Task_OBD_8: (+1)
   \   000001A8   0x8830             LDRH     R0,[R6, #+0]
   \   000001AA   0xF3C0 0x1180      UBFX     R1,R0,#+6,#+1
   \   000001AE   0x2900             CMP      R1,#+0
   \   000001B0   0xD002             BEQ.N    ??Task_OBD_9
   \   000001B2   0x.... 0x....      BL       CanTxFile
   \   000001B6   0xE014             B.N      ??Task_OBD_7
   \                     ??Task_OBD_9: (+1)
   \   000001B8   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   000001BC   0x2800             CMP      R0,#+0
   \   000001BE   0xD010             BEQ.N    ??Task_OBD_7
   \   000001C0   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000001C4   0x6AA1             LDR      R1,[R4, #+40]
   \   000001C6   0x4288             CMP      R0,R1
   \   000001C8   0xD004             BEQ.N    ??Task_OBD_10
   \   000001CA   0x.... 0x....      BL       FileCreate
   \   000001CE   0x6AA0             LDR      R0,[R4, #+40]
   \   000001D0   0xF888 0x0000      STRB     R0,[R8, #+0]
   \                     ??Task_OBD_10: (+1)
   \   000001D4   0x.... 0x....      BL       MMCSaveData
   \   000001D8   0x8830             LDRH     R0,[R6, #+0]
   \   000001DA   0xF64F 0x71DF      MOVW     R1,#+65503
   \   000001DE   0x4008             ANDS     R0,R1,R0
   \   000001E0   0x8030             STRH     R0,[R6, #+0]
   \                     ??Task_OBD_7: (+1)
   \   000001E2   0x.... 0x....      BL       SecDataSave
   \                     ??Task_OBD_6: (+1)
   \   000001E6   0x8830             LDRH     R0,[R6, #+0]
   \   000001E8   0x0A00             LSRS     R0,R0,#+8
   \   000001EA   0xF000 0x0001      AND      R0,R0,#0x1
   \   000001EE   0xF080 0x0201      EOR      R2,R0,#0x1
   \   000001F2   0xF44F 0x6100      MOV      R1,#+2048
   \   000001F6   0x4628             MOV      R0,R5
   \   000001F8   0x.... 0x....      BL       GPIO_WriteBit
   \                     ??Task_OBD_4: (+1)
   \   000001FC   0xF89B 0x0004      LDRB     R0,[R11, #+4]
   \   00000200   0x2800             CMP      R0,#+0
   \   00000202   0xD109             BNE.N    ??Task_OBD_11
   \   00000204   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \   00000208   0x2800             CMP      R0,#+0
   \   0000020A   0xD105             BNE.N    ??Task_OBD_11
   \   0000020C   0x9800             LDR      R0,[SP, #+0]
   \   0000020E   0x8A80             LDRH     R0,[R0, #+20]
   \   00000210   0xF89A 0x1008      LDRB     R1,[R10, #+8]
   \   00000214   0x4288             CMP      R0,R1
   \   00000216   0xD306             BCC.N    ??Task_OBD_12
   \                     ??Task_OBD_11: (+1)
   \   00000218   0x2200             MOVS     R2,#+0
   \   0000021A   0xF44F 0x4180      MOV      R1,#+16384
   \   0000021E   0x4628             MOV      R0,R5
   \   00000220   0x.... 0x....      BL       GPIO_WriteBit
   \   00000224   0xE005             B.N      ??Task_OBD_13
   \                     ??Task_OBD_12: (+1)
   \   00000226   0x2201             MOVS     R2,#+1
   \   00000228   0xF44F 0x4180      MOV      R1,#+16384
   \   0000022C   0x4628             MOV      R0,R5
   \   0000022E   0x.... 0x....      BL       GPIO_WriteBit
   \                     ??Task_OBD_13: (+1)
   \   00000232   0xF89B 0x0005      LDRB     R0,[R11, #+5]
   \   00000236   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   0000023A   0x2800             CMP      R0,#+0
   \   0000023C   0xD006             BEQ.N    ??Task_OBD_14
   \   0000023E   0x2200             MOVS     R2,#+0
   \   00000240   0xF44F 0x4100      MOV      R1,#+32768
   \   00000244   0x4628             MOV      R0,R5
   \   00000246   0x.... 0x....      BL       GPIO_WriteBit
   \   0000024A   0xE005             B.N      ??Task_OBD_15
   \                     ??Task_OBD_14: (+1)
   \   0000024C   0x2201             MOVS     R2,#+1
   \   0000024E   0xF44F 0x4100      MOV      R1,#+32768
   \   00000252   0x4628             MOV      R0,R5
   \   00000254   0x.... 0x....      BL       GPIO_WriteBit
   \                     ??Task_OBD_15: (+1)
   \   00000258   0xF89B 0x0004      LDRB     R0,[R11, #+4]
   \   0000025C   0x2800             CMP      R0,#+0
   \   0000025E   0xD116             BNE.N    ??Task_OBD_16
   \   00000260   0xF89B 0x0005      LDRB     R0,[R11, #+5]
   \   00000264   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   00000268   0x2800             CMP      R0,#+0
   \   0000026A   0xD110             BNE.N    ??Task_OBD_16
   \   0000026C   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \   00000270   0x2800             CMP      R0,#+0
   \   00000272   0xD10C             BNE.N    ??Task_OBD_16
   \   00000274   0x9800             LDR      R0,[SP, #+0]
   \   00000276   0x8A80             LDRH     R0,[R0, #+20]
   \   00000278   0xF89A 0x1008      LDRB     R1,[R10, #+8]
   \   0000027C   0x4288             CMP      R0,R1
   \   0000027E   0xD206             BCS.N    ??Task_OBD_16
   \   00000280   0x2200             MOVS     R2,#+0
   \   00000282   0xF44F 0x5180      MOV      R1,#+4096
   \   00000286   0x4628             MOV      R0,R5
   \   00000288   0x.... 0x....      BL       GPIO_WriteBit
   \   0000028C   0xE005             B.N      ??Task_OBD_17
   \                     ??Task_OBD_16: (+1)
   \   0000028E   0x2201             MOVS     R2,#+1
   \   00000290   0xF44F 0x5180      MOV      R1,#+4096
   \   00000294   0x4628             MOV      R0,R5
   \   00000296   0x.... 0x....      BL       GPIO_WriteBit
   \                     ??Task_OBD_17: (+1)
   \   0000029A   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \   0000029E   0x2800             CMP      R0,#+0
   \   000002A0   0xD104             BNE.N    ??Task_OBD_18
   \   000002A2   0xF8B9 0x0033      LDRH     R0,[R9, #+51]
   \   000002A6   0x2800             CMP      R0,#+0
   \   000002A8   0xF43F 0xAF2C      BEQ.W    ??Task_OBD_1
   \                     ??Task_OBD_18: (+1)
   \   000002AC   0x2200             MOVS     R2,#+0
   \   000002AE   0xF44F 0x5100      MOV      R1,#+8192
   \   000002B2   0x4628             MOV      R0,R5
   \   000002B4   0x.... 0x....      BL       GPIO_WriteBit
   \   000002B8   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \   000002BC   0x2803             CMP      R0,#+3
   \   000002BE   0xDA04             BGE.N    ??Task_OBD_19
   \   000002C0   0xF8B9 0x0033      LDRH     R0,[R9, #+51]
   \   000002C4   0x2803             CMP      R0,#+3
   \   000002C6   0xF6FF 0xAF26      BLT.W    ??Task_OBD_2
   \                     ??Task_OBD_19: (+1)
   \   000002CA   0x....             LDR.N    R0,??DataTable37_26
   \   000002CC   0x7801             LDRB     R1,[R0, #+0]
   \   000002CE   0x2900             CMP      R1,#+0
   \   000002D0   0xF43F 0xAF21      BEQ.W    ??Task_OBD_2
   \   000002D4   0x2103             MOVS     R1,#+3
   \   000002D6   0x....             LDR.N    R2,??DataTable37_16
   \   000002D8   0x8011             STRH     R1,[R2, #+0]
   \   000002DA   0x2100             MOVS     R1,#+0
   \   000002DC   0x7001             STRB     R1,[R0, #+0]
   \   000002DE   0xE71A             B.N      ??Task_OBD_2
   1025          	}
   1026          }
   1027          
   1028          /*
   1029          ********************************************************************************
   1030          * Description : dbg_factory_init
   1031          * Arguments   : none
   1032          * Return      : 
   1033          * Note        : factory init(Sys memory)
   1034          ******************************************************************************** 
   1035          */

   \                                 In section .text, align 2, keep-with-next
   1036          INT16U dbg_factory_init(void)
   1037          {
   \                     dbg_factory_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1038          	int pass;
   1039          
   1040          	if(CLI_GetArgCnt() < 1)	return INV_PRM;
   \   00000002   0x.... 0x....      BL       CLI_GetArgCnt
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??dbg_factory_init_0
   \   0000000A   0x20CA             MOVS     R0,#+202
   \   0000000C   0xBD02             POP      {R1,PC}
   1041          	
   1042          	pass = comparison_num((char *)P_ARG(1));
   \                     ??dbg_factory_init_0: (+1)
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       Argument
   \   00000014   0x.... 0x....      BL       comparison_num
   1043          
   1044            if(pass == 1234) {  // password는 추후에 정할것..
   \   00000018   0xF240 0x41D2      MOVW     R1,#+1234
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD106             BNE.N    ??dbg_factory_init_1
   1045              DefaultSet();
   \   00000020   0x.... 0x....      BL       DefaultSet
   1046              printk("\nSystem factory init!!\n");
   \   00000024   0x.... 0x....      ADR.W    R0,?_15
   \   00000028   0x.... 0x....      BL       printk
   \   0000002C   0xE003             B.N      ??dbg_factory_init_2
   1047            }
   1048            else 
   1049              printk("\nPassword mismatch!!\n");
   \                     ??dbg_factory_init_1: (+1)
   \   0000002E   0x.... 0x....      ADR.W    R0,?_16
   \   00000032   0x.... 0x....      BL       printk
   1050          	return NO_DISPLAY;
   \                     ??dbg_factory_init_2: (+1)
   \   00000036   0x20C9             MOVS     R0,#+201
   \   00000038   0xBD02             POP      {R1,PC}          ;; return
   1051          }
   1052          
   1053          /*
   1054          ********************************************************************************
   1055          * Description : dbg_factory_init
   1056          * Arguments   : none
   1057          * Return      : 
   1058          * Note        : factory init(Sys memory)
   1059          ******************************************************************************** 
   1060          */

   \                                 In section .text, align 2, keep-with-next
   1061          INT16U dbg_scrclib_init(void)
   1062          {
   \                     dbg_scrclib_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1063          	int pass;
   1064          
   1065          	if(CLI_GetArgCnt() < 1)	return INV_PRM;
   \   00000002   0x.... 0x....      BL       CLI_GetArgCnt
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??dbg_scrclib_init_0
   \   0000000A   0x20CA             MOVS     R0,#+202
   \   0000000C   0xBD02             POP      {R1,PC}
   1066          	
   1067          	pass = comparison_num((char *)P_ARG(1));
   \                     ??dbg_scrclib_init_0: (+1)
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       Argument
   \   00000014   0x.... 0x....      BL       comparison_num
   1068          
   1069            if(pass == 1234) {  // password는 추후에 정할것..
   \   00000018   0xF240 0x41D2      MOVW     R1,#+1234
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD106             BNE.N    ??dbg_scrclib_init_1
   1070              DefaultSet();
   \   00000020   0x.... 0x....      BL       DefaultSet
   1071              printk("\nCalib default init!!\n");
   \   00000024   0x.... 0x....      ADR.W    R0,?_17
   \   00000028   0x.... 0x....      BL       printk
   \   0000002C   0xE003             B.N      ??dbg_scrclib_init_2
   1072            }
   1073            else 
   1074              printk("\nPassword mismatch!!\n");
   \                     ??dbg_scrclib_init_1: (+1)
   \   0000002E   0x.... 0x....      ADR.W    R0,?_16
   \   00000032   0x.... 0x....      BL       printk
   1075          	return NO_DISPLAY;
   \                     ??dbg_scrclib_init_2: (+1)
   \   00000036   0x20C9             MOVS     R0,#+201
   \   00000038   0xBD02             POP      {R1,PC}          ;; return
   1076          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   0x........         DC32     GPS_Time_Sync

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_1:
   \   00000000   0x........         DC32     GPS_Valid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_2:
   \   00000000   0x........         DC32     rmc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_3:
   \   00000000   0x........         DC32     RTC_GPS_Val

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_4:
   \   00000000   0x........         DC32     RTC_LVal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_5:
   \   00000000   0x........         DC32     Save_SecData_Cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_6:
   \   00000000   0x........         DC32     ReadValue_Buff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_7:
   \   00000000   0x........         DC32     ReadValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_8:
   \   00000000   0x........         DC32     Save_SecData_Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_9:
   \   00000000   0x........         DC32     PrevReadValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_1:
   \   00000000   0x........         DC32     PrevLat

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_2:
   \   00000000   0xC083126F         DC32     0xc083126f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_3:
   \   00000000   0x3FFDA1CA         DC32     0x3ffda1ca

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_4:
   \   00000000   0x412E8480         DC32     0x412e8480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_5:
   \   00000000   0x........         DC32     gga

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   0x00015181         DC32     0x15181

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   0x........         DC32     GPS_Speed_Val

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_1:
   \   00000000   0x........         DC32     DataSaveAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_2:
   \   00000000   0x........         DC32     Flash_Save_Buff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_3:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_4:
   \   00000000   0x........         DC32     Setting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_5:
   \   00000000   0x........         DC32     Model_Name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_6:
   \   00000000   0x........         DC32     DMS_ver

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_7:
   \   00000000   0x40024000         DC32     0x40024000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   0x........         DC32     P_BUF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_1:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_2:
   \   00000000   0x........         DC32     DataSentAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_3:
   \   00000000   0x........         DC32     Flags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_4:
   \   00000000   0x........         DC32     fp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_5:
   \   00000000   0x........         DC32     F_Name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_6:
   \   00000000   0x........         DC32     _sysinfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_7:
   \   00000000   0x........         DC32     ReadValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_8:
   \   00000000   0x........         DC32     DetectFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_9:
   \   00000000   0x........         DC32     FatFs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_10:
   \   00000000   0x........         DC32     Disk_Full

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_11:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_12:
   \   00000000   0x........         DC32     Flags1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_13:
   \   00000000   0x........         DC32     ReadValue+0x56

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_14:
   \   00000000   0x........         DC32     Setting+0x97

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_15:
   \   00000000   0x........         DC32     HTLvLCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_16:
   \   00000000   0x........         DC32     TLv_Beep

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_17:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_18:
   \   00000000   0x........         DC32     HTLvHCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_19:
   \   00000000   0x........         DC32     QualityCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_20:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_21:
   \   00000000   0x........         DC32     DelFiles

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_22:
   \   00000000   0x........         DC32     Setting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_23:
   \   00000000   0x........         DC32     Save_SecData_Cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_24:
   \   00000000   0x........         DC32     PreDay

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_25:
   \   00000000   0x........         DC32     xHandle_can

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_26:
   \   00000000   0x........         DC32     buzerflag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_27:
   \   00000000   0x........         DC32     Start_Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_28:
   \   00000000   0x........         DC32     BackUpFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x25 0x30          DC8 "%01d%01d.%01d%01d.%01d%01d\t"
   \              0x31 0x64    
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x2E 0x25    
   \              0x30 0x31    
   \              0x64 0x25    
   \              0x30 0x31    
   \              0x64 0x2E    
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x09 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x25 0x30          DC8 "%01d%01d:%01d%01d:%01d%01d\t"
   \              0x31 0x64    
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x3A 0x25    
   \              0x30 0x31    
   \              0x64 0x25    
   \              0x30 0x31    
   \              0x64 0x3A    
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x09 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x25 0x30          DC8 "%01d\t%01d\t%01d\t%01d\t"
   \              0x31 0x64    
   \              0x09 0x25    
   \              0x30 0x31    
   \              0x64 0x09    
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x09 0x25    
   \              0x30 0x31    
   \              0x64 0x09    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x25 0x30          DC8 "%02d.%02d\t%02d.%02d\t"
   \              0x32 0x64    
   \              0x2E 0x25    
   \              0x30 0x32    
   \              0x64 0x09    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x2E 0x25    
   \              0x30 0x32    
   \              0x64 0x09    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x25 0x30          DC8 "%01d\t%01d\t%01d.%01d\t%01d\t%01d\t"
   \              0x31 0x64    
   \              0x09 0x25    
   \              0x30 0x31    
   \              0x64 0x09    
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x2E 0x25    
   \              0x30 0x31    
   \              0x64 0x09    
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x09 0x25    
   \              0x30 0x31    
   \              0x64 0x09    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x25 0x30          DC8 "%01d\t%01d\t%01d\t"
   \              0x31 0x64    
   \              0x09 0x25    
   \              0x30 0x31    
   \              0x64 0x09    
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x09 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x25 0x30          DC8 25H, 30H, 31H, 64H, 9, 25H, 30H, 31H
   \              0x31 0x64    
   \              0x09 0x25    
   \              0x30 0x31    
   \   00000008   0x64 0x09          DC8 64H, 9, 25H, 30H, 31H, 64H, 2EH, 25H
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x2E 0x25    
   \   00000010   0x30 0x31          DC8 30H, 31H, 64H, 9, 25H, 30H, 31H, 64H
   \              0x64 0x09    
   \              0x25 0x30    
   \              0x31 0x64    
   \   00000018   0x09 0x25          DC8 9, 25H, 30H, 31H, 64H, 9, 25H, 30H
   \              0x30 0x31    
   \              0x64 0x09    
   \              0x25 0x30    
   \   00000020   0x6C 0x64          DC8 6CH, 64H, 9, 25H, 30H, 31H, 64H, 25H
   \              0x09 0x25    
   \              0x30 0x31    
   \              0x64 0x25    
   \   00000028   0x30 0x31          DC8 30H, 31H, 64H, 25H, 30H, 31H, 64H, 25H
   \              0x64 0x25    
   \              0x30 0x31    
   \              0x64 0x25    
   \   00000030   0x30 0x31          DC8 30H, 31H, 64H, 25H, 30H, 31H, 64H, 25H
   \              0x64 0x25    
   \              0x30 0x31    
   \              0x64 0x25    
   \   00000038   0x30 0x31          DC8 30H, 31H, 64H, 25H, 30H, 31H, 64H, 25H
   \              0x64 0x25    
   \              0x30 0x31    
   \              0x64 0x25    
   \   00000040   0x30 0x31          DC8 30H, 31H, 64H, 25H, 30H, 31H, 64H, 25H
   \              0x64 0x25    
   \              0x30 0x31    
   \              0x64 0x25    
   \   00000048   0x30 0x31          DC8 30H, 31H, 64H, 9, 25H, 30H, 31H, 64H
   \              0x64 0x09    
   \              0x25 0x30    
   \              0x31 0x64    
   \   00000050   0x25 0x30          DC8 25H, 30H, 31H, 64H, 25H, 30H, 31H, 64H
   \              0x31 0x64    
   \              0x25 0x30    
   \              0x31 0x64    
   \   00000058   0x25 0x30          DC8 25H, 30H, 31H, 64H, 25H, 30H, 31H, 64H
   \              0x31 0x64    
   \              0x25 0x30    
   \              0x31 0x64    
   \   00000060   0x25 0x30          DC8 25H, 30H, 31H, 64H, 25H, 30H, 31H, 64H
   \              0x31 0x64    
   \              0x25 0x30    
   \              0x31 0x64    
   \   00000068   0x25 0x30          DC8 25H, 30H, 31H, 64H, 25H, 30H, 31H, 64H
   \              0x31 0x64    
   \              0x25 0x30    
   \              0x31 0x64    
   \   00000070   0x25 0x30          DC8 25H, 30H, 31H, 64H, 25H, 30H, 31H, 64H
   \              0x31 0x64    
   \              0x25 0x30    
   \              0x31 0x64    
   \   00000078   0x25 0x30          DC8 25H, 30H, 31H, 64H, 25H, 30H, 31H, 64H
   \              0x31 0x64    
   \              0x25 0x30    
   \              0x31 0x64    
   \   00000080   0x25 0x30          DC8 25H, 30H, 31H, 64H, 0
   \              0x31 0x64    
   \              0x00         
   \   00000085   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x44 0x61          DC8 44H, 61H, 74H, 65H, 9, 54H, 69H, 6DH
   \              0x74 0x65    
   \              0x09 0x54    
   \              0x69 0x6D    
   \   00000008   0x65 0x09          DC8 65H, 9, 53H, 74H, 65H, 70H, 9, 52H
   \              0x53 0x74    
   \              0x65 0x70    
   \              0x09 0x52    
   \   00000010   0x65 0x67          DC8 65H, 67H, 54H, 69H, 6DH, 65H, 9, 73H
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x09 0x73    
   \   00000018   0x63 0x72          DC8 63H, 72H, 53H, 74H, 65H, 70H, 9, 73H
   \              0x53 0x74    
   \              0x65 0x70    
   \              0x09 0x73    
   \   00000020   0x63 0x72          DC8 63H, 72H, 52H, 65H, 67H, 54H, 69H, 6DH
   \              0x52 0x65    
   \              0x67 0x54    
   \              0x69 0x6D    
   \   00000028   0x65 0x09          DC8 65H, 9, 54H, 2DH, 75H, 70H, 9, 54H
   \              0x54 0x2D    
   \              0x75 0x70    
   \              0x09 0x54    
   \   00000030   0x32 0x09          DC8 32H, 9, 54H, 33H, 9, 54H, 34H, 9
   \              0x54 0x33    
   \              0x09 0x54    
   \              0x34 0x09    
   \   00000038   0x50 0x31          DC8 50H, 31H, 9, 42H, 61H, 73H, 65H, 50H
   \              0x09 0x42    
   \              0x61 0x73    
   \              0x65 0x50    
   \   00000040   0x31 0x09          DC8 31H, 9, 46H, 50H, 44H, 9, 52H, 65H
   \              0x46 0x50    
   \              0x44 0x09    
   \              0x52 0x65    
   \   00000048   0x61 0x64          DC8 61H, 64H, 79H, 9, 0
   \              0x79 0x09    
   \              0x00         
   \   0000004D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x54 0x61          DC8 "Tavg\tNOx-up\tNOx-dn\tMAF\tDosingRate\t"
   \              0x76 0x67    
   \              0x09 0x4E    
   \              0x4F 0x78    
   \              0x2D 0x75    
   \              0x70 0x09    
   \              0x4E 0x4F    
   \              0x78 0x2D    
   \              0x64 0x6E    
   \              0x09 0x4D    
   \              0x41 0x46    
   \              0x09 0x44    
   \              0x6F 0x73    
   \              0x69 0x6E    
   \              0x67 0x52    
   \              0x61 0x74    
   \              0x65 0x09    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x42 0x56          DC8 42H, 56H, 9, 55H, 72H, 65H, 61H, 4CH
   \              0x09 0x55    
   \              0x72 0x65    
   \              0x61 0x4C    
   \   00000008   0x65 0x76          DC8 65H, 76H, 65H, 6CH, 9, 54H, 61H, 6EH
   \              0x65 0x6C    
   \              0x09 0x54    
   \              0x61 0x6E    
   \   00000010   0x6B 0x54          DC8 6BH, 54H, 65H, 6DH, 70H, 9, 43H, 75H
   \              0x65 0x6D    
   \              0x70 0x09    
   \              0x43 0x75    
   \   00000018   0x72 0x72          DC8 72H, 72H, 65H, 6EH, 74H, 9, 49H, 67H
   \              0x65 0x6E    
   \              0x74 0x09    
   \              0x49 0x67    
   \   00000020   0x6E 0x69          DC8 6EH, 69H, 74H, 65H, 72H, 9, 4DH, 6FH
   \              0x74 0x65    
   \              0x72 0x09    
   \              0x4D 0x6F    
   \   00000028   0x74 0x6F          DC8 74H, 6FH, 72H, 9, 53H, 75H, 70H, 70H
   \              0x72 0x09    
   \              0x53 0x75    
   \              0x70 0x70    
   \   00000030   0x6C 0x79          DC8 6CH, 79H, 50H, 9, 0
   \              0x50 0x09    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x44 0x70          DC8 44H, 70H, 66H, 45H, 72H, 72H, 6FH, 72H
   \              0x66 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \   00000008   0x09 0x44          DC8 9, 44H, 70H, 66H, 43H, 68H, 65H, 63H
   \              0x70 0x66    
   \              0x43 0x68    
   \              0x65 0x63    
   \   00000010   0x6B 0x09          DC8 6BH, 9, 53H, 63H, 72H, 45H, 72H, 72H
   \              0x53 0x63    
   \              0x72 0x45    
   \              0x72 0x72    
   \   00000018   0x6F 0x72          DC8 6FH, 72H, 9, 53H, 63H, 72H, 43H, 68H
   \              0x09 0x53    
   \              0x63 0x72    
   \              0x43 0x68    
   \   00000020   0x65 0x63          DC8 65H, 63H, 6BH, 9, 64H, 72H, 76H, 48H
   \              0x6B 0x09    
   \              0x64 0x72    
   \              0x76 0x48    
   \   00000028   0x09 0x52          DC8 9, 52H, 65H, 67H, 65H, 6EH, 53H, 74H
   \              0x65 0x67    
   \              0x65 0x6E    
   \              0x53 0x74    
   \   00000030   0x73 0x09          DC8 73H, 9, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x52 0x65          DC8 52H, 65H, 67H, 65H, 6EH, 4DH, 6FH, 64H
   \              0x67 0x65    
   \              0x6E 0x4D    
   \              0x6F 0x64    
   \   00000008   0x65 0x09          DC8 65H, 9, 53H, 70H, 65H, 65H, 64H, 9
   \              0x53 0x70    
   \              0x65 0x65    
   \              0x64 0x09    
   \   00000010   0x55 0x72          DC8 55H, 72H, 65H, 61H, 51H, 75H, 61H, 6CH
   \              0x65 0x61    
   \              0x51 0x75    
   \              0x61 0x6C    
   \   00000018   0x69 0x74          DC8 69H, 74H, 79H, 9, 43H, 61H, 72H, 54H
   \              0x79 0x09    
   \              0x43 0x61    
   \              0x72 0x54    
   \   00000020   0x79 0x70          DC8 79H, 70H, 65H, 9, 4CH, 69H, 6DH, 69H
   \              0x65 0x09    
   \              0x4C 0x69    
   \              0x6D 0x69    
   \   00000028   0x74 0x53          DC8 74H, 53H, 74H, 65H, 70H, 9, 44H, 50H
   \              0x74 0x65    
   \              0x70 0x09    
   \              0x44 0x50    
   \   00000030   0x46 0x43          DC8 46H, 43H, 72H, 61H, 63H, 6BH, 9, 50H
   \              0x72 0x61    
   \              0x63 0x6B    
   \              0x09 0x50    
   \   00000038   0x4D 0x31          DC8 4DH, 31H, 45H, 72H, 72H, 9, 50H, 4DH
   \              0x45 0x72    
   \              0x72 0x09    
   \              0x50 0x4D    
   \   00000040   0x32 0x45          DC8 32H, 45H, 72H, 72H, 9, 0
   \              0x72 0x72    
   \              0x09 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x4F 0x42          DC8 "OBD V%01d.%02d\tECU V%01d.%02d"
   \              0x44 0x20    
   \              0x56 0x25    
   \              0x30 0x31    
   \              0x64 0x2E    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x09 0x45    
   \              0x43 0x55    
   \              0x20 0x56    
   \              0x25 0x30    
   \              0x31 0x64    
   \              0x2E 0x25    
   \              0x30 0x32    
   \              0x64 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_0:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 1, keep-with-next
   \                     ?_14:
   \   00000000   0x00               DC8 ""

   \                                 In section .text, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x0A 0x53          DC8 "\012System factory init!!\012"
   \              0x79 0x73    
   \              0x74 0x65    
   \              0x6D 0x20    
   \              0x66 0x61    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x79 0x20    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x21 0x21    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x0A 0x50          DC8 "\012Password mismatch!!\012"
   \              0x61 0x73    
   \              0x73 0x77    
   \              0x6F 0x72    
   \              0x64 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x21 0x21    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x0A 0x43          DC8 "\012Calib default init!!\012"
   \              0x61 0x6C    
   \              0x69 0x62    
   \              0x20 0x64    
   \              0x65 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x21    
   \              0x21 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0
   1077          
   1078          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   Analysis
        24   -> BuzzerOn
        24   -> GPIO_WriteBit
      32   CheckGPSTimeSyc
        32   -> UpdateTimeToGPSTime
        32   -> abs
        32   -> mktime_conv
      24   DefaultSet
        24   -> FRAMByteWrite
        24   -> FRAMMultiRead
        24   -> FRAMMultiWrite
         0   -> GPIO_WriteBit
        24   -> GPIO_WriteBit
        24   -> IWDG_ReloadCounter
        24   -> Modem_Parameter_Reset
        24   -> StringLen
        24   -> __aeabi_memcpy
        24   -> __aeabi_memset
        24   -> delay_ms
       8   Disk_Dtect
         8   -> GPIO_ReadInputDataBit
       8   DrvDataUpdate
         0   -> __aeabi_memcpy
         8   -> __aeabi_memcpy
      24   FileCreate
        24   -> MMCSaveData
        24   -> __aeabi_memset
        24   -> f_close
        24   -> f_open
        24   -> f_printf
       0   File_Name
       8   Flash_Read_SecData
         0   -> SPI_FLASH_BufferRead
         0   -> __aeabi_memcpy
      24   Flash_Write_SaveData
        24   -> FRAMMultiWrite
        24   -> SPI_FLASH_BufferWrite
        24   -> SPI_FLASH_PageErase
        24   -> __aeabi_memset
      40   GpsDataUpdate
        40   -> __aeabi_d2iz
        40   -> __aeabi_d2uiz
        40   -> __aeabi_dmul
        40   -> abs
      40   InitPara
        40   -> FRAMMultiRead
        40   -> FRAMMultiWrite
        40   -> GPIO_ReadOutputData
        40   -> GPIO_Write
        40   -> IWDG_ReloadCounter
      16   KeyOn_Process
        16   -> GPIO_ReadInputDataBit
        16   -> GPIO_WriteBit
         0   -> system_power_off
        16   -> vTaskDelay
     152   MMCSaveData
       152   -> f_close
       152   -> f_printf
       152   -> open_append
      16   MMC_Check
        16   -> Disk_Dtect
        16   -> FileCreate
        16   -> disk_initialize
        16   -> f_mount
        16   -> scan_files
       8   SecDataSave
         8   -> DrvDataUpdate
         8   -> Flash_Write_SaveData
         8   -> GpsDataUpdate
         8   -> Modem_SecIntProcess
      40   Task_OBD
        40   -> Analysis
        40   -> BSP_CAN_Init
        40   -> CanFotaFile
        40   -> CanTxFile
        40   -> Disk_Dtect
        40   -> FileCreate
        40   -> GPIO_WriteBit
        40   -> InitPara
        40   -> KeyOn_Process
        40   -> MMCSaveData
        40   -> MMC_Check
        40   -> ModemInit
        40   -> SecDataSave
        40   -> TmrChk
        40   -> TmrSetT
        40   -> TmrStart
        40   -> remove_files
        40   -> vTaskDelay
        40   -> vTaskResume
      64   UpdateTimeToGPSTime
        64   -> SetRTCTime
        64   -> gmtime_conv
       8   dbg_factory_init
         8   -> Argument
         8   -> CLI_GetArgCnt
         8   -> DefaultSet
         8   -> comparison_num
         8   -> printk
       8   dbg_scrclib_init
         8   -> Argument
         8   -> CLI_GetArgCnt
         8   -> DefaultSet
         8   -> comparison_num
         8   -> printk
      88   remove_files
        88   -> FileCreate
        88   -> File_Name
        88   -> __aeabi_memcpy
        88   -> f_closedir
        88   -> f_opendir
        88   -> f_readdir
        88   -> f_unlink


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable28
       4  ??DataTable33
       4  ??DataTable33_1
       4  ??DataTable33_2
       4  ??DataTable33_3
       4  ??DataTable33_4
       4  ??DataTable33_5
       4  ??DataTable33_6
       4  ??DataTable33_7
       4  ??DataTable33_8
       4  ??DataTable33_9
       4  ??DataTable34
       4  ??DataTable34_1
       4  ??DataTable34_2
       4  ??DataTable34_3
       4  ??DataTable34_4
       4  ??DataTable34_5
       4  ??DataTable35
       4  ??DataTable36
       4  ??DataTable36_1
       4  ??DataTable36_2
       4  ??DataTable36_3
       4  ??DataTable36_4
       4  ??DataTable36_5
       4  ??DataTable36_6
       4  ??DataTable36_7
       4  ??DataTable37
       4  ??DataTable37_1
       4  ??DataTable37_10
       4  ??DataTable37_11
       4  ??DataTable37_12
       4  ??DataTable37_13
       4  ??DataTable37_14
       4  ??DataTable37_15
       4  ??DataTable37_16
       4  ??DataTable37_17
       4  ??DataTable37_18
       4  ??DataTable37_19
       4  ??DataTable37_2
       4  ??DataTable37_20
       4  ??DataTable37_21
       4  ??DataTable37_22
       4  ??DataTable37_23
       4  ??DataTable37_24
       4  ??DataTable37_25
       4  ??DataTable37_26
       4  ??DataTable37_27
       4  ??DataTable37_28
       4  ??DataTable37_3
       4  ??DataTable37_4
       4  ??DataTable37_5
       4  ??DataTable37_6
       4  ??DataTable37_7
       4  ??DataTable37_8
       4  ??DataTable37_9
       2  ?_0
      28  ?_1
      56  ?_10
      52  ?_11
      72  ?_12
      32  ?_13
       1  ?_14
      24  ?_15
      24  ?_16
      24  ?_17
      28  ?_2
      24  ?_3
      24  ?_4
      32  ?_5
      16  ?_6
     136  ?_7
      80  ?_8
      36  ?_9
     432  Analysis
     222  CheckGPSTimeSyc
     298  DefaultSet
      44  Disk_Dtect
      70  DrvDataUpdate
     564  FatFs
     280  FileCreate
      82  File_Name
      46  Flash_Read_SecData
     134  Flash_Write_SaveData
      12  GPS_Time_Sync
          GPS_Time_NoSyncCnt
          Prev_rmctime
          GPS_SyncOKTime
     254  GpsDataUpdate
      16  Header
     736  InitPara
      82  KeyOn_Process
     694  MMCSaveData
     112  MMC_Check
      16  PrevLat
          PrevLon
          GPSNotValidCount
          PrevSecTime
     128  PrevReadValue
       1  PrevSpeed
      98  SecDataSave
     736  Task_OBD
      76  UpdateTimeToGPSTime
      58  dbg_factory_init
      58  dbg_scrclib_init
     130  remove_files
      16  rotate
      16  rport

 
   737 bytes in section .bss
    35 bytes in section .rodata
 5 550 bytes in section .text
 
 5 550 bytes of CODE  memory
    35 bytes of CONST memory
   737 bytes of DATA  memory

Errors: none
Warnings: 1
