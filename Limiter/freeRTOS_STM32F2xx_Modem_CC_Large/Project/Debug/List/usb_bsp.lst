###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       09/Jan/2023  17:31:20
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\bsp\usb_bsp.c
#    Command line =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\bsp\usb_bsp.c -D
#        USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_USB_OTG_FS -lC
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List
#        --diag_suppress Pa050 -o
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\ -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\cpu\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Drv\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\fat\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\bsp\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Dev\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Core\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_OTG_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\portable\IAR\ARM_CM3\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\include\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\usbConf\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\drivers\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List\usb_bsp.lst
#    Object file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj\usb_bsp.o
#
###############################################################################

E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\bsp\usb_bsp.c
      1          /**
      2            ******************************************************************************
      3            * @file    usb_bsp.c
      4            * @author  MCD Application Team
      5            * @version V2.1.0
      6            * @date    19-March-2012
      7            * @brief   This file implements the board support package for the USB host library
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */ 
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          
     30          #include "usb_bsp.h"
     31          
     32          /** @addtogroup USBH_USER
     33          * @{
     34          */
     35          
     36          /** @defgroup USB_BSP
     37            * @brief This file is responsible to offer board support package
     38            * @{
     39            */ 
     40          
     41          /** @defgroup USB_BSP_Private_Defines
     42            * @{
     43            */ 
     44          //#define USE_ACCURATE_TIME
     45          #define TIM_MSEC_DELAY                     0x01
     46          #define TIM_USEC_DELAY                     0x02
     47          //#define HOST_OVRCURR_PORT                  GPIOA
     48          //#define HOST_OVRCURR_LINE                  GPIO_Pin_1
     49          //#define HOST_OVRCURR_PORT_SOURCE           GPIO_PortSourceGPIOE
     50          //#define HOST_OVRCURR_PIN_SOURCE            GPIO_PinSource1
     51          //#define HOST_OVRCURR_PORT_RCC              RCC_AHB1Periph_GPIOA
     52          //#define HOST_OVRCURR_EXTI_LINE             EXTI_Line1
     53          //#define HOST_OVRCURR_IRQn                  EXTI1_IRQn 
     54          
     55          
     56           #ifdef USE_USB_OTG_FS 
     57            #define HOST_POWERSW_PORT_RCC            RCC_AHB1Periph_GPIOA
     58            #define HOST_POWERSW_PORT                GPIOA
     59            #define HOST_POWERSW_VBUS                GPIO_Pin_0
     60           #endif
     61          
     62          
     63          
     64          /**
     65            * @}
     66            */ 
     67          
     68          
     69          /** @defgroup USB_BSP_Private_TypesDefinitions
     70            * @{
     71            */ 
     72          /**
     73            * @}
     74            */ 
     75          
     76          
     77          
     78          /** @defgroup USB_BSP_Private_Macros
     79            * @{
     80            */ 
     81          /**
     82            * @}
     83            */ 
     84          
     85          /** @defgroup USBH_BSP_Private_Variables
     86            * @{
     87            */ 

   \                                 In section .bss, align 1
     88          ErrorStatus HSEStartUpStatus;
   \                     HSEStartUpStatus:
   \   00000000                      DS8 1
     89          #ifdef USE_ACCURATE_TIME 
     90          __IO uint32_t BSP_delay = 0;
     91          #endif
     92          /**
     93            * @}
     94            */ 
     95          
     96          /** @defgroup USBH_BSP_Private_FunctionPrototypes
     97            * @{
     98            */ 
     99          
    100          #ifdef USE_ACCURATE_TIME 
    101          static void BSP_SetTime(uint8_t Unit);
    102          static void BSP_Delay(uint32_t nTime,uint8_t Unit);
    103          static void USB_OTG_BSP_TimeInit ( void );
    104          #endif
    105          /**
    106            * @}
    107            */ 
    108          
    109          /** @defgroup USB_BSP_Private_Functions
    110            * @{
    111            */ 
    112          
    113          /**
    114            * @brief  USB_OTG_BSP_Init
    115            *         Initilizes BSP configurations
    116            * @param  None
    117            * @retval None
    118            */
    119          

   \                                 In section .text, align 2, keep-with-next
    120          void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
    121          {
   \                     USB_OTG_BSP_Init: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    122          
    123           
    124            GPIO_InitTypeDef GPIO_InitStructure;
    125           //#ifdef USE_USB_OTG_FS 
    126          
    127            RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);  
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x4608             MOV      R0,R1
   \   00000006   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
    128            
    129            /* Configure SOF VBUS ID DM DP Pins */
    130            
    131            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | 
    132                                          GPIO_Pin_12;
   \   0000000A   0xF44F 0x50C0      MOV      R0,#+6144
   \   0000000E   0x9000             STR      R0,[SP, #+0]
    133            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   00000010   0x2003             MOVS     R0,#+3
   \   00000012   0xF88D 0x0005      STRB     R0,[SP, #+5]
    134            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0xF88D 0x0004      STRB     R0,[SP, #+4]
    135            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    136            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
    137            GPIO_Init(GPIOA, &GPIO_InitStructure);  
   \   00000022   0x....             LDR.N    R4,??DataTable0  ;; 0x40020000
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       GPIO_Init
    138            
    139            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
   \   0000002C   0xF44F 0x7080      MOV      R0,#+256
   \   00000030   0x9000             STR      R0,[SP, #+0]
    140            
    141            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0xF88D 0x0005      STRB     R0,[SP, #+5]
    142            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF88D 0x0004      STRB     R0,[SP, #+4]
    143            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    144            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
    145            GPIO_Init(GPIOA, &GPIO_InitStructure);    
   \   00000042   0x4669             MOV      R1,SP
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       GPIO_Init
    146            
    147          //  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG1_FS) ;
    148            GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ; 
   \   0000004A   0x220A             MOVS     R2,#+10
   \   0000004C   0x210B             MOVS     R1,#+11
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       GPIO_PinAFConfig
    149            GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
   \   00000054   0x220A             MOVS     R2,#+10
   \   00000056   0x210C             MOVS     R1,#+12
   \   00000058   0x4620             MOV      R0,R4
   \   0000005A   0x.... 0x....      BL       GPIO_PinAFConfig
    150            
    151            /* this for ID line debug */
    152            //GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
    153            //GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    154            //GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;  
    155            //GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
    156            //GPIO_Init(GPIOA, &GPIO_InitStructure);  
    157            //GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;   
    158          
    159          
    160            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \   0000005E   0x2101             MOVS     R1,#+1
   \   00000060   0xF44F 0x4080      MOV      R0,#+16384
   \   00000064   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    161            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ; 
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x2080             MOVS     R0,#+128
   \   0000006C   0x.... 0x....      BL       RCC_AHB2PeriphClockCmd
    162          
    163          
    164            /* Intialize Timer for delay function */
    165          //  USB_OTG_BSP_TimeInit();   
    166          }
   \   00000070   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    167          /**
    168            * @brief  USB_OTG_BSP_EnableInterrupt
    169            *         Configures USB Global interrupt
    170            * @param  None
    171            * @retval None
    172            */

   \                                 In section .text, align 2, keep-with-next
    173          void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
    174          {
    175          #if 0
    176            NVIC_InitTypeDef NVIC_InitStructure; 
    177            
    178            NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
    179          #ifdef USE_USB_OTG_HS   
    180            NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_IRQn;
    181          #else
    182            NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;  
    183          #endif
    184            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
    185            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
    186            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    187            NVIC_Init(&NVIC_InitStructure);  
    188          #endif
    189          
    190          }
   \                     USB_OTG_BSP_EnableInterrupt: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    191          
    192          /**
    193            * @brief  BSP_Drive_VBUS
    194            *         Drives the Vbus signal through IO
    195            * @param  state : VBUS states
    196            * @retval None
    197            */
    198          

   \                                 In section .text, align 2, keep-with-next
    199          void USB_OTG_BSP_DriveVBUS(USB_OTG_CORE_HANDLE *pdev, uint8_t state)
    200          {
    201            /*
    202            On-chip 5 V VBUS generation is not supported. For this reason, a charge pump 
    203            or, if 5 V are available on the application board, a basic power switch, must 
    204            be added externally to drive the 5 V VBUS line. The external charge pump can 
    205            be driven by any GPIO output. When the application decides to power on VBUS 
    206            using the chosen GPIO, it must also set the port power bit in the host port 
    207            control and status register (PPWR bit in OTG_FS_HPRT).
    208            
    209            Bit 12 PPWR: Port power
    210            The application uses this field to control power to this port, and the core 
    211            clears this bit on an overcurrent condition.
    212            */
    213          /*  
    214          #ifndef USE_USB_OTG_HS   
    215            if (0 == state)
    216            { 
    217              // DISABLE is needed on output of the Power Switch 
    218              GPIO_SetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
    219            }
    220            else
    221            {
    222              //ENABLE the Power Switch by driving the Enable LOW
    223              GPIO_ResetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
    224            }
    225          #endif  
    226          */
    227          }
   \                     USB_OTG_BSP_DriveVBUS: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    228          
    229          /**
    230            * @brief  USB_OTG_BSP_ConfigVBUS
    231            *         Configures the IO for the Vbus and OverCurrent
    232            * @param  None
    233            * @retval None
    234            */
    235          

   \                                 In section .text, align 2, keep-with-next
    236          void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
    237          {
    238          /*
    239          #ifndef USE_USB_OTG_HS 
    240            GPIO_InitTypeDef GPIO_InitStructure; 
    241            
    242          #ifdef USE_STM3210C_EVAL
    243            RCC_APB2PeriphClockCmd(HOST_POWERSW_PORT_RCC, ENABLE);
    244            
    245            
    246            // Configure Power Switch Vbus Pin 
    247            GPIO_InitStructure.GPIO_Pin = HOST_POWERSW_VBUS;
    248            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    249            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    250            GPIO_Init(HOST_POWERSW_PORT, &GPIO_InitStructure);
    251          #else
    252            #ifdef USE_USB_OTG_FS  
    253            RCC_AHB1PeriphClockCmd( HOST_POWERSW_PORT_RCC , ENABLE);  
    254            
    255            GPIO_InitStructure.GPIO_Pin = HOST_POWERSW_VBUS;
    256            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
    257            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    258            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    259            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
    260            GPIO_Init(HOST_POWERSW_PORT,&GPIO_InitStructure);
    261            #endif  
    262          #endif
    263          
    264            // By Default, DISABLE is needed on output of the Power Switch 
    265            GPIO_SetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
    266            
    267            USB_OTG_BSP_mDelay(200);   // Delay is need for stabilising the Vbus Low  in Reset Condition, when Vbus=1 and Reset-button is pressed by user 
    268          #endif    
    269          */  
    270          	// GPIO_SetBits(HOST_POWERSW_PORT, HOST_POWERSW_VBUS);
    271          }
   \                     USB_OTG_BSP_ConfigVBUS: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    272          
    273          /**
    274            * @brief  USB_OTG_BSP_TimeInit
    275            *         Initializes delay unit using Timer2
    276            * @param  None
    277            * @retval None
    278            */
    279          
    280          #ifdef USE_ACCURATE_TIME   
    281          static void USB_OTG_BSP_TimeInit ( void )
    282          {
    283            NVIC_InitTypeDef NVIC_InitStructure;
    284            
    285            /* Set the Vector Table base address at 0x08000000 */
    286            NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x00);
    287            
    288            /* Configure the Priority Group to 2 bits */
    289            NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
    290            
    291            /* Enable the TIM2 gloabal Interrupt */
    292            NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
    293            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
    294            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
    295            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    296            
    297            NVIC_Init(&NVIC_InitStructure);
    298            
    299            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);  
    300          }
    301          #endif  
    302          
    303          /**
    304            * @brief  USB_OTG_BSP_uDelay
    305            *         This function provides delay time in micro sec
    306            * @param  usec : Value of delay required in micro sec
    307            * @retval None
    308            */

   \                                 In section .text, align 2, keep-with-next
    309          void USB_OTG_BSP_uDelay (const uint32_t usec)
    310          {
   \                     USB_OTG_BSP_uDelay: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
    311            
    312          #ifdef USE_ACCURATE_TIME    
    313            BSP_Delay(usec,TIM_USEC_DELAY); 
    314          #else
    315            __IO uint32_t count = 0;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x9100             STR      R1,[SP, #+0]
    316            const uint32_t utime = (120 * usec / 7);
   \   00000006   0xEBC0 0x1100      RSB      R1,R0,R0, LSL #+4
   \   0000000A   0x00C8             LSLS     R0,R1,#+3
   \   0000000C   0x2107             MOVS     R1,#+7
   \   0000000E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
    317            do
    318            {
    319              if ( ++count > utime )
   \                     ??USB_OTG_BSP_uDelay_0: (+1)
   \   00000012   0x9900             LDR      R1,[SP, #+0]
   \   00000014   0x1C49             ADDS     R1,R1,#+1
   \   00000016   0x9100             STR      R1,[SP, #+0]
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD2FA             BCS.N    ??USB_OTG_BSP_uDelay_0
    320              {
    321                return ;
   \   0000001C   0xB001             ADD      SP,SP,#+4
   \   0000001E   0x4770             BX       LR               ;; return
    322              }
    323            }
    324            while (1);
    325          #endif   
    326            
    327          }
    328          
    329          
    330          /**
    331            * @brief  USB_OTG_BSP_mDelay
    332            *          This function provides delay time in milli sec
    333            * @param  msec : Value of delay required in milli sec
    334            * @retval None
    335            */

   \                                 In section .text, align 2, keep-with-next
    336          void USB_OTG_BSP_mDelay (const uint32_t msec)
    337          { 
    338          #ifdef USE_ACCURATE_TIME  
    339              BSP_Delay(msec,TIM_MSEC_DELAY);   
    340          #else
    341              USB_OTG_BSP_uDelay(msec * 1000);   
   \                     USB_OTG_BSP_mDelay: (+1)
   \   00000000   0xF44F 0x717A      MOV      R1,#+1000
   \   00000004   0x4348             MULS     R0,R1,R0
   \   00000006   0x....             B.N      USB_OTG_BSP_uDelay
    342          #endif    
    343          
    344          }
    345          
    346          
    347          /**
    348            * @brief  USB_OTG_BSP_TimerIRQ
    349            *         Time base IRQ
    350            * @param  None
    351            * @retval None
    352            */
    353          

   \                                 In section .text, align 2, keep-with-next
    354          void USB_OTG_BSP_TimerIRQ (void)
    355          {
    356          #ifdef USE_ACCURATE_TIME 
    357              
    358            if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
    359            {
    360              TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    361              if (BSP_delay > 0x00)
    362              { 
    363                BSP_delay--;
    364              }
    365              else
    366              {
    367                TIM_Cmd(TIM2,DISABLE);
    368              }
    369            }
    370          #endif  
    371          } 
   \                     USB_OTG_BSP_TimerIRQ: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40020000         DC32     0x40020000
    372          
    373          #ifdef USE_ACCURATE_TIME 
    374          /**
    375            * @brief  BSP_Delay
    376            *         Delay routine based on TIM2
    377            * @param  nTime : Delay Time 
    378            * @param  unit : Delay Time unit : mili sec / micro sec
    379            * @retval None
    380            */
    381          static void BSP_Delay(uint32_t nTime, uint8_t unit)
    382          {
    383            
    384            BSP_delay = nTime;
    385            BSP_SetTime(unit);  
    386            while(BSP_delay != 0);
    387            TIM_Cmd(TIM2,DISABLE);
    388          }
    389          
    390          /**
    391            * @brief  BSP_SetTime
    392            *         Configures TIM2 for delay routine based on TIM2
    393            * @param  unit : msec /usec
    394            * @retval None
    395            */
    396          static void BSP_SetTime(uint8_t unit)
    397          {
    398            TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    399            
    400            TIM_Cmd(TIM2,DISABLE);
    401            TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE); 
    402            
    403            
    404            if(unit == TIM_USEC_DELAY)
    405            {  
    406              TIM_TimeBaseStructure.TIM_Period = 11;
    407            }
    408            else if(unit == TIM_MSEC_DELAY)
    409            {
    410              TIM_TimeBaseStructure.TIM_Period = 11999;
    411            }
    412            TIM_TimeBaseStructure.TIM_Prescaler = 5;
    413            TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    414            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    415            
    416            TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
    417            TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    418            
    419            TIM_ARRPreloadConfig(TIM2, ENABLE);
    420            
    421            /* TIM IT enable */
    422            TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    423            
    424            /* TIM2 enable counter */ 
    425            TIM_Cmd(TIM2, ENABLE);  
    426          } 
    427          
    428          #endif
    429          
    430          /**
    431          * @}
    432          */ 
    433          
    434          /**
    435          * @}
    436          */ 
    437          
    438          /**
    439          * @}
    440          */
    441          
    442          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   USB_OTG_BSP_ConfigVBUS
       0   USB_OTG_BSP_DriveVBUS
       0   USB_OTG_BSP_EnableInterrupt
      16   USB_OTG_BSP_Init
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
        16   -> RCC_AHB1PeriphClockCmd
        16   -> RCC_AHB2PeriphClockCmd
        16   -> RCC_APB2PeriphClockCmd
       0   USB_OTG_BSP_TimerIRQ
       0   USB_OTG_BSP_mDelay
         0   -> USB_OTG_BSP_uDelay
       4   USB_OTG_BSP_uDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       1  HSEStartUpStatus
       2  USB_OTG_BSP_ConfigVBUS
       2  USB_OTG_BSP_DriveVBUS
       2  USB_OTG_BSP_EnableInterrupt
     114  USB_OTG_BSP_Init
       2  USB_OTG_BSP_TimerIRQ
       8  USB_OTG_BSP_mDelay
      32  USB_OTG_BSP_uDelay

 
   1 byte  in section .bss
 166 bytes in section .text
 
 166 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
