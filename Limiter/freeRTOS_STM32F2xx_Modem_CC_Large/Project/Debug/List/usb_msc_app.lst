###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       18/Dec/2023  17:37:06
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\usb_msc_app.c
#    Command line =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\usb_msc_app.c
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_USB_OTG_FS -lC
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List
#        --diag_suppress Pa050 -o
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\ -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\cpu\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Drv\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\App\fat\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\bsp\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Dev\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_HOST_Library\Core\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\USB\STM32_USB_OTG_Driver\inc\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\portable\IAR\ARM_CM3\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Util\Third_Party\FreeRTOS_v7.6.0\include\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\OsConfig\usbConf\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\
#        -I
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\..\Libraries\FAT_FS\drivers\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\List\usb_msc_app.lst
#    Object file  =  
#        E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\Project\Debug\Obj\usb_msc_app.o
#
###############################################################################

E:\LOOP\SCRDPF\OBD\freeRTOS_STM32F2xx_Modem_CC_Large\App\usb_msc_app.c
      1          /**	 
      2           * |---------------------------------------------------------------------- 
      3           * | Copyright (C) Tilen Majerle, 2014 
      4           * |  
      5           * | This program is free software: you can redistribute it and/or modify 
      6           * | it under the terms of the GNU General Public License as published by 
      7           * | the Free Software Foundation, either version 3 of the License, or 
      8           * | any later version. 
      9           * |   
     10           * | This program is distributed in the hope that it will be useful, 
     11           * | but WITHOUT ANY WARRANTY; without even the implied warranty of 
     12           * | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
     13           * | GNU General Public License for more details. 
     14           * |  
     15           * | You should have received a copy of the GNU General Public License 
     16           * | along with this program.  If not, see <http://www.gnu.org/licenses/>. 
     17           * |---------------------------------------------------------------------- 
     18           */ 
     19          #include "includes.h"
     20          
     21          
     22          /* Private variables */ 

   \                                 In section .bss, align 4
     23          USB_OTG_CORE_HANDLE     USB_OTG_Core; 
     24          USBH_HOST               USB_Host; 
     25          uint8_t                 TM_USB_MSCHOST_INT_Initialized = 0; 
   \                     TM_USB_MSCHOST_INT_Initialized:
   \   00000000                      DS8 1
     26          TM_USB_MSCHOST_Result_t TM_USB_MSCHOST_INT_Result; 
   \                     TM_USB_MSCHOST_INT_Result:
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \                     USB_OTG_Core:
   \   00000004                      DS8 1452
   \                     USB_Host:
   \   000005B0                      DS8 132
     27          
     28          

   \                                 In section .text, align 2, keep-with-next
     29          TM_USB_MSCHOST_Result_t TM_USB_MSCHOST_Init() { 
   \                     TM_USB_MSCHOST_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     30          	/* Set default */ 
     31          	TM_USB_MSCHOST_INT_Result = TM_USB_MSCHOST_Result_Disconnected; 
   \   00000004   0x....             LDR.N    R4,??DataTable12_1
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0x7060             STRB     R0,[R4, #+1]
     32          	/* Init Host Library */ 
     33          	USBH_Init(	&USB_OTG_Core, 
     34          			#ifdef USE_USB_OTG_FS 
     35          				USB_OTG_FS_CORE_ID, 
     36          			#else 
     37          				USB_OTG_HS_CORE_ID, 
     38          			#endif 
     39          				&USB_Host, 
     40          				&USBH_MSC_cb,  
     41          				&USR_Callbacks); 
   \   0000000A   0x....             LDR.N    R0,??DataTable12_2
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x....             LDR.N    R3,??DataTable12_3
   \   00000010   0xF44F 0x60B6      MOV      R0,#+1456
   \   00000014   0x1822             ADDS     R2,R4,R0
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x1D20             ADDS     R0,R4,#+4
   \   0000001A   0x.... 0x....      BL       USBH_Init
     42          	/* Process */ 
     43          	TM_USB_MSCHOST_Process(); 
   \   0000001E   0x.... 0x....      BL       TM_USB_MSCHOST_Process
     44          	/* Initialized */ 
     45          	TM_USB_MSCHOST_INT_Initialized = 1; 
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x7020             STRB     R0,[R4, #+0]
     46          	/* Is connected already? */ 
     47          	return TM_USB_MSCHOST_Device(); 
   \   00000026   0xE8BD 0x4013      POP      {R0,R1,R4,LR}
   \   0000002A   0x....             B.N      TM_USB_MSCHOST_Device
     48          } 
     49          
     50          

   \                                 In section .text, align 2, keep-with-next
     51          void TM_USB_MSCHOST_Process(void) { 
     52          	/* if library is initialized */ 
     53          	if (TM_USB_MSCHOST_INT_Initialized) { 
   \                     TM_USB_MSCHOST_Process: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12_1
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD005             BEQ.N    ??TM_USB_MSCHOST_Process_0
     54          		/* Process */ 
     55          		USBH_Process(&USB_OTG_Core, &USB_Host); 
   \   00000008   0xF44F 0x61B6      MOV      R1,#+1456
   \   0000000C   0x4401             ADD      R1,R0,R1
   \   0000000E   0x1D00             ADDS     R0,R0,#+4
   \   00000010   0x.... 0x....      B.W      USBH_Process
     56          	} 
     57          } 
   \                     ??TM_USB_MSCHOST_Process_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
     58          
     59          

   \                                 In section .text, align 2, keep-with-next
     60          TM_USB_MSCHOST_Result_t TM_USB_MSCHOST_Device(void) { 
     61          	/* Check if library is initialized */ 
     62          	if (!TM_USB_MSCHOST_INT_Initialized) { 
   \                     TM_USB_MSCHOST_Device: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12_1
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD101             BNE.N    ??TM_USB_MSCHOST_Device_0
     63          		return TM_USB_MSCHOST_Result_LibraryNotInitialized; 
   \   00000008   0x2005             MOVS     R0,#+5
   \   0000000A   0x4770             BX       LR
     64          	} 
     65          	/* Return status, handled by USB library */ 
     66          	return TM_USB_MSCHOST_INT_Result; 
   \                     ??TM_USB_MSCHOST_Device_0: (+1)
   \   0000000C   0x7840             LDRB     R0,[R0, #+1]
   \   0000000E   0x4770             BX       LR               ;; return
     67          } 
     68          

   \                                 In section .text, align 2, keep-with-next
     69          FRESULT TM_FATFS_USBDriveSize(uint32_t* total, uint32_t* free) {
   \                     TM_FATFS_USBDriveSize: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
     70          	FATFS *fs;
     71              DWORD fre_clust;
     72          	FRESULT res;
     73          
     74              /* Get volume information and free clusters of drive */
     75              res = f_getfree("1:", &fre_clust, &fs);
   \   00000008   0x466A             MOV      R2,SP
   \   0000000A   0xA901             ADD      R1,SP,#+4
   \   0000000C   0x....             ADR.N    R0,??DataTable12  ;; 0x31, 0x3A, 0x00, 0x00
   \   0000000E   0x.... 0x....      BL       f_getfree
     76              if (res != FR_OK) {
   \   00000012   0x0001             MOVS     R1,R0
   \   00000014   0xD10E             BNE.N    ??TM_FATFS_USBDriveSize_0
     77          		return res;
     78          	}
     79          
     80              /* Get total sectors and free sectors */
     81              *total = (fs->n_fatent - 2) * fs->csize / 2;
   \   00000016   0x9800             LDR      R0,[SP, #+0]
   \   00000018   0x6980             LDR      R0,[R0, #+24]
   \   0000001A   0x1E80             SUBS     R0,R0,#+2
   \   0000001C   0x9900             LDR      R1,[SP, #+0]
   \   0000001E   0x7889             LDRB     R1,[R1, #+2]
   \   00000020   0x4348             MULS     R0,R1,R0
   \   00000022   0x0840             LSRS     R0,R0,#+1
   \   00000024   0x6020             STR      R0,[R4, #+0]
     82              *free = fre_clust * fs->csize / 2;
   \   00000026   0x9801             LDR      R0,[SP, #+4]
   \   00000028   0x9900             LDR      R1,[SP, #+0]
   \   0000002A   0x7889             LDRB     R1,[R1, #+2]
   \   0000002C   0x4348             MULS     R0,R1,R0
   \   0000002E   0x0840             LSRS     R0,R0,#+1
   \   00000030   0x6028             STR      R0,[R5, #+0]
     83          	
     84          	/* Return OK */
     85          	return FR_OK;
   \   00000032   0x2000             MOVS     R0,#+0
   \                     ??TM_FATFS_USBDriveSize_0: (+1)
   \   00000034   0xBD3E             POP      {R1-R5,PC}       ;; return
     86          }
     87          
     88          
     89          //********************************************************************************************* USB Task
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void Task_USB(void * pvParameters)
     92          {
   \                     Task_USB: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB090             SUB      SP,SP,#+64
   \   00000006   0x4604             MOV      R4,R0
     93          	static uint8_t usb_write = 1;
     94          	uint32_t free, total;
     95                  char buffer[50];
     96          
     97          	sysinfo_t *s = (sysinfo_t *)pvParameters 	;
     98          
     99          	TM_USB_MSCHOST_Init();
   \   00000008   0x.... 0x....      BL       TM_USB_MSCHOST_Init
   \   0000000C   0x....             LDR.N    R5,??DataTable12_4
   \   0000000E   0x....             ADR.N    R6,??DataTable12  ;; 0x31, 0x3A, 0x00, 0x00
   \   00000010   0x....             LDR.N    R7,??DataTable12_5
   \   00000012   0x.... 0x....      ADR.W    R8,?_4
    100          
    101          	for(;;)
    102          	{
    103          		s->twatchUSBFlag = 1;
   \                     ??Task_USB_0: (+1)
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x7260             STRB     R0,[R4, #+9]
    104          		TM_USB_MSCHOST_Process();
   \   0000001A   0x.... 0x....      BL       TM_USB_MSCHOST_Process
    105          		if (TM_USB_MSCHOST_Device() == TM_USB_MSCHOST_Result_Connected)
   \   0000001E   0x.... 0x....      BL       TM_USB_MSCHOST_Device
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD154             BNE.N    ??Task_USB_1
    106          		{
    107          			if (usb_write)
   \   00000026   0x7828             LDRB     R0,[R5, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD051             BEQ.N    ??Task_USB_1
    108          			{
    109          				if (f_mount(&USB_Fs, "1:", 1) == FR_OK)
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0x4631             MOV      R1,R6
   \   00000030   0x....             LDR.N    R0,??DataTable12_6
   \   00000032   0x.... 0x....      BL       f_mount
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD145             BNE.N    ??Task_USB_2
    110          				{
    111          					if (f_open(&USB_Fil, "1:usb_file.txt", FA_READ | FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
   \   0000003A   0x220B             MOVS     R2,#+11
   \   0000003C   0x.... 0x....      ADR.W    R1,?_1
   \   00000040   0x4638             MOV      R0,R7
   \   00000042   0x.... 0x....      BL       f_open
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD13D             BNE.N    ??Task_USB_2
    112          					{
    113          						TM_FATFS_USBDriveSize(&total, &free);
   \   0000004A   0xA902             ADD      R1,SP,#+8
   \   0000004C   0xA801             ADD      R0,SP,#+4
   \   0000004E   0x.... 0x....      BL       TM_FATFS_USBDriveSize
    114          
    115          						/* Put data */                                                                           
    116          						f_puts("This is my first file with USB and FatFS\n", &USB_Fil);                          
   \   00000052   0x4639             MOV      R1,R7
   \   00000054   0x.... 0x....      ADR.W    R0,?_2
   \   00000058   0x.... 0x....      BL       f_puts
    117          						f_puts("with USB MSC HOST library from stm32f4-discovery.com\n", &USB_Fil);              
   \   0000005C   0x4639             MOV      R1,R7
   \   0000005E   0x.... 0x....      ADR.W    R0,?_3
   \   00000062   0x.... 0x....      BL       f_puts
    118          						f_puts("----------------------------------------------------\n", &USB_Fil);              
   \   00000066   0x4639             MOV      R1,R7
   \   00000068   0x4640             MOV      R0,R8
   \   0000006A   0x.... 0x....      BL       f_puts
    119          						f_puts("USB total and free space:\n\n", &USB_Fil);                                       
   \   0000006E   0x4639             MOV      R1,R7
   \   00000070   0x.... 0x....      ADR.W    R0,?_5
   \   00000074   0x.... 0x....      BL       f_puts
    120          						/* Total space */                                                                        
    121          						sprintf(buffer, "Total: %8u kB; %5u MB; %2u GB\n", total, total / 1024, total / 1048576);
   \   00000078   0x9801             LDR      R0,[SP, #+4]
   \   0000007A   0x0D00             LSRS     R0,R0,#+20
   \   0000007C   0x9000             STR      R0,[SP, #+0]
   \   0000007E   0x9801             LDR      R0,[SP, #+4]
   \   00000080   0x0A83             LSRS     R3,R0,#+10
   \   00000082   0x4602             MOV      R2,R0
   \   00000084   0x.... 0x....      ADR.W    R1,?_6
   \   00000088   0xA803             ADD      R0,SP,#+12
   \   0000008A   0x.... 0x....      BL       sprintf
    122          						f_puts(buffer, &USB_Fil);                                                                
   \   0000008E   0x4639             MOV      R1,R7
   \   00000090   0xA803             ADD      R0,SP,#+12
   \   00000092   0x.... 0x....      BL       f_puts
    123          						/* Free space */                                                                         
    124          						sprintf(buffer, "Free:  %8u kB; %5u MB; %2u GB\n", free, free / 1024, free / 1048576);   
   \   00000096   0x9802             LDR      R0,[SP, #+8]
   \   00000098   0x0D00             LSRS     R0,R0,#+20
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0x9802             LDR      R0,[SP, #+8]
   \   0000009E   0x0A83             LSRS     R3,R0,#+10
   \   000000A0   0x4602             MOV      R2,R0
   \   000000A2   0x.... 0x....      ADR.W    R1,?_7
   \   000000A6   0xA803             ADD      R0,SP,#+12
   \   000000A8   0x.... 0x....      BL       sprintf
    125          						f_puts(buffer, &USB_Fil);                                                                
   \   000000AC   0x4639             MOV      R1,R7
   \   000000AE   0xA803             ADD      R0,SP,#+12
   \   000000B0   0x.... 0x....      BL       f_puts
    126          						f_puts("----------------------------------------------------\n", &USB_Fil);              
   \   000000B4   0x4639             MOV      R1,R7
   \   000000B6   0x4640             MOV      R0,R8
   \   000000B8   0x.... 0x....      BL       f_puts
    127          						/* Close USB file */                                                                     
    128          						f_close(&USB_Fil);                                                                       
   \   000000BC   0x4638             MOV      R0,R7
   \   000000BE   0x.... 0x....      BL       f_close
    129          
    130          						usb_write = 0;
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x7028             STRB     R0,[R5, #+0]
    131          					}
    132          				}
    133          				f_mount(0, "1:", 1); 
   \                     ??Task_USB_2: (+1)
   \   000000C6   0x2201             MOVS     R2,#+1
   \   000000C8   0x4631             MOV      R1,R6
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x.... 0x....      BL       f_mount
    134          			}
    135          		}
    136          		vTaskDelay(1);
   \                     ??Task_USB_1: (+1)
   \   000000D0   0x2001             MOVS     R0,#+1
   \   000000D2   0x.... 0x....      BL       vTaskDelay
    137          		s->twatchUSBFlag = 0;
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x7260             STRB     R0,[R4, #+9]
   \   000000DA   0xE79C             B.N      ??Task_USB_0
    138          	}
    139          }

   \                                 In section .data, align 1
   \                     `Task_USB::usb_write`:
   \   00000000   0x01               DC8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x31 0x3A          DC8      0x31, 0x3A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     TM_USB_MSCHOST_INT_Initialized

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     USR_Callbacks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     USBH_MSC_cb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     `Task_USB::usb_write`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     USB_Fil

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x........         DC32     USB_Fs

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x31 0x3A          DC8 "1:"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x31 0x3A          DC8 "1:usb_file.txt"
   \              0x75 0x73    
   \              0x62 0x5F    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x2E 0x74    
   \              0x78 0x74    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x54 0x68          DC8 "This is my first file with USB and FatFS\012"
   \              0x69 0x73    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6D 0x79    
   \              0x20 0x66    
   \              0x69 0x72    
   \              0x73 0x74    
   \              0x20 0x66    
   \              0x69 0x6C    
   \              0x65 0x20    
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x55    
   \              0x53 0x42    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x46    
   \              0x61 0x74    
   \              0x46 0x53    
   \              0x0A 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 55H, 53H, 42H
   \              0x74 0x68    
   \              0x20 0x55    
   \              0x53 0x42    
   \   00000008   0x20 0x4D          DC8 20H, 4DH, 53H, 43H, 20H, 48H, 4FH, 53H
   \              0x53 0x43    
   \              0x20 0x48    
   \              0x4F 0x53    
   \   00000010   0x54 0x20          DC8 54H, 20H, 6CH, 69H, 62H, 72H, 61H, 72H
   \              0x6C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \   00000018   0x79 0x20          DC8 79H, 20H, 66H, 72H, 6FH, 6DH, 20H, 73H
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x73    
   \   00000020   0x74 0x6D          DC8 74H, 6DH, 33H, 32H, 66H, 34H, 2DH, 64H
   \              0x33 0x32    
   \              0x66 0x34    
   \              0x2D 0x64    
   \   00000028   0x69 0x73          DC8 69H, 73H, 63H, 6FH, 76H, 65H, 72H, 79H
   \              0x63 0x6F    
   \              0x76 0x65    
   \              0x72 0x79    
   \   00000030   0x2E 0x63          DC8 2EH, 63H, 6FH, 6DH, 0AH, 0
   \              0x6F 0x6D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000008   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000010   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000018   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000020   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000028   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000030   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 0AH, 0
   \              0x2D 0x2D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x55 0x53          DC8 "USB total and free space:\012\012"
   \              0x42 0x20    
   \              0x74 0x6F    
   \              0x74 0x61    
   \              0x6C 0x20    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x65 0x65    
   \              0x20 0x73    
   \              0x70 0x61    
   \              0x63 0x65    
   \              0x3A 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x54 0x6F          DC8 "Total: %8u kB; %5u MB; %2u GB\012"
   \              0x74 0x61    
   \              0x6C 0x3A    
   \              0x20 0x25    
   \              0x38 0x75    
   \              0x20 0x6B    
   \              0x42 0x3B    
   \              0x20 0x25    
   \              0x35 0x75    
   \              0x20 0x4D    
   \              0x42 0x3B    
   \              0x20 0x25    
   \              0x32 0x75    
   \              0x20 0x47    
   \              0x42 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x46 0x72          DC8 "Free:  %8u kB; %5u MB; %2u GB\012"
   \              0x65 0x65    
   \              0x3A 0x20    
   \              0x20 0x25    
   \              0x38 0x75    
   \              0x20 0x6B    
   \              0x42 0x3B    
   \              0x20 0x25    
   \              0x35 0x75    
   \              0x20 0x4D    
   \              0x42 0x3B    
   \              0x20 0x25    
   \              0x32 0x75    
   \              0x20 0x47    
   \              0x42 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   TM_FATFS_USBDriveSize
        24   -> f_getfree
       0   TM_USB_MSCHOST_Device
      16   TM_USB_MSCHOST_Init
         0   -> TM_USB_MSCHOST_Device
        16   -> TM_USB_MSCHOST_Process
        16   -> USBH_Init
       0   TM_USB_MSCHOST_Process
         0   -> USBH_Process
      88   Task_USB
        88   -> TM_FATFS_USBDriveSize
        88   -> TM_USB_MSCHOST_Device
        88   -> TM_USB_MSCHOST_Init
        88   -> TM_USB_MSCHOST_Process
        88   -> f_close
        88   -> f_mount
        88   -> f_open
        88   -> f_puts
        88   -> sprintf
        88   -> vTaskDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ?_0
      16  ?_1
      44  ?_2
      56  ?_3
      56  ?_4
      28  ?_5
      32  ?_6
      32  ?_7
      54  TM_FATFS_USBDriveSize
      16  TM_USB_MSCHOST_Device
    1588  TM_USB_MSCHOST_INT_Initialized
          TM_USB_MSCHOST_INT_Result
          USB_OTG_Core
          USB_Host
      44  TM_USB_MSCHOST_Init
      22  TM_USB_MSCHOST_Process
     220  Task_USB
       1  usb_write

 
 1 588 bytes in section .bss
     1 byte  in section .data
     4 bytes in section .rodata
   648 bytes in section .text
 
   648 bytes of CODE  memory
     4 bytes of CONST memory
 1 589 bytes of DATA  memory

Errors: none
Warnings: none
